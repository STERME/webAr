(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
'use strict';

var _webar = require('./webar');

var _webar2 = _interopRequireDefault(_webar);

var _vconsole = require('./vconsole.min');

var _vconsole2 = _interopRequireDefault(_vconsole);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

new _vconsole2.default();

var ua = navigator.userAgent.toLowerCase(),
    isAndroid = /android/i.test(ua),
    isIphone = /(iPhone|iPad|iPod|iOS)/i.test(ua),
    isWeChat = /MicroMessenger/i.test(ua);

var webAR = new _webar2.default();
var startPanel = $(".openPanel");
var scanPanel = $(".scan-panel");
var openCamera = $("#openCamera");
var video = $('#video')[0];

/*
 * 支持打开摄像头
 */
function success() {
    //显示启动页
    startPanel.show();
}
/*
 * 不支持开启摄像头
 */
function fail() {

    //如果是iphone和weiChat 显示引导页
    if (isIphone && isWeChat) {
        $(".ioswxPanel").show();
    }
    //
}
/*
 * 摄像头开启成功
 */
function openSuccess() {
    //
    startPanel.hide();
}

var deviceId = void 0; //指定调用设备ID
// 列出视频设备
webAR.listCamera().then(function (videoDevice) {
    console.log(videoDevice);
    //测了一些手机，android后置摄像头应该是数组的最后一个，苹果是第一个
    if (isAndroid) {
        console.log('android');
        deviceId = videoDevice[videoDevice.length - 1].deviceId;
    } else if (isIphone) {
        deviceId = videoDevice[0].deviceId;
    }
    success();
}).catch(function (err) {
    console.log(err);
    fail();
    //
});

openCamera.on('click', function () {
    webAR.openCamera(video, deviceId).then(function (msg) {
        // 打开摄像头成功
        // 将视频铺满全屏(简单处理)
        window.setTimeout(function () {
            var videoWidth = video.offsetWidth;
            var videoHeight = video.offsetHeight;

            if (window.innerWidth < window.innerHeight) {
                // 竖屏
                if (videoHeight < window.innerHeight) {
                    video.setAttribute('height', window.innerHeight.toString() + 'px');
                }
            } else {
                // 横屏
                if (videoWidth < window.innerWidth) {
                    video.setAttribute('width', window.innerWidth.toString() + 'px');
                }
            }
        }, 500);

        openSuccess();
    }).catch(function (err) {
        alert('打开视频设备失败');
    });
});

},{"./vconsole.min":2,"./webar":3}],2:[function(require,module,exports){
"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/*!
 * vConsole v3.2.0 (https://github.com/Tencent/vConsole)
 * 
 * Tencent is pleased to support the open source community by making vConsole available.
 * Copyright (C) 2017 THL A29 Limited, a Tencent company. All rights reserved.
 * Licensed under the MIT License (the "License"); you may not use this file except in compliance with the License. You may obtain a copy of the License at
 * http://opensource.org/licenses/MIT
 * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.
 */
!function (e, t) {
  "object" == (typeof exports === "undefined" ? "undefined" : _typeof(exports)) && "object" == (typeof module === "undefined" ? "undefined" : _typeof(module)) ? module.exports = t() : "function" == typeof define && define.amd ? define([], t) : "object" == (typeof exports === "undefined" ? "undefined" : _typeof(exports)) ? exports.VConsole = t() : e.VConsole = t();
}(undefined, function () {
  return function (e) {
    function t(n) {
      if (o[n]) return o[n].exports;var i = o[n] = { exports: {}, id: n, loaded: !1 };return e[n].call(i.exports, i, i.exports, t), i.loaded = !0, i.exports;
    }var o = {};return t.m = e, t.c = o, t.p = "", t(0);
  }([function (e, t, o) {
    "use strict";
    function n(e) {
      return e && e.__esModule ? e : { "default": e };
    }Object.defineProperty(t, "__esModule", { value: !0 }), o(1);var i = o(2),
        a = n(i),
        r = o(18),
        l = n(r);a["default"].VConsolePlugin = l["default"], t["default"] = a["default"], e.exports = t["default"];
  }, function (e, t) {
    "use strict";
    if ("undefined" == typeof Symbol) {
      window.Symbol = function () {};var o = "__symbol_iterator_key";window.Symbol.iterator = o, Array.prototype[o] = function () {
        var e = this,
            t = 0;return { next: function next() {
            return { done: e.length === t, value: e.length === t ? void 0 : e[t++] };
          } };
      };
    }
  }, function (e, t, o) {
    "use strict";
    function n(e) {
      if (e && e.__esModule) return e;var t = {};if (null != e) for (var o in e) {
        Object.prototype.hasOwnProperty.call(e, o) && (t[o] = e[o]);
      }return t["default"] = e, t;
    }function i(e) {
      return e && e.__esModule ? e : { "default": e };
    }function a(e, t) {
      if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
    }Object.defineProperty(t, "__esModule", { value: !0 });var r = function () {
      function e(e, t) {
        for (var o = 0; o < t.length; o++) {
          var n = t[o];n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, n.key, n);
        }
      }return function (t, o, n) {
        return o && e(t.prototype, o), n && e(t, n), t;
      };
    }(),
        l = o(3),
        c = i(l),
        s = o(4),
        d = n(s),
        u = o(5),
        v = i(u);o(7);var f = o(11),
        p = i(f),
        h = o(12),
        g = i(h),
        b = o(13),
        m = i(b),
        y = o(14),
        _ = i(y),
        w = o(15),
        x = i(w),
        k = o(16),
        C = i(k),
        T = o(24),
        O = i(T),
        E = o(26),
        S = i(E),
        L = o(30),
        j = i(L),
        N = o(37),
        P = i(N),
        M = "#__vconsole",
        A = function () {
      function e(t) {
        if (a(this, e), v["default"].one(M)) return void console.debug("vConsole is already exists.");var o = this;if (this.version = c["default"].version, this.$dom = null, this.isInited = !1, this.option = { defaultPlugins: ["system", "network", "element", "storage"] }, this.activedTab = "", this.tabList = [], this.pluginList = {}, this.switchPos = { x: 10, y: 10, startX: 0, startY: 0, endX: 0, endY: 0 }, this.tool = d, this.$ = v["default"], d.isObject(t)) for (var n in t) {
          this.option[n] = t[n];
        }this._addBuiltInPlugins();var i = function i() {
          o.isInited || (o._render(), o._mockTap(), o._bindEvent(), o._autoRun());
        };void 0 !== document ? "complete" == document.readyState ? i() : v["default"].bind(window, "load", i) : !function () {
          var e = void 0,
              t = function o() {
            document && "complete" == document.readyState ? (e && clearTimeout(e), i()) : e = setTimeout(o, 1);
          };e = setTimeout(t, 1);
        }();
      }return r(e, [{ key: "_addBuiltInPlugins", value: function value() {
          this.addPlugin(new C["default"]("default", "Log"));var e = this.option.defaultPlugins,
              t = { system: { proto: O["default"], name: "System" }, network: { proto: S["default"], name: "Network" }, element: { proto: j["default"], name: "Element" }, storage: { proto: P["default"], name: "Storage" } };if (e && d.isArray(e)) for (var o = 0; o < e.length; o++) {
            var n = t[e[o]];n ? this.addPlugin(new n.proto(e[o], n.name)) : console.debug("Unrecognized default plugin ID:", e[o]);
          }
        } }, { key: "_render", value: function value() {
          if (!v["default"].one(M)) {
            var e = document.createElement("div");e.innerHTML = p["default"], document.documentElement.insertAdjacentElement("beforeend", e.children[0]);
          }this.$dom = v["default"].one(M);var t = v["default"].one(".vc-switch", this.$dom),
              o = 1 * d.getStorage("switch_x"),
              n = 1 * d.getStorage("switch_y");(o || n) && (o + t.offsetWidth > document.documentElement.offsetWidth && (o = document.documentElement.offsetWidth - t.offsetWidth), n + t.offsetHeight > document.documentElement.offsetHeight && (n = document.documentElement.offsetHeight - t.offsetHeight), 0 > o && (o = 0), 0 > n && (n = 0), this.switchPos.x = o, this.switchPos.y = n, v["default"].one(".vc-switch").style.right = o + "px", v["default"].one(".vc-switch").style.bottom = n + "px");var i = window.devicePixelRatio || 1,
              a = document.querySelector('[name="viewport"]');if (a && a.content) {
            var r = a.content.match(/initial\-scale\=\d+(\.\d+)?/),
                l = r ? parseFloat(r[0].split("=")[1]) : 1;1 > l && (this.$dom.style.fontSize = 13 * i + "px");
          }v["default"].one(".vc-mask", this.$dom).style.display = "none";
        } }, { key: "_mockTap", value: function value() {
          var e = 700,
              t = 10,
              o = void 0,
              n = void 0,
              i = void 0,
              a = !1,
              r = null;this.$dom.addEventListener("touchstart", function (e) {
            if (void 0 === o) {
              var t = e.targetTouches[0];n = t.pageX, i = t.pageY, o = e.timeStamp, r = e.target.nodeType === Node.TEXT_NODE ? e.target.parentNode : e.target;
            }
          }, !1), this.$dom.addEventListener("touchmove", function (e) {
            var o = e.changedTouches[0];(Math.abs(o.pageX - n) > t || Math.abs(o.pageY - i) > t) && (a = !0);
          }), this.$dom.addEventListener("touchend", function (t) {
            if (a === !1 && t.timeStamp - o < e && null != r) {
              var n = r.tagName.toLowerCase(),
                  i = !1;switch (n) {case "textarea":
                  i = !0;break;case "input":
                  switch (r.type) {case "button":case "checkbox":case "file":case "image":case "radio":case "submit":
                      i = !1;break;default:
                      i = !r.disabled && !r.readOnly;}}i ? r.focus() : t.preventDefault();var l = t.changedTouches[0],
                  c = document.createEvent("MouseEvents");c.initMouseEvent("click", !0, !0, window, 1, l.screenX, l.screenY, l.clientX, l.clientY, !1, !1, !1, !1, 0, null), c.forwardedTouchEvent = !0, c.initEvent("click", !0, !0), r.dispatchEvent(c);
            }o = void 0, a = !1, r = null;
          }, !1);
        } }, { key: "_bindEvent", value: function value() {
          var e = this,
              t = v["default"].one(".vc-switch", e.$dom);v["default"].bind(t, "touchstart", function (t) {
            e.switchPos.startX = t.touches[0].pageX, e.switchPos.startY = t.touches[0].pageY;
          }), v["default"].bind(t, "touchend", function (t) {
            e.switchPos.x = e.switchPos.endX, e.switchPos.y = e.switchPos.endY, e.switchPos.startX = 0, e.switchPos.startY = 0, e.switchPos.endX = 0, e.switchPos.endY = 0, d.setStorage("switch_x", e.switchPos.x), d.setStorage("switch_y", e.switchPos.y);
          }), v["default"].bind(t, "touchmove", function (o) {
            if (o.touches.length > 0) {
              var n = o.touches[0].pageX - e.switchPos.startX,
                  i = o.touches[0].pageY - e.switchPos.startY,
                  a = e.switchPos.x - n,
                  r = e.switchPos.y - i;a + t.offsetWidth > document.documentElement.offsetWidth && (a = document.documentElement.offsetWidth - t.offsetWidth), r + t.offsetHeight > document.documentElement.offsetHeight && (r = document.documentElement.offsetHeight - t.offsetHeight), 0 > a && (a = 0), 0 > r && (r = 0), t.style.right = a + "px", t.style.bottom = r + "px", e.switchPos.endX = a, e.switchPos.endY = r, o.preventDefault();
            }
          }), v["default"].bind(v["default"].one(".vc-switch", e.$dom), "click", function () {
            e.show();
          }), v["default"].bind(v["default"].one(".vc-hide", e.$dom), "click", function () {
            e.hide();
          }), v["default"].bind(v["default"].one(".vc-mask", e.$dom), "click", function (t) {
            return t.target != v["default"].one(".vc-mask") ? !1 : void e.hide();
          }), v["default"].delegate(v["default"].one(".vc-tabbar", e.$dom), "click", ".vc-tab", function (t) {
            var o = this.dataset.tab;o != e.activedTab && e.showTab(o);
          }), v["default"].bind(v["default"].one(".vc-panel", e.$dom), "transitionend webkitTransitionEnd oTransitionEnd otransitionend", function (t) {
            return t.target != v["default"].one(".vc-panel") ? !1 : void (v["default"].hasClass(e.$dom, "vc-toggle") || (t.target.style.display = "none"));
          });var o = v["default"].one(".vc-content", e.$dom),
              n = !1;v["default"].bind(o, "touchstart", function (e) {
            var t = o.scrollTop,
                i = o.scrollHeight,
                a = t + o.offsetHeight;0 === t ? (o.scrollTop = 1, 0 === o.scrollTop && (v["default"].hasClass(e.target, "vc-cmd-input") || (n = !0))) : a === i && (o.scrollTop = t - 1, o.scrollTop === t && (v["default"].hasClass(e.target, "vc-cmd-input") || (n = !0)));
          }), v["default"].bind(o, "touchmove", function (e) {
            n && e.preventDefault();
          }), v["default"].bind(o, "touchend", function (e) {
            n = !1;
          });
        } }, { key: "_autoRun", value: function value() {
          this.isInited = !0;for (var e in this.pluginList) {
            this._initPlugin(this.pluginList[e]);
          }this.tabList.length > 0 && this.showTab(this.tabList[0]), this.triggerEvent("ready");
        } }, { key: "triggerEvent", value: function value(e, t) {
          e = "on" + e.charAt(0).toUpperCase() + e.slice(1), d.isFunction(this.option[e]) && this.option[e].apply(this, t);
        } }, { key: "_initPlugin", value: function value(e) {
          var t = this;e.vConsole = this, e.trigger("init"), e.trigger("renderTab", function (o) {
            t.tabList.push(e.id);var n = v["default"].render(g["default"], { id: e.id, name: e.name });v["default"].one(".vc-tabbar", t.$dom).insertAdjacentElement("beforeend", n);var i = v["default"].render(m["default"], { id: e.id });o && (d.isString(o) ? i.innerHTML += o : d.isFunction(o.appendTo) ? o.appendTo(i) : d.isElement(o) && i.insertAdjacentElement("beforeend", o)), v["default"].one(".vc-content", t.$dom).insertAdjacentElement("beforeend", i);
          }), e.trigger("addTopBar", function (o) {
            if (o) for (var n = v["default"].one(".vc-topbar", t.$dom), i = function i(t) {
              var i = o[t],
                  a = v["default"].render(_["default"], { name: i.name || "Undefined", className: i.className || "", pluginID: e.id });if (i.data) for (var r in i.data) {
                a.dataset[r] = i.data[r];
              }d.isFunction(i.onClick) && v["default"].bind(a, "click", function (t) {
                var o = i.onClick.call(a);o === !1 || (v["default"].removeClass(v["default"].all(".vc-topbar-" + e.id), "vc-actived"), v["default"].addClass(a, "vc-actived"));
              }), n.insertAdjacentElement("beforeend", a);
            }, a = 0; a < o.length; a++) {
              i(a);
            }
          }), e.trigger("addTool", function (o) {
            if (o) for (var n = v["default"].one(".vc-tool-last", t.$dom), i = function i(t) {
              var i = o[t],
                  a = v["default"].render(x["default"], { name: i.name || "Undefined", pluginID: e.id });1 == i.global && v["default"].addClass(a, "vc-global-tool"), d.isFunction(i.onClick) && v["default"].bind(a, "click", function (e) {
                i.onClick.call(a);
              }), n.parentNode.insertBefore(a, n);
            }, a = 0; a < o.length; a++) {
              i(a);
            }
          }), e.isReady = !0, e.trigger("ready");
        } }, { key: "_triggerPluginsEvent", value: function value(e) {
          for (var t in this.pluginList) {
            this.pluginList[t].isReady && this.pluginList[t].trigger(e);
          }
        } }, { key: "_triggerPluginEvent", value: function value(e, t) {
          var o = this.pluginList[e];o && o.isReady && o.trigger(t);
        } }, { key: "addPlugin", value: function value(e) {
          return void 0 !== this.pluginList[e.id] ? (console.debug("Plugin " + e.id + " has already been added."), !1) : (this.pluginList[e.id] = e, this.isInited && (this._initPlugin(e), 1 == this.tabList.length && this.showTab(this.tabList[0])), !0);
        } }, { key: "removePlugin", value: function value(e) {
          e = (e + "").toLowerCase();var t = this.pluginList[e];if (void 0 === t) return console.debug("Plugin " + e + " does not exist."), !1;if (t.trigger("remove"), this.isInited) {
            var o = v["default"].one("#__vc_tab_" + e);o && o.parentNode.removeChild(o);for (var n = v["default"].all(".vc-topbar-" + e, this.$dom), i = 0; i < n.length; i++) {
              n[i].parentNode.removeChild(n[i]);
            }var a = v["default"].one("#__vc_log_" + e);a && a.parentNode.removeChild(a);for (var r = v["default"].all(".vc-tool-" + e, this.$dom), l = 0; l < r.length; l++) {
              r[l].parentNode.removeChild(r[l]);
            }
          }var c = this.tabList.indexOf(e);c > -1 && this.tabList.splice(c, 1);try {
            delete this.pluginList[e];
          } catch (s) {
            this.pluginList[e] = void 0;
          }return this.activedTab == e && this.tabList.length > 0 && this.showTab(this.tabList[0]), !0;
        } }, { key: "show", value: function value() {
          if (this.isInited) {
            var e = this,
                t = v["default"].one(".vc-panel", this.$dom);t.style.display = "block", setTimeout(function () {
              v["default"].addClass(e.$dom, "vc-toggle"), e._triggerPluginsEvent("showConsole");var t = v["default"].one(".vc-mask", e.$dom);t.style.display = "block";
            }, 10);
          }
        } }, { key: "hide", value: function value() {
          if (this.isInited) {
            v["default"].removeClass(this.$dom, "vc-toggle"), this._triggerPluginsEvent("hideConsole");var e = v["default"].one(".vc-mask", this.$dom),
                t = v["default"].one(".vc-panel", this.$dom);v["default"].bind(e, "transitionend", function (o) {
              e.style.display = "none", t.style.display = "none";
            });
          }
        } }, { key: "showSwitch", value: function value() {
          if (this.isInited) {
            var e = v["default"].one(".vc-switch", this.$dom);e.style.display = "block";
          }
        } }, { key: "hideSwitch", value: function value() {
          if (this.isInited) {
            var e = v["default"].one(".vc-switch", this.$dom);e.style.display = "none";
          }
        } }, { key: "showTab", value: function value(e) {
          if (this.isInited) {
            var t = v["default"].one("#__vc_log_" + e);v["default"].removeClass(v["default"].all(".vc-tab", this.$dom), "vc-actived"), v["default"].addClass(v["default"].one("#__vc_tab_" + e), "vc-actived"), v["default"].removeClass(v["default"].all(".vc-logbox", this.$dom), "vc-actived"), v["default"].addClass(t, "vc-actived");var o = v["default"].all(".vc-topbar-" + e, this.$dom);v["default"].removeClass(v["default"].all(".vc-toptab", this.$dom), "vc-toggle"), v["default"].addClass(o, "vc-toggle"), o.length > 0 ? v["default"].addClass(v["default"].one(".vc-content", this.$dom), "vc-has-topbar") : v["default"].removeClass(v["default"].one(".vc-content", this.$dom), "vc-has-topbar"), v["default"].removeClass(v["default"].all(".vc-tool", this.$dom), "vc-toggle"), v["default"].addClass(v["default"].all(".vc-tool-" + e, this.$dom), "vc-toggle"), this.activedTab && this._triggerPluginEvent(this.activedTab, "hide"), this.activedTab = e, this._triggerPluginEvent(this.activedTab, "show");
          }
        } }, { key: "setOption", value: function value(e, t) {
          if (d.isString(e)) this.option[e] = t, this._triggerPluginsEvent("updateOption");else if (d.isObject(e)) {
            for (var o in e) {
              this.option[o] = e[o];
            }this._triggerPluginsEvent("updateOption");
          } else console.debug("The first parameter of vConsole.setOption() must be a string or an object.");
        } }, { key: "destroy", value: function value() {
          if (this.isInited) {
            for (var e = Object.keys(this.pluginList), t = e.length - 1; t >= 0; t--) {
              this.removePlugin(e[t]);
            }this.$dom.parentNode.removeChild(this.$dom);
          }
        } }]), e;
    }();t["default"] = A, e.exports = t["default"];
  }, function (e, t) {
    e.exports = { name: "vconsole", version: "3.2.0", description: "A lightweight, extendable front-end developer tool for mobile web page.", homepage: "https://github.com/Tencent/vConsole", main: "dist/vconsole.min.js", scripts: { test: "mocha", dist: "webpack" }, keywords: ["console", "debug", "mobile"], repository: { type: "git", url: "git+https://github.com/Tencent/vConsole.git" }, dependencies: {}, devDependencies: { "babel-core": "^6.7.7", "babel-loader": "^6.2.4", "babel-plugin-add-module-exports": "^0.1.4", "babel-preset-es2015": "^6.6.0", "babel-preset-stage-3": "^6.5.0", chai: "^3.5.0", "css-loader": "^0.23.1", "extract-text-webpack-plugin": "^1.0.1", "html-loader": "^0.4.3", jsdom: "^9.2.1", "json-loader": "^0.5.4", less: "^2.5.3", "less-loader": "^2.2.3", mocha: "^2.5.3", "style-loader": "^0.13.1", webpack: "~1.12.11" }, author: "Tencent", license: "MIT" };
  }, function (e, t) {
    "use strict";
    function o(e) {
      var t = e > 0 ? new Date(e) : new Date(),
          o = t.getDate() < 10 ? "0" + t.getDate() : t.getDate(),
          n = t.getMonth() < 9 ? "0" + (t.getMonth() + 1) : t.getMonth() + 1,
          i = t.getFullYear(),
          a = t.getHours() < 10 ? "0" + t.getHours() : t.getHours(),
          r = t.getMinutes() < 10 ? "0" + t.getMinutes() : t.getMinutes(),
          l = t.getSeconds() < 10 ? "0" + t.getSeconds() : t.getSeconds(),
          c = t.getMilliseconds() < 10 ? "0" + t.getMilliseconds() : t.getMilliseconds();return 100 > c && (c = "0" + c), { time: +t, year: i, month: n, day: o, hour: a, minute: r, second: l, millisecond: c };
    }function n(e) {
      return "[object Number]" == Object.prototype.toString.call(e);
    }function i(e) {
      return "[object String]" == Object.prototype.toString.call(e);
    }function a(e) {
      return "[object Array]" == Object.prototype.toString.call(e);
    }function r(e) {
      return "[object Boolean]" == Object.prototype.toString.call(e);
    }function l(e) {
      return "[object Undefined]" == Object.prototype.toString.call(e);
    }function c(e) {
      return "[object Null]" == Object.prototype.toString.call(e);
    }function s(e) {
      return "[object Symbol]" == Object.prototype.toString.call(e);
    }function d(e) {
      return !("[object Object]" != Object.prototype.toString.call(e) && (n(e) || i(e) || r(e) || a(e) || c(e) || u(e) || l(e) || s(e)));
    }function u(e) {
      return "[object Function]" == Object.prototype.toString.call(e);
    }function v(e) {
      return "object" === ("undefined" == typeof HTMLElement ? "undefined" : w(HTMLElement)) ? e instanceof HTMLElement : e && "object" === ("undefined" == typeof e ? "undefined" : w(e)) && null !== e && 1 === e.nodeType && "string" == typeof e.nodeName;
    }function f(e) {
      var t = Object.prototype.toString.call(e);return "[object global]" == t || "[object Window]" == t || "[object DOMWindow]" == t;
    }function p(e) {
      var t = Object.prototype.hasOwnProperty;if (!e || "object" !== ("undefined" == typeof e ? "undefined" : w(e)) || e.nodeType || f(e)) return !1;try {
        if (e.constructor && !t.call(e, "constructor") && !t.call(e.constructor.prototype, "isPrototypeOf")) return !1;
      } catch (o) {
        return !1;
      }var n = void 0;for (n in e) {}return void 0 === n || t.call(e, n);
    }function h(e) {
      return document.createElement("a").appendChild(document.createTextNode(e)).parentNode.innerHTML;
    }function g(e) {
      var t = arguments.length <= 1 || void 0 === arguments[1] ? "	" : arguments[1],
          o = arguments.length <= 2 || void 0 === arguments[2] ? "CIRCULAR_DEPENDECY_OBJECT" : arguments[2],
          n = [],
          i = JSON.stringify(e, function (e, t) {
        if ("object" === ("undefined" == typeof t ? "undefined" : w(t)) && null !== t) {
          if (~n.indexOf(t)) return o;n.push(t);
        }return t;
      }, t);return n = null, i;
    }function b(e) {
      if (!d(e) && !a(e)) return [];var t = ["toString", "toLocaleString", "valueOf", "hasOwnProperty", "isPrototypeOf", "propertyIsEnumerable", "constructor"],
          o = [];for (var n in e) {
        t.indexOf(n) < 0 && o.push(n);
      }return o = o.sort();
    }function m(e) {
      return Object.prototype.toString.call(e).replace("[object ", "").replace("]", "");
    }function y(e, t) {
      window.localStorage && (e = "vConsole_" + e, localStorage.setItem(e, t));
    }function _(e) {
      return window.localStorage ? (e = "vConsole_" + e, localStorage.getItem(e)) : void 0;
    }Object.defineProperty(t, "__esModule", { value: !0 });var w = "function" == typeof Symbol && "symbol" == _typeof(Symbol.iterator) ? function (e) {
      return typeof e === "undefined" ? "undefined" : _typeof(e);
    } : function (e) {
      return e && "function" == typeof Symbol && e.constructor === Symbol ? "symbol" : typeof e === "undefined" ? "undefined" : _typeof(e);
    };t.getDate = o, t.isNumber = n, t.isString = i, t.isArray = a, t.isBoolean = r, t.isUndefined = l, t.isNull = c, t.isSymbol = s, t.isObject = d, t.isFunction = u, t.isElement = v, t.isWindow = f, t.isPlainObject = p, t.htmlEncode = h, t.JSONStringify = g, t.getObjAllKeys = b, t.getObjName = m, t.setStorage = y, t.getStorage = _;
  }, function (e, t, o) {
    "use strict";
    function n(e) {
      return e && e.__esModule ? e : { "default": e };
    }Object.defineProperty(t, "__esModule", { value: !0 });var i = o(4),
        a = o(6),
        r = n(a),
        l = {};l.one = function (e, t) {
      return t ? t.querySelector(e) : document.querySelector(e);
    }, l.all = function (e, t) {
      var o = void 0,
          n = [];return o = t ? t.querySelectorAll(e) : document.querySelectorAll(e), o && o.length > 0 && (n = Array.prototype.slice.call(o)), n;
    }, l.addClass = function (e, t) {
      if (e) {
        (0, i.isArray)(e) || (e = [e]);for (var o = 0; o < e.length; o++) {
          var n = e[o].className || "",
              a = n.split(" ");a.indexOf(t) > -1 || (a.push(t), e[o].className = a.join(" "));
        }
      }
    }, l.removeClass = function (e, t) {
      if (e) {
        (0, i.isArray)(e) || (e = [e]);for (var o = 0; o < e.length; o++) {
          for (var n = e[o].className.split(" "), a = 0; a < n.length; a++) {
            n[a] == t && (n[a] = "");
          }e[o].className = n.join(" ").trim();
        }
      }
    }, l.hasClass = function (e, t) {
      if (!e) return !1;for (var o = e.className.split(" "), n = 0; n < o.length; n++) {
        if (o[n] == t) return !0;
      }return !1;
    }, l.bind = function (e, t, o, n) {
      if (e) {
        void 0 === n && (n = !1), (0, i.isArray)(e) || (e = [e]);for (var a = 0; a < e.length; a++) {
          e[a].addEventListener(t, o, n);
        }
      }
    }, l.delegate = function (e, t, o, n) {
      e && e.addEventListener(t, function (t) {
        var i = l.all(o, e);if (i) e: for (var a = 0; a < i.length; a++) {
          for (var r = t.target; r;) {
            if (r == i[a]) {
              n.call(r, t);break e;
            }if (r = r.parentNode, r == e) break;
          }
        }
      }, !1);
    }, l.render = r["default"], t["default"] = l, e.exports = t["default"];
  }, function (e, t) {
    "use strict";
    function o(e, t, o) {
      var n = /\{\{([^\}]+)\}\}/g,
          i = "",
          a = "",
          r = 0,
          l = [],
          c = function c(e, t) {
        "" !== e && (i += t ? e.match(/^ ?else/g) ? "} " + e + " {\n" : e.match(/\/(if|for|switch)/g) ? "}\n" : e.match(/^ ?if|for|switch/g) ? e + " {\n" : e.match(/^ ?(break|continue) ?$/g) ? e + ";\n" : e.match(/^ ?(case|default)/g) ? e + ":\n" : "arr.push(" + e + ");\n" : 'arr.push("' + e.replace(/"/g, '\\"') + '");\n');
      };for (window.__mito_data = t, window.__mito_code = "", window.__mito_result = "", e = e.replace(/(\{\{ ?switch(.+?)\}\})[\r\n\t ]+\{\{/g, "$1{{"), e = e.replace(/^[\r\n]/, "").replace(/\n/g, "\\\n").replace(/\r/g, "\\\r"), a = "(function(){\n", i = "var arr = [];\n"; l = n.exec(e);) {
        c(e.slice(r, l.index), !1), c(l[1], !0), r = l.index + l[0].length;
      }c(e.substr(r, e.length - r), !1), i += '__mito_result = arr.join("");', i = "with (__mito_data) {\n" + i + "\n}", a += i, a += "})();";var s = document.getElementsByTagName("script"),
          d = "";s.length > 0 && (d = s[0].getAttribute("nonce") || "");var u = document.createElement("SCRIPT");u.innerHTML = a, u.setAttribute("nonce", d), document.documentElement.appendChild(u);var v = __mito_result;if (document.documentElement.removeChild(u), !o) {
        var f = document.createElement("DIV");f.innerHTML = v, v = f.children[0];
      }return v;
    }Object.defineProperty(t, "__esModule", { value: !0 }), t["default"] = o, e.exports = t["default"];
  }, function (e, t, o) {
    var n = o(8);"string" == typeof n && (n = [[e.id, n, ""]]);o(10)(n, {});n.locals && (e.exports = n.locals);
  }, function (e, t, o) {
    t = e.exports = o(9)(), t.push([e.id, '#__vconsole{color:#000;font-size:13px;font-family:Helvetica Neue,Helvetica,Arial,sans-serif}#__vconsole .vc-max-height{max-height:19.23076923em}#__vconsole .vc-max-height-line{max-height:3.38461538em}#__vconsole .vc-min-height{min-height:3.07692308em}#__vconsole dd,#__vconsole dl,#__vconsole pre{margin:0}#__vconsole .vc-switch{display:block;position:fixed;right:.76923077em;bottom:.76923077em;color:#fff;background-color:#04be02;line-height:1;font-size:1.07692308em;padding:.61538462em 1.23076923em;z-index:10000;border-radius:.30769231em;box-shadow:0 0 .61538462em rgba(0,0,0,.4)}#__vconsole .vc-mask{top:0;background:transparent;z-index:10001;transition:background .3s;-webkit-tap-highlight-color:transparent;overflow-y:scroll}#__vconsole .vc-mask,#__vconsole .vc-panel{display:none;position:fixed;left:0;right:0;bottom:0}#__vconsole .vc-panel{min-height:85%;z-index:10002;background-color:#efeff4;-webkit-transition:-webkit-transform .3s;transition:-webkit-transform .3s;transition:transform .3s;transition:transform .3s,-webkit-transform .3s;-webkit-transform:translateY(100%);transform:translateY(100%)}#__vconsole .vc-tabbar{border-bottom:1px solid #d9d9d9;overflow-x:auto;height:3em;width:auto;white-space:nowrap}#__vconsole .vc-tabbar .vc-tab{display:inline-block;line-height:3em;padding:0 1.15384615em;border-right:1px solid #d9d9d9;text-decoration:none;color:#000;-webkit-tap-highlight-color:transparent;-webkit-touch-callout:none}#__vconsole .vc-tabbar .vc-tab:active{background-color:rgba(0,0,0,.15)}#__vconsole .vc-tabbar .vc-tab.vc-actived{background-color:#fff}#__vconsole .vc-content{background-color:#fff;overflow-x:hidden;overflow-y:auto;position:absolute;top:3.07692308em;left:0;right:0;bottom:3.07692308em;-webkit-overflow-scrolling:touch}#__vconsole .vc-content.vc-has-topbar{top:5.46153846em}#__vconsole .vc-topbar{background-color:#fbf9fe;display:flex;display:-webkit-box;flex-direction:row;flex-wrap:wrap;-webkit-box-direction:row;-webkit-flex-wrap:wrap;width:100%}#__vconsole .vc-topbar .vc-toptab{display:none;flex:1;-webkit-box-flex:1;line-height:2.30769231em;padding:0 1.15384615em;border-bottom:1px solid #d9d9d9;text-decoration:none;text-align:center;color:#000;-webkit-tap-highlight-color:transparent;-webkit-touch-callout:none}#__vconsole .vc-topbar .vc-toptab.vc-toggle{display:block}#__vconsole .vc-topbar .vc-toptab:active{background-color:rgba(0,0,0,.15)}#__vconsole .vc-topbar .vc-toptab.vc-actived{border-bottom:1px solid #3e82f7}#__vconsole .vc-logbox{display:none;position:relative;min-height:100%}#__vconsole .vc-logbox i{font-style:normal}#__vconsole .vc-logbox .vc-log{padding-bottom:3em;-webkit-tap-highlight-color:transparent}#__vconsole .vc-logbox .vc-log:empty:before{content:"Empty";color:#999;position:absolute;top:45%;left:0;right:0;bottom:0;font-size:1.15384615em;text-align:center}#__vconsole .vc-logbox .vc-item{margin:0;padding:.46153846em .61538462em;overflow:hidden;line-height:1.3;border-bottom:1px solid #eee;word-break:break-word}#__vconsole .vc-logbox .vc-item-info{color:#6a5acd}#__vconsole .vc-logbox .vc-item-debug{color:#daa520}#__vconsole .vc-logbox .vc-item-warn{color:orange;border-color:#ffb930;background-color:#fffacd}#__vconsole .vc-logbox .vc-item-error{color:#dc143c;border-color:#f4a0ab;background-color:#ffe4e1}#__vconsole .vc-logbox .vc-log.vc-log-partly .vc-item{display:none}#__vconsole .vc-logbox .vc-log.vc-log-partly-error .vc-item-error,#__vconsole .vc-logbox .vc-log.vc-log-partly-info .vc-item-info,#__vconsole .vc-logbox .vc-log.vc-log-partly-log .vc-item-log,#__vconsole .vc-logbox .vc-log.vc-log-partly-warn .vc-item-warn{display:block}#__vconsole .vc-logbox .vc-item .vc-item-content{margin-right:4.61538462em;display:block}#__vconsole .vc-logbox .vc-item .vc-item-meta{color:#888;float:right;width:4.61538462em;text-align:right}#__vconsole .vc-logbox .vc-item.vc-item-nometa .vc-item-content{margin-right:0}#__vconsole .vc-logbox .vc-item.vc-item-nometa .vc-item-meta{display:none}#__vconsole .vc-logbox .vc-item .vc-item-code{display:block;white-space:pre-wrap;overflow:auto;position:relative}#__vconsole .vc-logbox .vc-item .vc-item-code.vc-item-code-input,#__vconsole .vc-logbox .vc-item .vc-item-code.vc-item-code-output{padding-left:.92307692em}#__vconsole .vc-logbox .vc-item .vc-item-code.vc-item-code-input:before,#__vconsole .vc-logbox .vc-item .vc-item-code.vc-item-code-output:before{content:"\\203A";position:absolute;top:-.23076923em;left:0;font-size:1.23076923em;color:#6a5acd}#__vconsole .vc-logbox .vc-item .vc-item-code.vc-item-code-output:before{content:"\\2039"}#__vconsole .vc-logbox .vc-item .vc-fold{display:block;overflow:auto;-webkit-overflow-scrolling:touch}#__vconsole .vc-logbox .vc-item .vc-fold .vc-fold-outer{display:block;font-style:italic;padding-left:.76923077em;position:relative}#__vconsole .vc-logbox .vc-item .vc-fold .vc-fold-outer:active{background-color:#e6e6e6}#__vconsole .vc-logbox .vc-item .vc-fold .vc-fold-outer:before{content:"";position:absolute;top:.30769231em;left:.15384615em;width:0;height:0;border:.30769231em solid transparent;border-left-color:#000}#__vconsole .vc-logbox .vc-item .vc-fold .vc-fold-outer.vc-toggle:before{top:.46153846em;left:0;border-top-color:#000;border-left-color:transparent}#__vconsole .vc-logbox .vc-item .vc-fold .vc-fold-inner{display:none;margin-left:.76923077em}#__vconsole .vc-logbox .vc-item .vc-fold .vc-fold-inner.vc-toggle{display:block}#__vconsole .vc-logbox .vc-item .vc-fold .vc-fold-inner .vc-code-key{margin-left:.76923077em}#__vconsole .vc-logbox .vc-item .vc-fold .vc-fold-outer .vc-code-key{margin-left:0}#__vconsole .vc-logbox .vc-code-key{color:#905}#__vconsole .vc-logbox .vc-code-private-key{color:#d391b5}#__vconsole .vc-logbox .vc-code-function{color:#905;font-style:italic}#__vconsole .vc-logbox .vc-code-boolean,#__vconsole .vc-logbox .vc-code-number{color:#0086b3}#__vconsole .vc-logbox .vc-code-string{color:#183691}#__vconsole .vc-logbox .vc-code-null,#__vconsole .vc-logbox .vc-code-undefined{color:#666}#__vconsole .vc-logbox .vc-cmd{position:absolute;height:3.07692308em;left:0;right:0;bottom:0;border-top:1px solid #d9d9d9;display:block!important}#__vconsole .vc-logbox .vc-cmd .vc-cmd-input-wrap{display:block;height:2.15384615em;margin-right:3.07692308em;padding:.46153846em .61538462em}#__vconsole .vc-logbox .vc-cmd .vc-cmd-input{width:100%;border:none;resize:none;outline:none;padding:0;font-size:.92307692em}#__vconsole .vc-logbox .vc-cmd .vc-cmd-input::-webkit-input-placeholder{line-height:2.15384615em}#__vconsole .vc-logbox .vc-cmd .vc-cmd-btn{position:absolute;top:0;right:0;bottom:0;width:3.07692308em;border:none;background-color:#efeff4;outline:none;-webkit-touch-callout:none;font-size:1em}#__vconsole .vc-logbox .vc-cmd .vc-cmd-btn:active{background-color:rgba(0,0,0,.15)}#__vconsole .vc-logbox .vc-group .vc-group-preview{-webkit-touch-callout:none}#__vconsole .vc-logbox .vc-group .vc-group-preview:active{background-color:#e6e6e6}#__vconsole .vc-logbox .vc-group .vc-group-detail{display:none;padding:0 0 .76923077em 1.53846154em;border-bottom:1px solid #eee}#__vconsole .vc-logbox .vc-group.vc-actived .vc-group-detail{display:block;background-color:#fbf9fe}#__vconsole .vc-logbox .vc-group.vc-actived .vc-table-row{background-color:#fff}#__vconsole .vc-logbox .vc-group.vc-actived .vc-group-preview{background-color:#fbf9fe}#__vconsole .vc-logbox .vc-table .vc-table-row{display:flex;display:-webkit-flex;flex-direction:row;flex-wrap:wrap;-webkit-box-direction:row;-webkit-flex-wrap:wrap;overflow:hidden;border-bottom:1px solid #eee}#__vconsole .vc-logbox .vc-table .vc-table-row.vc-left-border{border-left:1px solid #eee}#__vconsole .vc-logbox .vc-table .vc-table-col{flex:1;-webkit-box-flex:1;padding:.23076923em .30769231em;border-left:1px solid #eee;overflow:auto;white-space:pre-wrap;word-break:break-word;-webkit-overflow-scrolling:touch}#__vconsole .vc-logbox .vc-table .vc-table-col:first-child{border:none}#__vconsole .vc-logbox .vc-table .vc-small .vc-table-col{padding:0 .30769231em;font-size:.92307692em}#__vconsole .vc-logbox .vc-table .vc-table-col-2{flex:2;-webkit-box-flex:2}#__vconsole .vc-logbox .vc-table .vc-table-col-3{flex:3;-webkit-box-flex:3}#__vconsole .vc-logbox .vc-table .vc-table-col-4{flex:4;-webkit-box-flex:4}#__vconsole .vc-logbox .vc-table .vc-table-col-5{flex:5;-webkit-box-flex:5}#__vconsole .vc-logbox .vc-table .vc-table-col-6{flex:6;-webkit-box-flex:6}#__vconsole .vc-logbox .vc-table .vc-table-row-error{border-color:#f4a0ab;background-color:#ffe4e1}#__vconsole .vc-logbox .vc-table .vc-table-row-error .vc-table-col{color:#dc143c;border-color:#f4a0ab}#__vconsole .vc-logbox .vc-table .vc-table-col-title{font-weight:700}#__vconsole .vc-logbox.vc-actived{display:block}#__vconsole .vc-toolbar{border-top:1px solid #d9d9d9;line-height:3em;position:absolute;left:0;right:0;bottom:0;display:flex;display:-webkit-box;flex-direction:row;-webkit-box-direction:row}#__vconsole .vc-toolbar .vc-tool{display:none;text-decoration:none;color:#000;width:50%;flex:1;-webkit-box-flex:1;text-align:center;position:relative;-webkit-touch-callout:none}#__vconsole .vc-toolbar .vc-tool.vc-global-tool,#__vconsole .vc-toolbar .vc-tool.vc-toggle{display:block}#__vconsole .vc-toolbar .vc-tool:active{background-color:rgba(0,0,0,.15)}#__vconsole .vc-toolbar .vc-tool:after{content:" ";position:absolute;top:.53846154em;bottom:.53846154em;right:0;border-left:1px solid #d9d9d9}#__vconsole .vc-toolbar .vc-tool-last:after{border:none}#__vconsole.vc-toggle .vc-switch{display:none}#__vconsole.vc-toggle .vc-mask{background:rgba(0,0,0,.6);display:block}#__vconsole.vc-toggle .vc-panel{-webkit-transform:translate(0);transform:translate(0)}', ""]);
  }, function (e, t) {
    "use strict";
    e.exports = function () {
      var e = [];return e.toString = function () {
        for (var e = [], t = 0; t < this.length; t++) {
          var o = this[t];o[2] ? e.push("@media " + o[2] + "{" + o[1] + "}") : e.push(o[1]);
        }return e.join("");
      }, e.i = function (t, o) {
        "string" == typeof t && (t = [[null, t, ""]]);for (var n = {}, i = 0; i < this.length; i++) {
          var a = this[i][0];"number" == typeof a && (n[a] = !0);
        }for (i = 0; i < t.length; i++) {
          var r = t[i];"number" == typeof r[0] && n[r[0]] || (o && !r[2] ? r[2] = o : o && (r[2] = "(" + r[2] + ") and (" + o + ")"), e.push(r));
        }
      }, e;
    };
  }, function (e, t, o) {
    function n(e, t) {
      for (var o = 0; o < e.length; o++) {
        var n = e[o],
            i = f[n.id];if (i) {
          i.refs++;for (var a = 0; a < i.parts.length; a++) {
            i.parts[a](n.parts[a]);
          }for (; a < n.parts.length; a++) {
            i.parts.push(s(n.parts[a], t));
          }
        } else {
          for (var r = [], a = 0; a < n.parts.length; a++) {
            r.push(s(n.parts[a], t));
          }f[n.id] = { id: n.id, refs: 1, parts: r };
        }
      }
    }function i(e) {
      for (var t = [], o = {}, n = 0; n < e.length; n++) {
        var i = e[n],
            a = i[0],
            r = i[1],
            l = i[2],
            c = i[3],
            s = { css: r, media: l, sourceMap: c };o[a] ? o[a].parts.push(s) : t.push(o[a] = { id: a, parts: [s] });
      }return t;
    }function a(e, t) {
      var o = g(),
          n = y[y.length - 1];if ("top" === e.insertAt) n ? n.nextSibling ? o.insertBefore(t, n.nextSibling) : o.appendChild(t) : o.insertBefore(t, o.firstChild), y.push(t);else {
        if ("bottom" !== e.insertAt) throw new Error("Invalid value for parameter 'insertAt'. Must be 'top' or 'bottom'.");o.appendChild(t);
      }
    }function r(e) {
      e.parentNode.removeChild(e);var t = y.indexOf(e);t >= 0 && y.splice(t, 1);
    }function l(e) {
      var t = document.createElement("style");return t.type = "text/css", a(e, t), t;
    }function c(e) {
      var t = document.createElement("link");return t.rel = "stylesheet", a(e, t), t;
    }function s(e, t) {
      var o, n, i;if (t.singleton) {
        var a = m++;o = b || (b = l(t)), n = d.bind(null, o, a, !1), i = d.bind(null, o, a, !0);
      } else e.sourceMap && "function" == typeof URL && "function" == typeof URL.createObjectURL && "function" == typeof URL.revokeObjectURL && "function" == typeof Blob && "function" == typeof btoa ? (o = c(t), n = v.bind(null, o), i = function i() {
        r(o), o.href && URL.revokeObjectURL(o.href);
      }) : (o = l(t), n = u.bind(null, o), i = function i() {
        r(o);
      });return n(e), function (t) {
        if (t) {
          if (t.css === e.css && t.media === e.media && t.sourceMap === e.sourceMap) return;n(e = t);
        } else i();
      };
    }function d(e, t, o, n) {
      var i = o ? "" : n.css;if (e.styleSheet) e.styleSheet.cssText = _(t, i);else {
        var a = document.createTextNode(i),
            r = e.childNodes;r[t] && e.removeChild(r[t]), r.length ? e.insertBefore(a, r[t]) : e.appendChild(a);
      }
    }function u(e, t) {
      var o = t.css,
          n = t.media;if (n && e.setAttribute("media", n), e.styleSheet) e.styleSheet.cssText = o;else {
        for (; e.firstChild;) {
          e.removeChild(e.firstChild);
        }e.appendChild(document.createTextNode(o));
      }
    }function v(e, t) {
      var o = t.css,
          n = t.sourceMap;n && (o += "\n/*# sourceMappingURL=data:application/json;base64," + btoa(unescape(encodeURIComponent(JSON.stringify(n)))) + " */");var i = new Blob([o], { type: "text/css"
      }),
          a = e.href;e.href = URL.createObjectURL(i), a && URL.revokeObjectURL(a);
    }var f = {},
        p = function p(e) {
      var t;return function () {
        return "undefined" == typeof t && (t = e.apply(this, arguments)), t;
      };
    },
        h = p(function () {
      return (/msie [6-9]\b/.test(window.navigator.userAgent.toLowerCase())
      );
    }),
        g = p(function () {
      return document.head || document.getElementsByTagName("head")[0];
    }),
        b = null,
        m = 0,
        y = [];e.exports = function (e, t) {
      t = t || {}, "undefined" == typeof t.singleton && (t.singleton = h()), "undefined" == typeof t.insertAt && (t.insertAt = "bottom");var o = i(e);return n(o, t), function (e) {
        for (var a = [], r = 0; r < o.length; r++) {
          var l = o[r],
              c = f[l.id];c.refs--, a.push(c);
        }if (e) {
          var s = i(e);n(s, t);
        }for (var r = 0; r < a.length; r++) {
          var c = a[r];if (0 === c.refs) {
            for (var d = 0; d < c.parts.length; d++) {
              c.parts[d]();
            }delete f[c.id];
          }
        }
      };
    };var _ = function () {
      var e = [];return function (t, o) {
        return e[t] = o, e.filter(Boolean).join("\n");
      };
    }();
  }, function (e, t) {
    e.exports = '<div id="__vconsole" class="">\n  <div class="vc-switch">vConsole</div>\n  <div class="vc-mask">\n  </div>\n  <div class="vc-panel">\n    <div class="vc-tabbar">\n    </div>\n    <div class="vc-topbar">\n    </div>\n    <div class="vc-content">\n    </div>\n    <div class="vc-toolbar">\n      <a class="vc-tool vc-global-tool vc-tool-last vc-hide">Hide</a>\n    </div>\n  </div>\n</div>';
  }, function (e, t) {
    e.exports = '<a class="vc-tab" data-tab="{{id}}" id="__vc_tab_{{id}}">{{name}}</a>';
  }, function (e, t) {
    e.exports = '<div class="vc-logbox" id="__vc_log_{{id}}">\n  \n</div>';
  }, function (e, t) {
    e.exports = '<a class="vc-toptab vc-topbar-{{pluginID}}{{if (className)}} {{className}}{{/if}}">{{name}}</a>';
  }, function (e, t) {
    e.exports = '<a class="vc-tool vc-tool-{{pluginID}}">{{name}}</a>';
  }, function (e, t, o) {
    "use strict";
    function n(e) {
      if (e && e.__esModule) return e;var t = {};if (null != e) for (var o in e) {
        Object.prototype.hasOwnProperty.call(e, o) && (t[o] = e[o]);
      }return t["default"] = e, t;
    }function i(e) {
      return e && e.__esModule ? e : { "default": e };
    }function a(e, t) {
      if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
    }function r(e, t) {
      if (!e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return !t || "object" != (typeof t === "undefined" ? "undefined" : _typeof(t)) && "function" != typeof t ? e : t;
    }function l(e, t) {
      if ("function" != typeof t && null !== t) throw new TypeError("Super expression must either be null or a function, not " + (typeof t === "undefined" ? "undefined" : _typeof(t)));e.prototype = Object.create(t && t.prototype, { constructor: { value: e, enumerable: !1, writable: !0, configurable: !0 } }), t && (Object.setPrototypeOf ? Object.setPrototypeOf(e, t) : e.__proto__ = t);
    }Object.defineProperty(t, "__esModule", { value: !0 });var c = function () {
      function e(e, t) {
        for (var o = 0; o < t.length; o++) {
          var n = t[o];n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, n.key, n);
        }
      }return function (t, o, n) {
        return o && e(t.prototype, o), n && e(t, n), t;
      };
    }(),
        s = function w(e, t, o) {
      null === e && (e = Function.prototype);var n = Object.getOwnPropertyDescriptor(e, t);if (void 0 === n) {
        var i = Object.getPrototypeOf(e);return null === i ? void 0 : w(i, t, o);
      }if ("value" in n) return n.value;var a = n.get;if (void 0 !== a) return a.call(o);
    },
        d = o(5),
        u = i(d),
        v = o(4),
        f = n(v),
        p = o(17),
        h = i(p),
        g = o(22),
        b = i(g),
        m = o(23),
        y = i(m),
        _ = function (e) {
      function t() {
        var e;a(this, t);for (var o = arguments.length, n = Array(o), i = 0; o > i; i++) {
          n[i] = arguments[i];
        }var l = r(this, (e = Object.getPrototypeOf(t)).call.apply(e, [this].concat(n)));return l.tplTabbox = b["default"], l.windowOnError = null, l;
      }return l(t, e), c(t, [{ key: "onReady", value: function value() {
          var e = this;s(Object.getPrototypeOf(t.prototype), "onReady", this).call(this), u["default"].bind(u["default"].one(".vc-cmd", this.$tabbox), "submit", function (t) {
            t.preventDefault();var o = u["default"].one(".vc-cmd-input", t.target),
                n = o.value;o.value = "", "" !== n && e.evalCommand(n);
          });var o = "";o += "if (!!window) {", o += "window.__vConsole_cmd_result = undefined;", o += "window.__vConsole_cmd_error = false;", o += "}";var n = document.getElementsByTagName("script"),
              i = "";n.length > 0 && (i = n[0].getAttribute("nonce") || "");var a = document.createElement("SCRIPT");a.innerHTML = o, a.setAttribute("nonce", i), document.documentElement.appendChild(a), document.documentElement.removeChild(a);
        } }, { key: "mockConsole", value: function value() {
          s(Object.getPrototypeOf(t.prototype), "mockConsole", this).call(this);var e = this;f.isFunction(window.onerror) && (this.windowOnError = window.onerror), window.onerror = function (t, o, n, i, a) {
            var r = t;o && (r += "\n" + o.replace(location.origin, "")), (n || i) && (r += ":" + n + ":" + i);var l = !!a && !!a.stack,
                c = l && a.stack.toString() || "";e.printLog({ logType: "error", logs: [r, c], noOrigin: !0 }), f.isFunction(e.windowOnError) && e.windowOnError.call(window, t, o, n, i, a);
          };
        } }, { key: "evalCommand", value: function value(e) {
          this.printLog({ logType: "log", content: u["default"].render(y["default"], { content: e, type: "input" }), noMeta: !0, style: "" });var t = "";t += "try {\n", t += "window.__vConsole_cmd_result = (function() {\n", t += "return " + e + ";\n", t += "})();\n", t += "window.__vConsole_cmd_error = false;\n", t += "} catch (e) {\n", t += "window.__vConsole_cmd_result = e.message;\n", t += "window.__vConsole_cmd_error = true;\n", t += "}";var o = document.getElementsByTagName("script"),
              n = "";o.length > 0 && (n = o[0].getAttribute("nonce") || "");var i = document.createElement("SCRIPT");i.innerHTML = t, i.setAttribute("nonce", n), document.documentElement.appendChild(i);var a = window.__vConsole_cmd_result,
              r = window.__vConsole_cmd_error;if (document.documentElement.removeChild(i), 0 == r) {
            var l = void 0;f.isArray(a) || f.isObject(a) ? l = this.getFoldedLine(a) : (f.isNull(a) ? a = "null" : f.isUndefined(a) ? a = "undefined" : f.isFunction(a) ? a = "function()" : f.isString(a) && (a = '"' + a + '"'), l = u["default"].render(y["default"], { content: a, type: "output" })), this.printLog({ logType: "log", content: l, noMeta: !0, style: "" });
          } else this.printLog({ logType: "error", logs: [a], noMeta: !0, style: "" });
        } }]), t;
    }(h["default"]);t["default"] = _, e.exports = t["default"];
  }, function (e, t, o) {
    "use strict";
    function n(e) {
      return e && e.__esModule ? e : { "default": e };
    }function i(e) {
      if (e && e.__esModule) return e;var t = {};if (null != e) for (var o in e) {
        Object.prototype.hasOwnProperty.call(e, o) && (t[o] = e[o]);
      }return t["default"] = e, t;
    }function a(e, t) {
      if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
    }function r(e, t) {
      if (!e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return !t || "object" != (typeof t === "undefined" ? "undefined" : _typeof(t)) && "function" != typeof t ? e : t;
    }function l(e, t) {
      if ("function" != typeof t && null !== t) throw new TypeError("Super expression must either be null or a function, not " + (typeof t === "undefined" ? "undefined" : _typeof(t)));e.prototype = Object.create(t && t.prototype, { constructor: { value: e, enumerable: !1, writable: !0, configurable: !0 } }), t && (Object.setPrototypeOf ? Object.setPrototypeOf(e, t) : e.__proto__ = t);
    }Object.defineProperty(t, "__esModule", { value: !0 });var c = "function" == typeof Symbol && "symbol" == _typeof(Symbol.iterator) ? function (e) {
      return typeof e === "undefined" ? "undefined" : _typeof(e);
    } : function (e) {
      return e && "function" == typeof Symbol && e.constructor === Symbol ? "symbol" : typeof e === "undefined" ? "undefined" : _typeof(e);
    },
        s = function () {
      function e(e, t) {
        for (var o = 0; o < t.length; o++) {
          var n = t[o];n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, n.key, n);
        }
      }return function (t, o, n) {
        return o && e(t.prototype, o), n && e(t, n), t;
      };
    }(),
        d = o(4),
        u = i(d),
        v = o(5),
        f = n(v),
        p = o(18),
        h = n(p),
        g = o(19),
        b = n(g),
        m = o(20),
        y = n(m),
        _ = o(21),
        w = n(_),
        x = 1e3,
        k = function (e) {
      function t() {
        var e;a(this, t);for (var o = arguments.length, n = Array(o), i = 0; o > i; i++) {
          n[i] = arguments[i];
        }var l = r(this, (e = Object.getPrototypeOf(t)).call.apply(e, [this].concat(n)));return l.tplTabbox = "", l.allowUnformattedLog = !0, l.isReady = !1, l.isShow = !1, l.$tabbox = null, l.console = {}, l.logList = [], l.isInBottom = !0, l.maxLogNumber = x, l.logNumber = 0, l.mockConsole(), l;
      }return l(t, e), s(t, [{ key: "onInit", value: function value() {
          this.$tabbox = f["default"].render(this.tplTabbox, {}), this.updateMaxLogNumber();
        } }, { key: "onRenderTab", value: function value(e) {
          e(this.$tabbox);
        } }, { key: "onAddTopBar", value: function value(e) {
          for (var t = this, o = ["All", "Log", "Info", "Warn", "Error"], n = [], i = 0; i < o.length; i++) {
            n.push({ name: o[i], data: { type: o[i].toLowerCase() }, className: "", onClick: function onClick() {
                return f["default"].hasClass(this, "vc-actived") ? !1 : void t.showLogType(this.dataset.type || "all");
              } });
          }n[0].className = "vc-actived", e(n);
        } }, { key: "onAddTool", value: function value(e) {
          var t = this,
              o = [{ name: "Clear", global: !1, onClick: function onClick() {
              t.clearLog(), t.vConsole.triggerEvent("clearLog");
            } }];e(o);
        } }, { key: "onReady", value: function value() {
          var e = this;e.isReady = !0;var t = f["default"].all(".vc-subtab", e.$tabbox);f["default"].bind(t, "click", function (o) {
            if (o.preventDefault(), f["default"].hasClass(this, "vc-actived")) return !1;f["default"].removeClass(t, "vc-actived"), f["default"].addClass(this, "vc-actived");var n = this.dataset.type,
                i = f["default"].one(".vc-log", e.$tabbox);f["default"].removeClass(i, "vc-log-partly-log"), f["default"].removeClass(i, "vc-log-partly-info"), f["default"].removeClass(i, "vc-log-partly-warn"), f["default"].removeClass(i, "vc-log-partly-error"), "all" == n ? f["default"].removeClass(i, "vc-log-partly") : (f["default"].addClass(i, "vc-log-partly"), f["default"].addClass(i, "vc-log-partly-" + n));
          });var o = f["default"].one(".vc-content");f["default"].bind(o, "scroll", function (t) {
            e.isShow && (o.scrollTop + o.offsetHeight >= o.scrollHeight ? e.isInBottom = !0 : e.isInBottom = !1);
          });for (var n = 0; n < e.logList.length; n++) {
            e.printLog(e.logList[n]);
          }e.logList = [];
        } }, { key: "onRemove", value: function value() {
          window.console.log = this.console.log, window.console.info = this.console.info, window.console.warn = this.console.warn, window.console.debug = this.console.debug, window.console.error = this.console.error, window.console.time = this.console.time, window.console.timeEnd = this.console.timeEnd, window.console.clear = this.console.clear, this.console = {};
        } }, { key: "onShow", value: function value() {
          this.isShow = !0, 1 == this.isInBottom && this.autoScrollToBottom();
        } }, { key: "onHide", value: function value() {
          this.isShow = !1;
        } }, { key: "onShowConsole", value: function value() {
          1 == this.isInBottom && this.autoScrollToBottom();
        } }, { key: "onUpdateOption", value: function value() {
          this.vConsole.option.maxLogNumber != this.maxLogNumber && (this.updateMaxLogNumber(), this.limitMaxLogs());
        } }, { key: "updateMaxLogNumber", value: function value() {
          this.maxLogNumber = this.vConsole.option.maxLogNumber || x, this.maxLogNumber = Math.max(1, this.maxLogNumber);
        } }, { key: "limitMaxLogs", value: function value() {
          if (this.isReady) for (; this.logNumber > this.maxLogNumber;) {
            var e = f["default"].one(".vc-item", this.$tabbox);if (!e) break;e.parentNode.removeChild(e), this.logNumber--;
          }
        } }, { key: "showLogType", value: function value(e) {
          var t = f["default"].one(".vc-log", this.$tabbox);f["default"].removeClass(t, "vc-log-partly-log"), f["default"].removeClass(t, "vc-log-partly-info"), f["default"].removeClass(t, "vc-log-partly-warn"), f["default"].removeClass(t, "vc-log-partly-error"), "all" == e ? f["default"].removeClass(t, "vc-log-partly") : (f["default"].addClass(t, "vc-log-partly"), f["default"].addClass(t, "vc-log-partly-" + e));
        } }, { key: "autoScrollToBottom", value: function value() {
          this.vConsole.option.disableLogScrolling || this.scrollToBottom();
        } }, { key: "scrollToBottom", value: function value() {
          var e = f["default"].one(".vc-content");e && (e.scrollTop = e.scrollHeight - e.offsetHeight);
        } }, { key: "mockConsole", value: function value() {
          var e = this,
              t = this,
              o = ["log", "info", "warn", "debug", "error"];window.console ? (o.map(function (e) {
            t.console[e] = window.console[e];
          }), t.console.time = window.console.time, t.console.timeEnd = window.console.timeEnd, t.console.clear = window.console.clear) : window.console = {}, o.map(function (t) {
            window.console[t] = function () {
              for (var o = arguments.length, n = Array(o), i = 0; o > i; i++) {
                n[i] = arguments[i];
              }e.printLog({ logType: t, logs: n });
            };
          });var n = {};window.console.time = function (e) {
            n[e] = Date.now();
          }, window.console.timeEnd = function (e) {
            var t = n[e];t ? (console.log(e + ":", Date.now() - t + "ms"), delete n[e]) : console.log(e + ": 0ms");
          }, window.console.clear = function () {
            for (var e = arguments.length, o = Array(e), n = 0; e > n; n++) {
              o[n] = arguments[n];
            }t.clearLog(), t.console.clear.apply(window.console, o);
          };
        } }, { key: "clearLog", value: function value() {
          f["default"].one(".vc-log", this.$tabbox).innerHTML = "";
        } }, { key: "printOriginLog", value: function value(e) {
          "function" == typeof this.console[e.logType] && this.console[e.logType].apply(window.console, e.logs);
        } }, { key: "printLog", value: function value(e) {
          var t = e.logs || [];if (t.length || e.content) {
            t = [].slice.call(t || []);var o = !0,
                n = /^\[(\w+)\]$/i,
                i = "";if (u.isString(t[0])) {
              var a = t[0].match(n);null !== a && a.length > 0 && (i = a[1].toLowerCase());
            }if (i ? o = i == this.id : 0 == this.allowUnformattedLog && (o = !1), !o) return void (e.noOrigin || this.printOriginLog(e));if (e.date || (e.date = +new Date()), !this.isReady) return void this.logList.push(e);if (u.isString(t[0]) && (t[0] = t[0].replace(n, ""), "" === t[0] && t.shift()), !e.meta) {
              var r = u.getDate(e.date);e.meta = r.hour + ":" + r.minute + ":" + r.second;
            }for (var l = f["default"].render(b["default"], { logType: e.logType, noMeta: !!e.noMeta, meta: e.meta, style: e.style || "" }), s = f["default"].one(".vc-item-content", l), d = 0; d < t.length; d++) {
              var v = void 0;try {
                if ("" === t[d]) continue;v = u.isFunction(t[d]) ? "<span> " + t[d].toString() + "</span>" : u.isObject(t[d]) || u.isArray(t[d]) ? this.getFoldedLine(t[d]) : "<span> " + u.htmlEncode(t[d]).replace(/\n/g, "<br/>") + "</span>";
              } catch (p) {
                v = "<span> [" + c(t[d]) + "]</span>";
              }v && ("string" == typeof v ? s.insertAdjacentHTML("beforeend", v) : s.insertAdjacentElement("beforeend", v));
            }u.isObject(e.content) && s.insertAdjacentElement("beforeend", e.content), f["default"].one(".vc-log", this.$tabbox).insertAdjacentElement("beforeend", l), this.logNumber++, this.limitMaxLogs(), this.isInBottom && this.autoScrollToBottom(), e.noOrigin || this.printOriginLog(e);
          }
        } }, { key: "getFoldedLine", value: function value(e, t) {
          var o = this;if (!t) {
            var n = u.JSONStringify(e),
                i = n.substr(0, 26);t = u.getObjName(e), n.length > 26 && (i += "..."), t += " " + i;
          }var a = f["default"].render(y["default"], { outer: t, lineType: "obj" });return f["default"].bind(f["default"].one(".vc-fold-outer", a), "click", function (t) {
            t.preventDefault(), t.stopPropagation(), f["default"].hasClass(a, "vc-toggle") ? (f["default"].removeClass(a, "vc-toggle"), f["default"].removeClass(f["default"].one(".vc-fold-inner", a), "vc-toggle"), f["default"].removeClass(f["default"].one(".vc-fold-outer", a), "vc-toggle")) : (f["default"].addClass(a, "vc-toggle"), f["default"].addClass(f["default"].one(".vc-fold-inner", a), "vc-toggle"), f["default"].addClass(f["default"].one(".vc-fold-outer", a), "vc-toggle"));var n = f["default"].one(".vc-fold-inner", a);if (0 == n.children.length && e) {
              for (var i = u.getObjAllKeys(e), r = 0; r < i.length; r++) {
                var l = e[i[r]],
                    c = "undefined",
                    s = "";u.isString(l) ? (c = "string", l = '"' + l + '"') : u.isNumber(l) ? c = "number" : u.isBoolean(l) ? c = "boolean" : u.isNull(l) ? (c = "null", l = "null") : u.isUndefined(l) ? (c = "undefined", l = "undefined") : u.isFunction(l) ? (c = "function", l = "function()") : u.isSymbol(l) && (c = "symbol");var d = void 0;if (u.isArray(l)) {
                  var v = u.getObjName(l) + "[" + l.length + "]";d = o.getFoldedLine(l, f["default"].render(w["default"], { key: i[r], keyType: s, value: v, valueType: "array" }, !0));
                } else if (u.isObject(l)) {
                  var p = u.getObjName(l);d = o.getFoldedLine(l, f["default"].render(w["default"], { key: u.htmlEncode(i[r]), keyType: s, value: p, valueType: "object" }, !0));
                } else {
                  e.hasOwnProperty && !e.hasOwnProperty(i[r]) && (s = "private");var h = { lineType: "kv", key: u.htmlEncode(i[r]), keyType: s, value: u.htmlEncode(l), valueType: c };d = f["default"].render(y["default"], h);
                }n.insertAdjacentElement("beforeend", d);
              }if (u.isObject(e)) {
                var g = e.__proto__,
                    b = void 0;b = u.isObject(g) ? o.getFoldedLine(g, f["default"].render(w["default"], { key: "__proto__", keyType: "private", value: u.getObjName(g), valueType: "object" }, !0)) : f["default"].render(w["default"], { key: "__proto__", keyType: "private", value: "null", valueType: "null" }), n.insertAdjacentElement("beforeend", b);
              }
            }return !1;
          }), a;
        } }]), t;
    }(h["default"]);t["default"] = k, e.exports = t["default"];
  }, function (e, t) {
    "use strict";
    function o(e, t) {
      if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
    }Object.defineProperty(t, "__esModule", { value: !0 });var n = function () {
      function e(e, t) {
        for (var o = 0; o < t.length; o++) {
          var n = t[o];n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, n.key, n);
        }
      }return function (t, o, n) {
        return o && e(t.prototype, o), n && e(t, n), t;
      };
    }(),
        i = function () {
      function e(t) {
        var n = arguments.length <= 1 || void 0 === arguments[1] ? "newPlugin" : arguments[1];o(this, e), this.id = t, this.name = n, this.isReady = !1, this.eventList = {};
      }return n(e, [{ key: "on", value: function value(e, t) {
          return this.eventList[e] = t, this;
        } }, { key: "trigger", value: function value(e, t) {
          if ("function" == typeof this.eventList[e]) this.eventList[e].call(this, t);else {
            var o = "on" + e.charAt(0).toUpperCase() + e.slice(1);"function" == typeof this[o] && this[o].call(this, t);
          }return this;
        } }, { key: "id", get: function get() {
          return this._id;
        }, set: function set(e) {
          if (!e) throw "Plugin ID cannot be empty";this._id = e.toLowerCase();
        } }, { key: "name", get: function get() {
          return this._name;
        }, set: function set(e) {
          if (!e) throw "Plugin name cannot be empty";this._name = e;
        } }, { key: "vConsole", get: function get() {
          return this._vConsole || void 0;
        }, set: function set(e) {
          if (!e) throw "vConsole cannot be empty";this._vConsole = e;
        } }]), e;
    }();t["default"] = i, e.exports = t["default"];
  }, function (e, t) {
    e.exports = '<div class="vc-item vc-item-{{logType}} {{if (!noMeta)}}vc-item-nometa{{/if}} {{style}}">\n	<span class="vc-item-meta">{{if (!noMeta)}}{{meta}}{{/if}}</span>\n	<div class="vc-item-content"></div>\n</div>';
  }, function (e, t) {
    e.exports = '<div class="vc-fold">\n  {{if (lineType == \'obj\')}}\n    <i class="vc-fold-outer">{{outer}}</i>\n    <div class="vc-fold-inner"></div>\n  {{else if (lineType == \'value\')}}\n    <i class="vc-code-{{valueType}}">{{value}}</i>\n  {{else if (lineType == \'kv\')}}\n    <i class="vc-code-key{{if (keyType)}} vc-code-{{keyType}}-key{{/if}}">{{key}}</i>: <i class="vc-code-{{valueType}}">{{value}}</i>\n  {{/if}}\n</div>';
  }, function (e, t) {
    e.exports = '<span>\n  <i class="vc-code-key{{if (keyType)}} vc-code-{{keyType}}-key{{/if}}">{{key}}</i>: <i class="vc-code-{{valueType}}">{{value}}</i>\n</span>';
  }, function (e, t) {
    e.exports = '<div>\n  <div class="vc-log"></div>\n  <form class="vc-cmd">\n    <button class="vc-cmd-btn" type="submit">OK</button>\n    <div class="vc-cmd-input-wrap">\n      <textarea class="vc-cmd-input" placeholder="command..."></textarea>\n    </div>\n  </form>\n</div>';
  }, function (e, t) {
    e.exports = '<pre class="vc-item-code vc-item-code-{{type}}">{{content}}</pre>';
  }, function (e, t, o) {
    "use strict";
    function n(e) {
      return e && e.__esModule ? e : { "default": e };
    }function i(e) {
      if (e && e.__esModule) return e;var t = {};if (null != e) for (var o in e) {
        Object.prototype.hasOwnProperty.call(e, o) && (t[o] = e[o]);
      }return t["default"] = e, t;
    }function a(e, t) {
      if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
    }function r(e, t) {
      if (!e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return !t || "object" != (typeof t === "undefined" ? "undefined" : _typeof(t)) && "function" != typeof t ? e : t;
    }function l(e, t) {
      if ("function" != typeof t && null !== t) throw new TypeError("Super expression must either be null or a function, not " + (typeof t === "undefined" ? "undefined" : _typeof(t)));e.prototype = Object.create(t && t.prototype, { constructor: { value: e, enumerable: !1, writable: !0, configurable: !0 } }), t && (Object.setPrototypeOf ? Object.setPrototypeOf(e, t) : e.__proto__ = t);
    }Object.defineProperty(t, "__esModule", { value: !0 });var c = function () {
      function e(e, t) {
        for (var o = 0; o < t.length; o++) {
          var n = t[o];n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, n.key, n);
        }
      }return function (t, o, n) {
        return o && e(t.prototype, o), n && e(t, n), t;
      };
    }(),
        s = function g(e, t, o) {
      null === e && (e = Function.prototype);var n = Object.getOwnPropertyDescriptor(e, t);if (void 0 === n) {
        var i = Object.getPrototypeOf(e);return null === i ? void 0 : g(i, t, o);
      }if ("value" in n) return n.value;var a = n.get;if (void 0 !== a) return a.call(o);
    },
        d = o(4),
        u = (i(d), o(17)),
        v = n(u),
        f = o(25),
        p = n(f),
        h = function (e) {
      function t() {
        var e;a(this, t);for (var o = arguments.length, n = Array(o), i = 0; o > i; i++) {
          n[i] = arguments[i];
        }var l = r(this, (e = Object.getPrototypeOf(t)).call.apply(e, [this].concat(n)));return l.tplTabbox = p["default"], l.allowUnformattedLog = !1, l;
      }return l(t, e), c(t, [{ key: "onInit", value: function value() {
          s(Object.getPrototypeOf(t.prototype), "onInit", this).call(this), this.printSystemInfo();
        } }, { key: "printSystemInfo", value: function value() {
          var e = navigator.userAgent,
              t = "",
              o = e.match(/(ipod).*\s([\d_]+)/i),
              n = e.match(/(ipad).*\s([\d_]+)/i),
              i = e.match(/(iphone)\sos\s([\d_]+)/i),
              a = e.match(/(android)\s([\d\.]+)/i);t = "Unknown", a ? t = "Android " + a[2] : i ? t = "iPhone, iOS " + i[2].replace(/_/g, ".") : n ? t = "iPad, iOS " + n[2].replace(/_/g, ".") : o && (t = "iPod, iOS " + o[2].replace(/_/g, "."));var r = t,
              l = e.match(/MicroMessenger\/([\d\.]+)/i);t = "Unknown", l && l[1] ? (t = l[1], r += ", WeChat " + t, console.info("[system]", "System:", r)) : console.info("[system]", "System:", r), t = "Unknown", t = "https:" == location.protocol ? "HTTPS" : "http:" == location.protocol ? "HTTP" : location.protocol.replace(":", ""), r = t;var c = e.toLowerCase().match(/ nettype\/([^ ]+)/g);t = "Unknown", c && c[0] ? (c = c[0].split("/"), t = c[1], r += ", " + t, console.info("[system]", "Network:", r)) : console.info("[system]", "Protocol:", r), console.info("[system]", "UA:", e), setTimeout(function () {
            var e = window.performance || window.msPerformance || window.webkitPerformance;if (e && e.timing) {
              var t = e.timing;t.navigationStart && console.info("[system]", "navigationStart:", t.navigationStart), t.navigationStart && t.domainLookupStart && console.info("[system]", "navigation:", t.domainLookupStart - t.navigationStart + "ms"), t.domainLookupEnd && t.domainLookupStart && console.info("[system]", "dns:", t.domainLookupEnd - t.domainLookupStart + "ms"), t.connectEnd && t.connectStart && (t.connectEnd && t.secureConnectionStart ? console.info("[system]", "tcp (ssl):", t.connectEnd - t.connectStart + "ms (" + (t.connectEnd - t.secureConnectionStart) + "ms)") : console.info("[system]", "tcp:", t.connectEnd - t.connectStart + "ms")), t.responseStart && t.requestStart && console.info("[system]", "request:", t.responseStart - t.requestStart + "ms"), t.responseEnd && t.responseStart && console.info("[system]", "response:", t.responseEnd - t.responseStart + "ms"), t.domComplete && t.domLoading && (t.domContentLoadedEventStart && t.domLoading ? console.info("[system]", "domComplete (domLoaded):", t.domComplete - t.domLoading + "ms (" + (t.domContentLoadedEventStart - t.domLoading) + "ms)") : console.info("[system]", "domComplete:", t.domComplete - t.domLoading + "ms")), t.loadEventEnd && t.loadEventStart && console.info("[system]", "loadEvent:", t.loadEventEnd - t.loadEventStart + "ms"), t.navigationStart && t.loadEventEnd && console.info("[system]", "total (DOM):", t.loadEventEnd - t.navigationStart + "ms (" + (t.domComplete - t.navigationStart) + "ms)");
            }
          }, 0);
        } }]), t;
    }(v["default"]);t["default"] = h, e.exports = t["default"];
  }, function (e, t) {
    e.exports = '<div>\n  <div class="vc-log"></div>\n</div>';
  }, function (e, t, o) {
    "use strict";
    function n(e) {
      if (e && e.__esModule) return e;var t = {};if (null != e) for (var o in e) {
        Object.prototype.hasOwnProperty.call(e, o) && (t[o] = e[o]);
      }return t["default"] = e, t;
    }function i(e) {
      return e && e.__esModule ? e : { "default": e };
    }function a(e, t) {
      if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
    }function r(e, t) {
      if (!e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return !t || "object" != (typeof t === "undefined" ? "undefined" : _typeof(t)) && "function" != typeof t ? e : t;
    }function l(e, t) {
      if ("function" != typeof t && null !== t) throw new TypeError("Super expression must either be null or a function, not " + (typeof t === "undefined" ? "undefined" : _typeof(t)));e.prototype = Object.create(t && t.prototype, { constructor: { value: e, enumerable: !1, writable: !0, configurable: !0 } }), t && (Object.setPrototypeOf ? Object.setPrototypeOf(e, t) : e.__proto__ = t);
    }Object.defineProperty(t, "__esModule", { value: !0 });var c = function () {
      function e(e, t) {
        for (var o = 0; o < t.length; o++) {
          var n = t[o];n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, n.key, n);
        }
      }return function (t, o, n) {
        return o && e(t.prototype, o), n && e(t, n), t;
      };
    }(),
        s = o(5),
        d = i(s),
        u = o(4),
        v = n(u),
        f = o(18),
        p = i(f),
        h = o(27),
        g = i(h),
        b = o(28),
        m = i(b),
        y = o(29),
        _ = i(y),
        w = function (e) {
      function t() {
        var e;a(this, t);for (var o = arguments.length, n = Array(o), i = 0; o > i; i++) {
          n[i] = arguments[i];
        }var l = r(this, (e = Object.getPrototypeOf(t)).call.apply(e, [this].concat(n)));return l.$tabbox = d["default"].render(g["default"], {}), l.$header = null, l.reqList = {}, l.domList = {}, l.isReady = !1, l.isShow = !1, l.isInBottom = !0, l._open = void 0, l._send = void 0, l.mockAjax(), l;
      }return l(t, e), c(t, [{ key: "onRenderTab", value: function value(e) {
          e(this.$tabbox);
        } }, { key: "onAddTool", value: function value(e) {
          var t = this,
              o = [{ name: "Clear", global: !1, onClick: function onClick(e) {
              t.clearLog();
            } }];e(o);
        } }, { key: "onReady", value: function value() {
          var e = this;e.isReady = !0, this.renderHeader(), d["default"].delegate(d["default"].one(".vc-log", this.$tabbox), "click", ".vc-group-preview", function (t) {
            var o = this.dataset.reqid,
                n = this.parentNode;d["default"].hasClass(n, "vc-actived") ? (d["default"].removeClass(n, "vc-actived"), e.updateRequest(o, { actived: !1 })) : (d["default"].addClass(n, "vc-actived"), e.updateRequest(o, { actived: !0 })), t.preventDefault();
          });var t = d["default"].one(".vc-content");d["default"].bind(t, "scroll", function (o) {
            e.isShow && (t.scrollTop + t.offsetHeight >= t.scrollHeight ? e.isInBottom = !0 : e.isInBottom = !1);
          });for (var o in e.reqList) {
            e.updateRequest(o, {});
          }
        } }, { key: "onRemove", value: function value() {
          window.XMLHttpRequest && (window.XMLHttpRequest.prototype.open = this._open, window.XMLHttpRequest.prototype.send = this._send, this._open = void 0, this._send = void 0);
        } }, { key: "onShow", value: function value() {
          this.isShow = !0, 1 == this.isInBottom && this.scrollToBottom();
        } }, { key: "onHide", value: function value() {
          this.isShow = !1;
        } }, { key: "onShowConsole", value: function value() {
          1 == this.isInBottom && this.scrollToBottom();
        } }, { key: "scrollToBottom", value: function value() {
          var e = d["default"].one(".vc-content");e.scrollTop = e.scrollHeight - e.offsetHeight;
        } }, { key: "clearLog", value: function value() {
          this.reqList = {};for (var e in this.domList) {
            this.domList[e].remove(), this.domList[e] = void 0;
          }this.domList = {}, this.renderHeader();
        } }, { key: "renderHeader", value: function value() {
          var e = Object.keys(this.reqList).length,
              t = d["default"].render(m["default"], { count: e }),
              o = d["default"].one(".vc-log", this.$tabbox);this.$header ? this.$header.parentNode.replaceChild(t, this.$header) : o.parentNode.insertBefore(t, o), this.$header = t;
        } }, { key: "updateRequest", value: function value(e, t) {
          var o = Object.keys(this.reqList).length,
              n = this.reqList[e] || {};for (var i in t) {
            n[i] = t[i];
          }if (this.reqList[e] = n, this.isReady) {
            var a = { id: e, url: n.url, status: n.status, method: n.method || "-", costTime: n.costTime > 0 ? n.costTime + "ms" : "-", header: n.header || null, getData: n.getData || null, postData: n.postData || null, response: null, actived: !!n.actived };switch (n.responseType) {case "":case "text":
                if (v.isString(n.response)) try {
                  a.response = JSON.parse(n.response), a.response = JSON.stringify(a.response, null, 1), a.response = v.htmlEncode(a.response);
                } catch (r) {
                  a.response = v.htmlEncode(n.response);
                } else "undefined" != typeof n.response && (a.response = Object.prototype.toString.call(n.response));break;case "json":
                "undefined" != typeof n.response && (a.response = JSON.stringify(n.response, null, 1));break;case "blob":case "document":case "arraybuffer":default:
                "undefined" != typeof n.response && (a.response = Object.prototype.toString.call(n.response));}0 == n.readyState || 1 == n.readyState ? a.status = "Pending" : 2 == n.readyState || 3 == n.readyState ? a.status = "Loading" : 4 == n.readyState || (a.status = "Unknown");var l = d["default"].render(_["default"], a),
                c = this.domList[e];n.status >= 400 && d["default"].addClass(d["default"].one(".vc-group-preview", l), "vc-table-row-error"), c ? c.parentNode.replaceChild(l, c) : d["default"].one(".vc-log", this.$tabbox).insertAdjacentElement("beforeend", l), this.domList[e] = l;var s = Object.keys(this.reqList).length;s != o && this.renderHeader(), this.isInBottom && this.scrollToBottom();
          }
        } }, { key: "mockAjax", value: function value() {
          var e = window.XMLHttpRequest;if (e) {
            var t = this,
                o = window.XMLHttpRequest.prototype.open,
                n = window.XMLHttpRequest.prototype.send;t._open = o, t._send = n, window.XMLHttpRequest.prototype.open = function () {
              var e = this,
                  n = [].slice.call(arguments),
                  i = n[0],
                  a = n[1],
                  r = t.getUniqueID(),
                  l = null;e._requestID = r, e._method = i, e._url = a;var c = e.onreadystatechange || function () {},
                  s = function s() {
                var o = t.reqList[r] || {};if (o.readyState = e.readyState, o.status = 0, e.readyState > 1 && (o.status = e.status), o.responseType = e.responseType, 0 == e.readyState) o.startTime || (o.startTime = +new Date());else if (1 == e.readyState) o.startTime || (o.startTime = +new Date());else if (2 == e.readyState) {
                  o.header = {};for (var n = e.getAllResponseHeaders() || "", i = n.split("\n"), a = 0; a < i.length; a++) {
                    var s = i[a];if (s) {
                      var d = s.split(": "),
                          u = d[0],
                          v = d.slice(1).join(": ");o.header[u] = v;
                    }
                  }
                } else 3 == e.readyState || (4 == e.readyState ? (clearInterval(l), o.endTime = +new Date(), o.costTime = o.endTime - (o.startTime || o.endTime), o.response = e.response) : clearInterval(l));return e._noVConsole || t.updateRequest(r, o), c.apply(e, arguments);
              };e.onreadystatechange = s;var d = -1;return l = setInterval(function () {
                d != e.readyState && (d = e.readyState, s.call(e));
              }, 10), o.apply(e, n);
            }, window.XMLHttpRequest.prototype.send = function () {
              var e = this,
                  o = [].slice.call(arguments),
                  i = o[0],
                  a = t.reqList[e._requestID] || {};a.method = e._method.toUpperCase();var r = e._url.split("?");if (a.url = r.shift(), r.length > 0) {
                a.getData = {}, r = r.join("?"), r = r.split("&");var l = !0,
                    c = !1,
                    s = void 0;try {
                  for (var d, u = r[Symbol.iterator](); !(l = (d = u.next()).done); l = !0) {
                    var f = d.value;f = f.split("="), a.getData[f[0]] = f[1];
                  }
                } catch (p) {
                  c = !0, s = p;
                } finally {
                  try {
                    !l && u["return"] && u["return"]();
                  } finally {
                    if (c) throw s;
                  }
                }
              }if ("POST" == a.method) if (v.isString(i)) {
                var h = i.split("&");a.postData = {};var g = !0,
                    b = !1,
                    m = void 0;try {
                  for (var y, _ = h[Symbol.iterator](); !(g = (y = _.next()).done); g = !0) {
                    var w = y.value;w = w.split("="), a.postData[w[0]] = w[1];
                  }
                } catch (p) {
                  b = !0, m = p;
                } finally {
                  try {
                    !g && _["return"] && _["return"]();
                  } finally {
                    if (b) throw m;
                  }
                }
              } else v.isPlainObject(i) && (a.postData = i);return e._noVConsole || t.updateRequest(e._requestID, a), n.apply(e, o);
            };
          }
        } }, { key: "getUniqueID", value: function value() {
          var e = "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, function (e) {
            var t = 16 * Math.random() | 0,
                o = "x" == e ? t : 3 & t | 8;return o.toString(16);
          });return e;
        } }]), t;
    }(p["default"]);t["default"] = w, e.exports = t["default"];
  }, function (e, t) {
    e.exports = '<div class="vc-table">\n  <div class="vc-log"></div>\n</div>';
  }, function (e, t) {
    e.exports = '<dl class="vc-table-row">\n  <dd class="vc-table-col vc-table-col-4">Name {{if (count > 0)}}({{count}}){{/if}}</dd>\n  <dd class="vc-table-col">Method</dd>\n  <dd class="vc-table-col">Status</dd>\n  <dd class="vc-table-col">Time</dd>\n</dl>';
  }, function (e, t) {
    e.exports = '<div class="vc-group {{actived ? \'vc-actived\' : \'\'}}">\n  <dl class="vc-table-row vc-group-preview" data-reqid="{{id}}">\n    <dd class="vc-table-col vc-table-col-4">{{url}}</dd>\n    <dd class="vc-table-col">{{method}}</dd>\n    <dd class="vc-table-col">{{status}}</dd>\n    <dd class="vc-table-col">{{costTime}}</dd>\n  </dl>\n  <div class="vc-group-detail">\n    {{if (header !== null)}}\n    <div>\n      <dl class="vc-table-row vc-left-border">\n        <dt class="vc-table-col vc-table-col-title">Headers</dt>\n      </dl>\n      {{for (var key in header)}}\n      <div class="vc-table-row vc-left-border vc-small">\n        <div class="vc-table-col vc-table-col-2">{{key}}</div>\n        <div class="vc-table-col vc-table-col-4 vc-max-height-line">{{header[key]}}</div>\n      </div>\n      {{/for}}\n    </div>\n    {{/if}}\n    {{if (getData !== null)}}\n    <div>\n      <dl class="vc-table-row vc-left-border">\n        <dt class="vc-table-col vc-table-col-title">Query String Parameters</dt>\n      </dl>\n      {{for (var key in getData)}}\n      <div class="vc-table-row vc-left-border vc-small">\n        <div class="vc-table-col vc-table-col-2">{{key}}</div>\n        <div class="vc-table-col vc-table-col-4 vc-max-height-line">{{getData[key]}}</div>\n      </div>\n      {{/for}}\n    </div>\n    {{/if}}\n    {{if (postData !== null)}}\n    <div>\n      <dl class="vc-table-row vc-left-border">\n        <dt class="vc-table-col vc-table-col-title">Form Data</dt>\n      </dl>\n      {{for (var key in postData)}}\n      <div class="vc-table-row vc-left-border vc-small">\n        <div class="vc-table-col vc-table-col-2">{{key}}</div>\n        <div class="vc-table-col vc-table-col-4 vc-max-height-line">{{postData[key]}}</div>\n      </div>\n      {{/for}}\n    </div>\n    {{/if}}\n    <div>\n      <dl class="vc-table-row vc-left-border">\n        <dt class="vc-table-col vc-table-col-title">Response</dt>\n      </dl>\n      <div class="vc-table-row vc-left-border vc-small">\n        <pre class="vc-table-col vc-max-height vc-min-height">{{response || \'\'}}</pre>\n      </div>\n    </div>\n  </div>\n</div>';
  }, function (e, t, o) {
    "use strict";
    function n(e) {
      if (e && e.__esModule) return e;var t = {};if (null != e) for (var o in e) {
        Object.prototype.hasOwnProperty.call(e, o) && (t[o] = e[o]);
      }return t["default"] = e, t;
    }function i(e) {
      return e && e.__esModule ? e : { "default": e };
    }function a(e, t) {
      if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
    }function r(e, t) {
      if (!e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return !t || "object" != (typeof t === "undefined" ? "undefined" : _typeof(t)) && "function" != typeof t ? e : t;
    }function l(e, t) {
      if ("function" != typeof t && null !== t) throw new TypeError("Super expression must either be null or a function, not " + (typeof t === "undefined" ? "undefined" : _typeof(t)));e.prototype = Object.create(t && t.prototype, { constructor: { value: e, enumerable: !1, writable: !0, configurable: !0 } }), t && (Object.setPrototypeOf ? Object.setPrototypeOf(e, t) : e.__proto__ = t);
    }Object.defineProperty(t, "__esModule", { value: !0 });var c = function () {
      function e(e, t) {
        for (var o = 0; o < t.length; o++) {
          var n = t[o];n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, n.key, n);
        }
      }return function (t, o, n) {
        return o && e(t.prototype, o), n && e(t, n), t;
      };
    }();o(31);var s = o(18),
        d = i(s),
        u = o(33),
        v = i(u),
        f = o(34),
        p = i(f),
        h = o(4),
        g = (n(h), o(5)),
        b = i(g),
        m = function (e) {
      function t() {
        var e;a(this, t);for (var o = arguments.length, n = Array(o), i = 0; o > i; i++) {
          n[i] = arguments[i];
        }var l = r(this, (e = Object.getPrototypeOf(t)).call.apply(e, [this].concat(n))),
            c = l;c.isInited = !1, c.node = {}, c.$tabbox = b["default"].render(v["default"], {}), c.nodes = [], c.activedElem = {};var s = window.MutationObserver || window.WebKitMutationObserver || window.MozMutationObserver;return c.observer = new s(function (e) {
          for (var t = 0; t < e.length; t++) {
            var o = e[t];c._isInVConsole(o.target) || c.onMutation(o);
          }
        }), l;
      }return l(t, e), c(t, [{ key: "onRenderTab", value: function value(e) {
          e(this.$tabbox);
        } }, { key: "onAddTool", value: function value(e) {
          var t = this,
              o = [{ name: "Expend", global: !1, onClick: function onClick(e) {
              if (t.activedElem) if (b["default"].hasClass(t.activedElem, "vc-toggle")) for (var o = 0; o < t.activedElem.childNodes.length; o++) {
                var n = t.activedElem.childNodes[o];if (b["default"].hasClass(n, "vcelm-l") && !b["default"].hasClass(n, "vcelm-noc") && !b["default"].hasClass(n, "vc-toggle")) {
                  b["default"].one(".vcelm-node", n).click();break;
                }
              } else b["default"].one(".vcelm-node", t.activedElem).click();
            } }, { name: "Collapse", global: !1, onClick: function onClick(e) {
              t.activedElem && (b["default"].hasClass(t.activedElem, "vc-toggle") ? b["default"].one(".vcelm-node", t.activedElem).click() : t.activedElem.parentNode && b["default"].hasClass(t.activedElem.parentNode, "vcelm-l") && b["default"].one(".vcelm-node", t.activedElem.parentNode).click());
            } }];e(o);
        } }, { key: "onShow", value: function value() {
          if (!this.isInited) {
            this.isInited = !0, this.node = this.getNode(document.documentElement);var e = this.renderView(this.node, b["default"].one(".vc-log", this.$tabbox)),
                t = b["default"].one(".vcelm-node", e);t && t.click();var o = { attributes: !0, childList: !0, characterData: !0, subtree: !0 };this.observer.observe(document.documentElement, o);
          }
        } }, { key: "onRemove", value: function value() {
          this.observer.disconnect();
        } }, { key: "onMutation", value: function value(e) {
          switch (e.type) {case "childList":
              e.removedNodes.length > 0 && this.onChildRemove(e), e.addedNodes.length > 0 && this.onChildAdd(e);break;case "attributes":
              this.onAttributesChange(e);break;case "characterData":
              this.onCharacterDataChange(e);}
        } }, { key: "onChildRemove", value: function value(e) {
          var t = e.target,
              o = t.__vconsole_node;if (o) {
            for (var n = 0; n < e.removedNodes.length; n++) {
              var i = e.removedNodes[n],
                  a = i.__vconsole_node;a && a.view && a.view.parentNode.removeChild(a.view);
            }this.getNode(t);
          }
        } }, { key: "onChildAdd", value: function value(e) {
          var t = e.target,
              o = t.__vconsole_node;if (o) {
            this.getNode(t), o.view && b["default"].removeClass(o.view, "vcelm-noc");for (var n = 0; n < e.addedNodes.length; n++) {
              var i = e.addedNodes[n],
                  a = i.__vconsole_node;if (a) if (null !== e.nextSibling) {
                var r = e.nextSibling.__vconsole_node;r.view && this.renderView(a, r.view, "insertBefore");
              } else o.view && (o.view.lastChild ? this.renderView(a, o.view.lastChild, "insertBefore") : this.renderView(a, o.view));
            }
          }
        } }, { key: "onAttributesChange", value: function value(e) {
          var t = e.target.__vconsole_node;t && (t = this.getNode(e.target), t.view && this.renderView(t, t.view, !0));
        } }, { key: "onCharacterDataChange", value: function value(e) {
          var t = e.target.__vconsole_node;t && (t = this.getNode(e.target), t.view && this.renderView(t, t.view, !0));
        } }, { key: "renderView", value: function value(e, t, o) {
          var n = this,
              i = new p["default"](e).get();switch (e.view = i, b["default"].delegate(i, "click", ".vcelm-node", function (t) {
            t.stopPropagation();var o = this.parentNode;if (!b["default"].hasClass(o, "vcelm-noc")) {
              n.activedElem = o, b["default"].hasClass(o, "vc-toggle") ? b["default"].removeClass(o, "vc-toggle") : b["default"].addClass(o, "vc-toggle");for (var i = -1, a = 0; a < o.children.length; a++) {
                var r = o.children[a];b["default"].hasClass(r, "vcelm-l") && (i++, r.children.length > 0 || (e.childNodes[i] ? n.renderView(e.childNodes[i], r, "replace") : r.style.display = "none"));
              }
            }
          }), o) {case "replace":
              t.parentNode.replaceChild(i, t);break;case "insertBefore":
              t.parentNode.insertBefore(i, t);break;default:
              t.appendChild(i);}return i;
        } }, { key: "getNode", value: function value(e) {
          if (!this._isIgnoredElement(e)) {
            var t = e.__vconsole_node || {};if (t.nodeType = e.nodeType, t.nodeName = e.nodeName, t.tagName = e.tagName || "", t.textContent = "", t.nodeType != e.TEXT_NODE && t.nodeType != e.DOCUMENT_TYPE_NODE || (t.textContent = e.textContent), t.id = e.id || "", t.className = e.className || "", t.attributes = [], e.hasAttributes && e.hasAttributes()) for (var o = 0; o < e.attributes.length; o++) {
              t.attributes.push({ name: e.attributes[o].name, value: e.attributes[o].value || "" });
            }if (t.childNodes = [], e.childNodes.length > 0) for (var n = 0; n < e.childNodes.length; n++) {
              var i = this.getNode(e.childNodes[n]);i && t.childNodes.push(i);
            }return e.__vconsole_node = t, t;
          }
        } }, { key: "_isIgnoredElement", value: function value(e) {
          return e.nodeType == e.TEXT_NODE && "" == e.textContent.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$|\n+/g, "");
        } }, { key: "_isInVConsole", value: function value(e) {
          for (var t = e; void 0 != t;) {
            if ("__vconsole" == t.id) return !0;t = t.parentNode || void 0;
          }return !1;
        } }]), t;
    }(d["default"]);t["default"] = m, e.exports = t["default"];
  }, function (e, t, o) {
    var n = o(32);"string" == typeof n && (n = [[e.id, n, ""]]);o(10)(n, {});n.locals && (e.exports = n.locals);
  }, function (e, t, o) {
    t = e.exports = o(9)(), t.push([e.id, '.vcelm-node{color:#183691}.vcelm-k{color:#0086b3}.vcelm-v{color:#905}.vcelm-l{padding-left:8px;position:relative;word-wrap:break-word;line-height:1}.vcelm-l.vc-toggle>.vcelm-node{display:block}.vcelm-l .vcelm-node:active{background-color:rgba(0,0,0,.15)}.vcelm-l.vcelm-noc .vcelm-node:active{background-color:transparent}.vcelm-t{white-space:pre-wrap;word-wrap:break-word}.vcelm-l .vcelm-l{display:none}.vcelm-l.vc-toggle>.vcelm-l{margin-left:4px;display:block}.vcelm-l:before{content:"";display:block;position:absolute;top:6px;left:3px;width:0;height:0;border:3px solid transparent;border-left-color:#000}.vcelm-l.vc-toggle:before{display:block;top:6px;left:0;border-top-color:#000;border-left-color:transparent}.vcelm-l.vcelm-noc:before{display:none}', ""]);
  }, function (e, t) {
    e.exports = '<div>\n  <div class="vc-log"></div>\n</div>';
  }, function (e, t, o) {
    "use strict";
    function n(e) {
      if (e && e.__esModule) return e;var t = {};if (null != e) for (var o in e) {
        Object.prototype.hasOwnProperty.call(e, o) && (t[o] = e[o]);
      }return t["default"] = e, t;
    }function i(e) {
      return e && e.__esModule ? e : { "default": e };
    }function a(e, t) {
      if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
    }function r(e) {
      var t = ["br", "hr", "img", "input", "link", "meta"];return e = e ? e.toLowerCase() : "", t.indexOf(e) > -1;
    }function l(e) {
      return document.createTextNode(e);
    }function c(e) {
      return e.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, "");
    }Object.defineProperty(t, "__esModule", { value: !0 });var s = function () {
      function e(e, t) {
        for (var o = 0; o < t.length; o++) {
          var n = t[o];n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, n.key, n);
        }
      }return function (t, o, n) {
        return o && e(t.prototype, o), n && e(t, n), t;
      };
    }(),
        d = o(35),
        u = i(d),
        v = o(36),
        f = i(v),
        p = o(4),
        h = (n(p), o(5)),
        g = i(h),
        b = function () {
      function e(t) {
        a(this, e), this.node = t, this.view = this._create(this.node);
      }return s(e, [{ key: "get", value: function value() {
          return this.view;
        } }, { key: "_create", value: function value(e, t) {
          var o = document.createElement("DIV");switch (g["default"].addClass(o, "vcelm-l"), e.nodeType) {case o.ELEMENT_NODE:
              this._createElementNode(e, o);break;case o.TEXT_NODE:
              this._createTextNode(e, o);break;case o.COMMENT_NODE:case o.DOCUMENT_NODE:case o.DOCUMENT_TYPE_NODE:case o.DOCUMENT_FRAGMENT_NODE:}return o;
        } }, { key: "_createTextNode", value: function value(e, t) {
          g["default"].addClass(t, "vcelm-t vcelm-noc"), e.textContent && t.appendChild(l(c(e.textContent)));
        } }, { key: "_createElementNode", value: function value(e, t) {
          var o = r(e.tagName),
              n = o;0 == e.childNodes.length && (n = !0);var i = g["default"].render(u["default"], { node: e }),
              a = g["default"].render(f["default"], { node: e });if (n) g["default"].addClass(t, "vcelm-noc"), t.appendChild(i), o || t.appendChild(a);else {
            t.appendChild(i);for (var l = 0; l < e.childNodes.length; l++) {
              var c = document.createElement("DIV");g["default"].addClass(c, "vcelm-l"), t.appendChild(c);
            }o || t.appendChild(a);
          }
        } }]), e;
    }();t["default"] = b, e.exports = t["default"];
  }, function (e, t) {
    e.exports = '<span class="vcelm-node">&lt;{{node.tagName.toLowerCase()}}{{if (node.className || node.attributes.length)}}\n  <i class="vcelm-k">\n    {{for (var i = 0; i < node.attributes.length; i++)}}\n      {{if (node.attributes[i].value !== \'\')}}\n        {{node.attributes[i].name}}="<i class="vcelm-v">{{node.attributes[i].value}}</i>"{{else}}\n        {{node.attributes[i].name}}{{/if}}{{/for}}</i>{{/if}}&gt;</span>';
  }, function (e, t) {
    e.exports = '<span class="vcelm-node">&lt;/{{node.tagName.toLowerCase()}}&gt;</span>';
  }, function (e, t, o) {
    "use strict";
    function n(e) {
      if (e && e.__esModule) return e;var t = {};if (null != e) for (var o in e) {
        Object.prototype.hasOwnProperty.call(e, o) && (t[o] = e[o]);
      }return t["default"] = e, t;
    }function i(e) {
      return e && e.__esModule ? e : { "default": e };
    }function a(e, t) {
      if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
    }function r(e, t) {
      if (!e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return !t || "object" != (typeof t === "undefined" ? "undefined" : _typeof(t)) && "function" != typeof t ? e : t;
    }function l(e, t) {
      if ("function" != typeof t && null !== t) throw new TypeError("Super expression must either be null or a function, not " + (typeof t === "undefined" ? "undefined" : _typeof(t)));e.prototype = Object.create(t && t.prototype, { constructor: { value: e, enumerable: !1, writable: !0, configurable: !0 } }), t && (Object.setPrototypeOf ? Object.setPrototypeOf(e, t) : e.__proto__ = t);
    }Object.defineProperty(t, "__esModule", { value: !0 });var c = function () {
      function e(e, t) {
        for (var o = 0; o < t.length; o++) {
          var n = t[o];n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, n.key, n);
        }
      }return function (t, o, n) {
        return o && e(t.prototype, o), n && e(t, n), t;
      };
    }(),
        s = o(18),
        d = i(s),
        u = o(38),
        v = i(u),
        f = o(39),
        p = i(f),
        h = o(4),
        g = n(h),
        b = o(5),
        m = i(b),
        y = function (e) {
      function t() {
        var e;a(this, t);for (var o = arguments.length, n = Array(o), i = 0; o > i; i++) {
          n[i] = arguments[i];
        }var l = r(this, (e = Object.getPrototypeOf(t)).call.apply(e, [this].concat(n)));return l.$tabbox = m["default"].render(v["default"], {}), l.currentType = "", l.typeNameMap = { cookies: "Cookies", localstorage: "LocalStorage" }, l;
      }return l(t, e), c(t, [{ key: "onRenderTab", value: function value(e) {
          e(this.$tabbox);
        } }, { key: "onAddTopBar", value: function value(e) {
          for (var t = this, o = ["Cookies", "LocalStorage"], n = [], i = 0; i < o.length; i++) {
            n.push({ name: o[i], data: { type: o[i].toLowerCase() }, className: "", onClick: function onClick() {
                return m["default"].hasClass(this, "vc-actived") ? !1 : (t.currentType = this.dataset.type, void t.renderStorage());
              } });
          }n[0].className = "vc-actived", e(n);
        } }, { key: "onAddTool", value: function value(e) {
          var t = this,
              o = [{ name: "Refresh", global: !1, onClick: function onClick(e) {
              t.renderStorage();
            } }, { name: "Clear", global: !1, onClick: function onClick(e) {
              t.clearLog();
            } }];e(o);
        } }, { key: "onReady", value: function value() {} }, { key: "onShow", value: function value() {
          "" == this.currentType && (this.currentType = "cookies", this.renderStorage());
        } }, { key: "clearLog", value: function value() {
          if (this.currentType && window.confirm) {
            var e = window.confirm("Remove all " + this.typeNameMap[this.currentType] + "?");if (!e) return !1;
          }switch (this.currentType) {case "cookies":
              this.clearCookieList();break;case "localstorage":
              this.clearLocalStorageList();break;default:
              return !1;}this.renderStorage();
        } }, { key: "renderStorage", value: function value() {
          var e = [];switch (this.currentType) {case "cookies":
              e = this.getCookieList();break;case "localstorage":
              e = this.getLocalStorageList();break;default:
              return !1;}var t = m["default"].one(".vc-log", this.$tabbox);if (0 == e.length) t.innerHTML = "";else {
            for (var o = 0; o < e.length; o++) {
              e[o].name = g.htmlEncode(e[o].name), e[o].value = g.htmlEncode(e[o].value);
            }t.innerHTML = m["default"].render(p["default"], { list: e }, !0);
          }
        } }, { key: "getCookieList", value: function value() {
          if (!document.cookie || !navigator.cookieEnabled) return [];for (var e = [], t = document.cookie.split(";"), o = 0; o < t.length; o++) {
            var n = t[o].split("="),
                i = n.shift().replace(/^ /, ""),
                a = n.join("=");e.push({ name: decodeURIComponent(i), value: decodeURIComponent(a) });
          }return e;
        } }, { key: "getLocalStorageList", value: function value() {
          if (!window.localStorage) return [];try {
            for (var e = [], t = 0; t < localStorage.length; t++) {
              var o = localStorage.key(t),
                  n = localStorage.getItem(o);e.push({ name: o, value: n });
            }return e;
          } catch (i) {
            return [];
          }
        } }, { key: "clearCookieList", value: function value() {
          if (document.cookie && navigator.cookieEnabled) {
            for (var e = this.getCookieList(), t = 0; t < e.length; t++) {
              document.cookie = e[t].name + "=;expires=Thu, 01 Jan 1970 00:00:00 GMT";
            }this.renderStorage();
          }
        } }, { key: "clearLocalStorageList", value: function value() {
          if (window.localStorage) try {
            localStorage.clear(), this.renderStorage();
          } catch (e) {
            alert("localStorage.clear() fail.");
          }
        } }]), t;
    }(d["default"]);t["default"] = y, e.exports = t["default"];
  }, function (e, t) {
    e.exports = '<div class="vc-table">\n  <div class="vc-log"></div>\n</div>';
  }, function (e, t) {
    e.exports = '<div>\n  <dl class="vc-table-row">\n    <dd class="vc-table-col">Name</dd>\n    <dd class="vc-table-col vc-table-col-2">Value</dd>\n  </dl>\n  {{for (var i = 0; i < list.length; i++)}}\n  <dl class="vc-table-row">\n    <dd class="vc-table-col">{{list[i].name}}</dd>\n    <dd class="vc-table-col vc-table-col-2">{{list[i].value}}</dd>\n  </dl>\n  {{/for}}\n</div>';
  }]);
});

},{}],3:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
/**
 * WebAR简单类
 * @param interval 识别间隔时间(毫秒)
 * @param recognizeUrl 识别服务地址
 * @constructor
 */

var WebAR = function WebAR(interval, recognizeUrl) {
    var interval = interval || 1000;
    var recognizeUrl = recognizeUrl || '';

    var videoSetting = { width: 320, height: 240 };
    var videoElement = null;
    var videoDeviceElement = null;

    var canvasElement = null;
    var canvasContext = null;

    var timer = null;
    var isRecognizing = false;

    this.unSupport = undefined;

    this.devices = [];

    var debug = document.createElement('div');
    debug.setAttribute('id', 'debug');
    debug.setAttribute('width', (window.innerWidth / 2).toString());
    debug.setAttribute('height', window.innerHeight.toString());
    document.body.appendChild(debug);

    /**
     * 列出所有摄像头
     * @param videoDevice
     * @returns {Promise}
     */
    this.listCamera = function () {

        var _this = this;
        return new Promise(function (resolve, reject) {
            navigator.mediaDevices.enumerateDevices().then(function (devices) {
                console.log(devices);
                devices.find(function (device) {
                    if (device.kind === 'videoinput') {
                        console.log(device);
                        var deviceInfo = {};

                        deviceInfo['name'] = device.label || 'camera';
                        deviceInfo['deviceId'] = device.deviceId;
                        // 将摄像头id存储在select元素中，方便切换前、后置摄像头
                        _this.devices.push(deviceInfo);
                    }
                });
                if (_this.devices.length === 0) {
                    reject('没有摄像头');
                } else {
                    // 创建canvas，截取摄像头图片时使用
                    canvasElement = document.createElement('canvas');
                    canvasContext = canvasElement.getContext('2d');
                    resolve(_this.devices);
                }
            }).catch(function (err) {
                reject(err);
            });
        });
    };

    /**
     * 打开摄像头
     * @param video
     * @param deviceId
     * @param setting
     * @returns {Promise}
     */
    this.openCamera = function (video, deviceId, setting) {
        videoElement = video;
        if (setting) {
            videoSetting = setting;
        }

        // 摄像头参数
        // 更多参数请查看 https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamConstraints
        var constraints = {
            audio: false,
            video: { deviceId: { exact: deviceId } }
        };

        canvasElement.setAttribute('width', videoSetting.width + 'px');
        canvasElement.setAttribute('height', videoSetting.height + 'px');

        // 如果是切换摄像头，则需要先关闭。
        if (videoElement.srcObject) {
            videoElement.srcObject.getTracks().forEach(function (track) {
                track.stop();
            });
        }

        return new Promise(function (resolve, reject) {
            navigator.mediaDevices.getUserMedia(constraints).then(function (stream) {
                videoElement.srcObject = stream;
                videoElement.style.display = 'block';
                videoElement.play();
                resolve(true);
            }).catch(function (err) {
                reject(err);
            });
        });
    };

    /**
     * 截取摄像头图片，返回 base64编码后的图片数据
     * @returns {string}
     */
    this.captureVideo = function () {
        canvasContext.drawImage(videoElement, 0, 0, videoSetting.width, videoSetting.height);
        return canvasElement.toDataURL('image/jpeg', 0.5).split('base64,')[1];
    };

    /**
     * 识别
     */
    this.startRecognize = function (callback) {
        var _this2 = this;

        timer = window.setInterval(function () {
            if (isRecognizing) return;

            isRecognizing = true;

            // 从摄像头中抓取一张图片
            var image = { image: _this2.captureVideo() };

            // 发送到服务器识别
            _this2.httpPost(recognizeUrl, image).then(function (msg) {
                _this2.stopRecognize();

                callback(msg);
            }).catch(function (err) {
                isRecognizing = false;
                _this2.trace(err);
            });
        }, interval);
    };

    /**
     * 停止识别
     */
    this.stopRecognize = function () {
        if (timer) {
            window.clearInterval(timer);
            isRecognizing = false;
        }
    };

    /**
     * HTTP请求，可以使用jQuery等代替
     * @param url
     * @param image
     * @returns {Promise}
     */
    this.httpPost = function (url, image) {
        return new Promise(function (resolve, reject) {
            var http = new XMLHttpRequest();
            http.onload = function () {
                try {
                    var msg = JSON.parse(http.responseText);
                    if (http.status === 200) {
                        if (msg.statusCode === 0) {
                            resolve(msg.result);
                        } else {
                            reject(msg);
                        }
                    } else {
                        reject(msg);
                    }
                } catch (err) {
                    reject(err);
                }
            };
            http.onerror = function (err) {
                reject(err);
            };

            http.open('POST', url);
            http.setRequestHeader('Content-Type', 'application/json;Charset=UTF-8');
            http.send(JSON.stringify(image));
        });
    };

    /**
     * 调用输出
     * @param arg
     */
    this.trace = function (arg) {
        if (typeof arg === 'string') {
            debug.innerHTML += arg;
        } else {
            debug.innerHTML += JSON.stringify(arg);
        }
        debug.innerHTML += '<br />';
    };
};
exports.default = WebAR;

},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9fYnJvd3Nlci1wYWNrQDYuMS4wQGJyb3dzZXItcGFjay9fcHJlbHVkZS5qcyIsInNyYy9qcy9pbmRleC5qcyIsInNyYy9qcy92Y29uc29sZS5taW4uanMiLCJzcmMvanMvd2ViYXIuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7OztBQ0FBOzs7O0FBQ0E7Ozs7OztBQUNBLElBQUksa0JBQUo7O0FBRUEsSUFBTSxLQUFLLFVBQVUsU0FBVixDQUFvQixXQUFwQixFQUFYO0FBQUEsSUFDSSxZQUFZLFdBQVcsSUFBWCxDQUFnQixFQUFoQixDQURoQjtBQUFBLElBRUksV0FBVywwQkFBMEIsSUFBMUIsQ0FBK0IsRUFBL0IsQ0FGZjtBQUFBLElBR0ksV0FBVyxrQkFBa0IsSUFBbEIsQ0FBdUIsRUFBdkIsQ0FIZjs7QUFLQSxJQUFNLFFBQVEsSUFBSSxlQUFKLEVBQWQ7QUFDQSxJQUFNLGFBQWEsRUFBRSxZQUFGLENBQW5CO0FBQ0EsSUFBTSxZQUFZLEVBQUUsYUFBRixDQUFsQjtBQUNBLElBQU0sYUFBYSxFQUFFLGFBQUYsQ0FBbkI7QUFDQSxJQUFNLFFBQVEsRUFBRSxRQUFGLEVBQVksQ0FBWixDQUFkOztBQUlBOzs7QUFHQSxTQUFTLE9BQVQsR0FBa0I7QUFDaEI7QUFDQSxlQUFXLElBQVg7QUFDRDtBQUNEOzs7QUFHQSxTQUFTLElBQVQsR0FBZTs7QUFFWDtBQUNBLFFBQUksWUFBWSxRQUFoQixFQUEwQjtBQUN4QixVQUFFLGFBQUYsRUFBaUIsSUFBakI7QUFDRDtBQUNEO0FBQ0g7QUFDRDs7O0FBR0EsU0FBUyxXQUFULEdBQXNCO0FBQ3BCO0FBQ0EsZUFBVyxJQUFYO0FBQ0Q7O0FBR0QsSUFBSSxpQkFBSixDLENBQWM7QUFDZDtBQUNBLE1BQU0sVUFBTixHQUNLLElBREwsQ0FDVSxVQUFDLFdBQUQsRUFBaUI7QUFDbkIsWUFBUSxHQUFSLENBQVksV0FBWjtBQUNBO0FBQ0EsUUFBRyxTQUFILEVBQWE7QUFDWixnQkFBUSxH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UCxLQUFlLFFBQW5CLEVBQTZCO0FBQ3pCLGtCQUFNLFNBQU4sSUFBbUIsR0FBbkI7QUFDSCxTQUZELE1BRU87QUFDSCxrQkFBTSxTQUFOLElBQW1CLEtBQUssU0FBTCxDQUFlLEdBQWYsQ0FBbkI7QUFDSDtBQUNELGNBQU0sU0FBTixJQUFtQixRQUFuQjtBQUNILEtBUEQ7QUFTSCxDQXhNRDtrQkF5TWUsSyIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uKCl7ZnVuY3Rpb24gcihlLG4sdCl7ZnVuY3Rpb24gbyhpLGYpe2lmKCFuW2ldKXtpZighZVtpXSl7dmFyIGM9XCJmdW5jdGlvblwiPT10eXBlb2YgcmVxdWlyZSYmcmVxdWlyZTtpZighZiYmYylyZXR1cm4gYyhpLCEwKTtpZih1KXJldHVybiB1KGksITApO3ZhciBhPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIraStcIidcIik7dGhyb3cgYS5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLGF9dmFyIHA9bltpXT17ZXhwb3J0czp7fX07ZVtpXVswXS5jYWxsKHAuZXhwb3J0cyxmdW5jdGlvbihyKXt2YXIgbj1lW2ldWzFdW3JdO3JldHVybiBvKG58fHIpfSxwLHAuZXhwb3J0cyxyLGUsbix0KX1yZXR1cm4gbltpXS5leHBvcnRzfWZvcih2YXIgdT1cImZ1bmN0aW9uXCI9PXR5cGVvZiByZXF1aXJlJiZyZXF1aXJlLGk9MDtpPHQubGVuZ3RoO2krKylvKHRbaV0pO3JldHVybiBvfXJldHVybiByfSkoKSIsImltcG9ydCBXZWJBUiBmcm9tICcuL3dlYmFyJztcclxuaW1wb3J0IFZDb25zb2xlIGZyb20gJy4vdmNvbnNvbGUubWluJztcclxubmV3IFZDb25zb2xlKCk7XHJcblxyXG5jb25zdCB1YSA9IG5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKSxcclxuICAgIGlzQW5kcm9pZCA9IC9hbmRyb2lkL2kudGVzdCh1YSksXHJcbiAgICBpc0lwaG9uZSA9IC8oaVBob25lfGlQYWR8aVBvZHxpT1MpL2kudGVzdCh1YSksXHJcbiAgICBpc1dlQ2hhdCA9IC9NaWNyb01lc3Nlbmdlci9pLnRlc3QodWEpO1xyXG5cclxuY29uc3Qgd2ViQVIgPSBuZXcgV2ViQVIoKTtcclxuY29uc3Qgc3RhcnRQYW5lbCA9ICQoXCIub3BlblBhbmVsXCIpO1xyXG5jb25zdCBzY2FuUGFuZWwgPSAkKFwiLnNjYW4tcGFuZWxcIik7XHJcbmNvbnN0IG9wZW5DYW1lcmEgPSAkKFwiI29wZW5DYW1lcmFcIik7XHJcbmNvbnN0IHZpZGVvID0gJCgnI3ZpZGVvJylbMF07XHJcblxyXG5cclxuXHJcbi8qXHJcbiAqIOaUr+aMgeaJk+W8gOaRhOWDj+WktFxyXG4gKi9cclxuZnVuY3Rpb24gc3VjY2Vzcygpe1xyXG4gIC8v5pi+56S65ZCv5Yqo6aG1XHJcbiAgc3RhcnRQYW5lbC5zaG93KCk7XHJcbn1cclxuLypcclxuICog5LiN5pSv5oyB5byA5ZCv5pGE5YOP5aS0XHJcbiAqL1xyXG5mdW5jdGlvbiBmYWlsKCl7XHJcblxyXG4gICAgLy/lpoLmnpzmmK9pcGhvbmXlkox3ZWlDaGF0IOaYvuekuuW8leWvvOmhtVxyXG4gICAgaWYgKGlzSXBob25lICYmIGlzV2VDaGF0KSB7XHJcbiAgICAgICQoXCIuaW9zd3hQYW5lbFwiKS5zaG93KCk7XHJcbiAgICB9XHJcbiAgICAvL1xyXG59XHJcbi8qXHJcbiAqIOaRhOWDj+WktOW8gOWQr+aIkOWKn1xyXG4gKi9cclxuZnVuY3Rpb24gb3BlblN1Y2Nlc3MoKXtcclxuICAvL1xyXG4gIHN0YXJ0UGFuZWwuaGlkZSgpO1xyXG59XHJcblxyXG5cclxubGV0IGRldmljZUlkOyAvL+aMh+Wumuiwg+eUqOiuvuWkh0lEXHJcbi8vIOWIl+WHuuinhumikeiuvuWkh1xyXG53ZWJBUi5saXN0Q2FtZXJhKClcclxuICAgIC50aGVuKCh2aWRlb0RldmljZSkgPT4ge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKHZpZGVvRGV2aWNlKTtcclxuICAgICAgICAvL+a1i+S6huS4gOS6m+aJi+acuu+8jGFuZHJvaWTlkI7nva7mkYTlg4/lpLTlupTor6XmmK/mlbDnu4TnmoTmnIDlkI7kuIDkuKrvvIzoi7nmnpzmmK/nrKzkuIDkuKpcclxuICAgICAgICBpZihpc0FuZHJvaWQpe1xyXG4gICAgICAgIFx0Y29uc29sZS5sb2coJ2FuZHJvaWQnKTtcclxuICAgICAgICBcdGRldmljZUlkID0gdmlkZW9EZXZpY2VbdmlkZW9EZXZpY2UubGVuZ3RoIC0xXS5kZXZpY2VJZDtcclxuICAgICAgICB9ZWxzZSBpZihpc0lwaG9uZSl7XHJcbiAgICAgICAgXHRkZXZpY2VJZCA9IHZpZGVvRGV2aWNlWzBdLmRldmljZUlkO1xyXG4gICAgICAgIH1cclxuICAgICAgICBzdWNjZXNzKCk7XHJcblxyXG4gICAgfSlcclxuICAgIC5jYXRjaCgoZXJyKSA9PiB7XHJcbiAgICAgICAgY29uc29sZS5sb2coZXJyKTtcclxuICAgICAgICBmYWlsKCk7XHJcbiAgICAgICAgLy9cclxuICAgIH0pO1xyXG5cclxuXHJcbm9wZW5DYW1lcmEub24oJ2NsaWNrJywgZnVuY3Rpb24oKSB7XHJcbiAgICB3ZWJBUi5vcGVuQ2FtZXJhKHZpZGVvLCBkZXZpY2VJZClcclxuICAgICAgICAudGhlbigobXNnKSA9PiB7XHJcbiAgICAgICAgICAgIC8vIOaJk+W8gOaRhOWDj+WktOaIkOWKn1xyXG4gICAgICAgICAgICAvLyDlsIbop4bpopHpk7rmu6HlhajlsY8o566A5Y2V5aSE55CGKVxyXG4gICAgICAgICAgICB3aW5kb3cuc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBsZXQgdmlkZW9XaWR0aCA9IHZpZGVvLm9mZnNldFdpZHRoO1xyXG4gICAgICAgICAgICAgICAgbGV0IHZpZGVvSGVpZ2h0ID0gdmlkZW8ub2Zmc2V0SGVpZ2h0O1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICh3aW5kb3cuaW5uZXJXaWR0aCA8IHdpbmRvdy5pbm5lckhlaWdodCkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIOerluWxj1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh2aWRlb0hlaWdodCA8IHdpbmRvdy5pbm5lckhlaWdodCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2aWRlby5zZXRBdHRyaWJ1dGUoJ2hlaWdodCcsIHdpbmRvdy5pbm5lckhlaWdodC50b1N0cmluZygpICsgJ3B4Jyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyDmqKrlsY9cclxuICAgICAgICAgICAgICAgICAgICBpZiAodmlkZW9XaWR0aCA8IHdpbmRvdy5pbm5lcldpZHRoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZpZGVvLnNldEF0dHJpYnV0ZSgnd2lkdGgnLCB3aW5kb3cuaW5uZXJXaWR0aC50b1N0cmluZygpICsgJ3B4Jyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LCA1MDApO1xyXG5cclxuICAgICAgICAgICAgb3BlblN1Y2Nlc3MoKTtcclxuXHJcblxyXG4gICAgICAgIH0pXHJcbiAgICAgICAgLmNhdGNoKChlcnIpID0+IHtcclxuICAgICAgICAgICAgYWxlcnQoJ+aJk+W8gOinhumikeiuvuWkh+Wksei0pScpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuXHJcbn0pO1xyXG4iLCIvKiFcclxuICogdkNvbnNvbGUgdjMuMi4wIChodHRwczovL2dpdGh1Yi5jb20vVGVuY2VudC92Q29uc29sZSlcclxuICogXHJcbiAqIFRlbmNlbnQgaXMgcGxlYXNlZCB0byBzdXBwb3J0IHRoZSBvcGVuIHNvdXJjZSBjb21tdW5pdHkgYnkgbWFraW5nIHZDb25zb2xlIGF2YWlsYWJsZS5cclxuICogQ29weXJpZ2h0IChDKSAyMDE3IFRITCBBMjkgTGltaXRlZCwgYSBUZW5jZW50IGNvbXBhbnkuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZSAodGhlIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICogaHR0cDovL29wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL01JVFxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG4hZnVuY3Rpb24oZSx0KXtcIm9iamVjdFwiPT10eXBlb2YgZXhwb3J0cyYmXCJvYmplY3RcIj09dHlwZW9mIG1vZHVsZT9tb2R1bGUuZXhwb3J0cz10KCk6XCJmdW5jdGlvblwiPT10eXBlb2YgZGVmaW5lJiZkZWZpbmUuYW1kP2RlZmluZShbXSx0KTpcIm9iamVjdFwiPT10eXBlb2YgZXhwb3J0cz9leHBvcnRzLlZDb25zb2xlPXQoKTplLlZDb25zb2xlPXQoKX0odGhpcyxmdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbihlKXtmdW5jdGlvbiB0KG4pe2lmKG9bbl0pcmV0dXJuIG9bbl0uZXhwb3J0czt2YXIgaT1vW25dPXtleHBvcnRzOnt9LGlkOm4sbG9hZGVkOiExfTtyZXR1cm4gZVtuXS5jYWxsKGkuZXhwb3J0cyxpLGkuZXhwb3J0cyx0KSxpLmxvYWRlZD0hMCxpLmV4cG9ydHN9dmFyIG89e307cmV0dXJuIHQubT1lLHQuYz1vLHQucD1cIlwiLHQoMCl9KFtmdW5jdGlvbihlLHQsbyl7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gbihlKXtyZXR1cm4gZSYmZS5fX2VzTW9kdWxlP2U6e1wiZGVmYXVsdFwiOmV9fU9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLG8oMSk7dmFyIGk9bygyKSxhPW4oaSkscj1vKDE4KSxsPW4ocik7YVtcImRlZmF1bHRcIl0uVkNvbnNvbGVQbHVnaW49bFtcImRlZmF1bHRcIl0sdFtcImRlZmF1bHRcIl09YVtcImRlZmF1bHRcIl0sZS5leHBvcnRzPXRbXCJkZWZhdWx0XCJdfSxmdW5jdGlvbihlLHQpe1widXNlIHN0cmljdFwiO2lmKFwidW5kZWZpbmVkXCI9PXR5cGVvZiBTeW1ib2wpe3dpbmRvdy5TeW1ib2w9ZnVuY3Rpb24oKXt9O3ZhciBvPVwiX19zeW1ib2xfaXRlcmF0b3Jfa2V5XCI7d2luZG93LlN5bWJvbC5pdGVyYXRvcj1vLEFycmF5LnByb3RvdHlwZVtvXT1mdW5jdGlvbigpe3ZhciBlPXRoaXMsdD0wO3JldHVybntuZXh0OmZ1bmN0aW9uKCl7cmV0dXJue2RvbmU6ZS5sZW5ndGg9PT10LHZhbHVlOmUubGVuZ3RoPT09dD92b2lkIDA6ZVt0KytdfX19fX19LGZ1bmN0aW9uKGUsdCxvKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiBuKGUpe2lmKGUmJmUuX19lc01vZHVsZSlyZXR1cm4gZTt2YXIgdD17fTtpZihudWxsIT1lKWZvcih2YXIgbyBpbiBlKU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChlLG8pJiYodFtvXT1lW29dKTtyZXR1cm4gdFtcImRlZmF1bHRcIl09ZSx0fWZ1bmN0aW9uIGkoZSl7cmV0dXJuIGUmJmUuX19lc01vZHVsZT9lOntcImRlZmF1bHRcIjplfX1mdW5jdGlvbiBhKGUsdCl7aWYoIShlIGluc3RhbmNlb2YgdCkpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKX1PYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgcj1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoZSx0KXtmb3IodmFyIG89MDtvPHQubGVuZ3RoO28rKyl7dmFyIG49dFtvXTtuLmVudW1lcmFibGU9bi5lbnVtZXJhYmxlfHwhMSxuLmNvbmZpZ3VyYWJsZT0hMCxcInZhbHVlXCJpbiBuJiYobi53cml0YWJsZT0hMCksT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsbi5rZXksbil9fXJldHVybiBmdW5jdGlvbih0LG8sbil7cmV0dXJuIG8mJmUodC5wcm90b3R5cGUsbyksbiYmZSh0LG4pLHR9fSgpLGw9bygzKSxjPWkobCkscz1vKDQpLGQ9bihzKSx1PW8oNSksdj1pKHUpO28oNyk7dmFyIGY9bygxMSkscD1pKGYpLGg9bygxMiksZz1pKGgpLGI9bygxMyksbT1pKGIpLHk9bygxNCksXz1pKHkpLHc9bygxNSkseD1pKHcpLGs9bygxNiksQz1pKGspLFQ9bygyNCksTz1pKFQpLEU9bygyNiksUz1pKEUpLEw9bygzMCksaj1pKEwpLE49bygzNyksUD1pKE4pLE09XCIjX192Y29uc29sZVwiLEE9ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKHQpe2lmKGEodGhpcyxlKSx2W1wiZGVmYXVsdFwiXS5vbmUoTSkpcmV0dXJuIHZvaWQgY29uc29sZS5kZWJ1ZyhcInZDb25zb2xlIGlzIGFscmVhZHkgZXhpc3RzLlwiKTt2YXIgbz10aGlzO2lmKHRoaXMudmVyc2lvbj1jW1wiZGVmYXVsdFwiXS52ZXJzaW9uLHRoaXMuJGRvbT1udWxsLHRoaXMuaXNJbml0ZWQ9ITEsdGhpcy5vcHRpb249e2RlZmF1bHRQbHVnaW5zOltcInN5c3RlbVwiLFwibmV0d29ya1wiLFwiZWxlbWVudFwiLFwic3RvcmFnZVwiXX0sdGhpcy5hY3RpdmVkVGFiPVwiXCIsdGhpcy50YWJMaXN0PVtdLHRoaXMucGx1Z2luTGlzdD17fSx0aGlzLnN3aXRjaFBvcz17eDoxMCx5OjEwLHN0YXJ0WDowLHN0YXJ0WTowLGVuZFg6MCxlbmRZOjB9LHRoaXMudG9vbD1kLHRoaXMuJD12W1wiZGVmYXVsdFwiXSxkLmlzT2JqZWN0KHQpKWZvcih2YXIgbiBpbiB0KXRoaXMub3B0aW9uW25dPXRbbl07dGhpcy5fYWRkQnVpbHRJblBsdWdpbnMoKTt2YXIgaT1mdW5jdGlvbigpe28uaXNJbml0ZWR8fChvLl9yZW5kZXIoKSxvLl9tb2NrVGFwKCksby5fYmluZEV2ZW50KCksby5fYXV0b1J1bigpKX07dm9pZCAwIT09ZG9jdW1lbnQ/XCJjb21wbGV0ZVwiPT1kb2N1bWVudC5yZWFkeVN0YXRlP2koKTp2W1wiZGVmYXVsdFwiXS5iaW5kKHdpbmRvdyxcImxvYWRcIixpKTohZnVuY3Rpb24oKXt2YXIgZT12b2lkIDAsdD1mdW5jdGlvbiBvKCl7ZG9jdW1lbnQmJlwiY29tcGxldGVcIj09ZG9jdW1lbnQucmVhZHlTdGF0ZT8oZSYmY2xlYXJUaW1lb3V0KGUpLGkoKSk6ZT1zZXRUaW1lb3V0KG8sMSl9O2U9c2V0VGltZW91dCh0LDEpfSgpfXJldHVybiByKGUsW3trZXk6XCJfYWRkQnVpbHRJblBsdWdpbnNcIix2YWx1ZTpmdW5jdGlvbigpe3RoaXMuYWRkUGx1Z2luKG5ldyBDW1wiZGVmYXVsdFwiXShcImRlZmF1bHRcIixcIkxvZ1wiKSk7dmFyIGU9dGhpcy5vcHRpb24uZGVmYXVsdFBsdWdpbnMsdD17c3lzdGVtOntwcm90bzpPW1wiZGVmYXVsdFwiXSxuYW1lOlwiU3lzdGVtXCJ9LG5ldHdvcms6e3Byb3RvOlNbXCJkZWZhdWx0XCJdLG5hbWU6XCJOZXR3b3JrXCJ9LGVsZW1lbnQ6e3Byb3RvOmpbXCJkZWZhdWx0XCJdLG5hbWU6XCJFbGVtZW50XCJ9LHN0b3JhZ2U6e3Byb3RvOlBbXCJkZWZhdWx0XCJdLG5hbWU6XCJTdG9yYWdlXCJ9fTtpZihlJiZkLmlzQXJyYXkoZSkpZm9yKHZhciBvPTA7bzxlLmxlbmd0aDtvKyspe3ZhciBuPXRbZVtvXV07bj90aGlzLmFkZFBsdWdpbihuZXcgbi5wcm90byhlW29dLG4ubmFtZSkpOmNvbnNvbGUuZGVidWcoXCJVbnJlY29nbml6ZWQgZGVmYXVsdCBwbHVnaW4gSUQ6XCIsZVtvXSl9fX0se2tleTpcIl9yZW5kZXJcIix2YWx1ZTpmdW5jdGlvbigpe2lmKCF2W1wiZGVmYXVsdFwiXS5vbmUoTSkpe3ZhciBlPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7ZS5pbm5lckhUTUw9cFtcImRlZmF1bHRcIl0sZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50Lmluc2VydEFkamFjZW50RWxlbWVudChcImJlZm9yZWVuZFwiLGUuY2hpbGRyZW5bMF0pfXRoaXMuJGRvbT12W1wiZGVmYXVsdFwiXS5vbmUoTSk7dmFyIHQ9dltcImRlZmF1bHRcIl0ub25lKFwiLnZjLXN3aXRjaFwiLHRoaXMuJGRvbSksbz0xKmQuZ2V0U3RvcmFnZShcInN3aXRjaF94XCIpLG49MSpkLmdldFN0b3JhZ2UoXCJzd2l0Y2hfeVwiKTsob3x8bikmJihvK3Qub2Zmc2V0V2lkdGg+ZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50Lm9mZnNldFdpZHRoJiYobz1kb2N1bWVudC5kb2N1bWVudEVsZW1lbnQub2Zmc2V0V2lkdGgtdC5vZmZzZXRXaWR0aCksbit0Lm9mZnNldEhlaWdodD5kb2N1bWVudC5kb2N1bWVudEVsZW1lbnQub2Zmc2V0SGVpZ2h0JiYobj1kb2N1bWVudC5kb2N1bWVudEVsZW1lbnQub2Zmc2V0SGVpZ2h0LXQub2Zmc2V0SGVpZ2h0KSwwPm8mJihvPTApLDA+biYmKG49MCksdGhpcy5zd2l0Y2hQb3MueD1vLHRoaXMuc3dpdGNoUG9zLnk9bix2W1wiZGVmYXVsdFwiXS5vbmUoXCIudmMtc3dpdGNoXCIpLnN0eWxlLnJpZ2h0PW8rXCJweFwiLHZbXCJkZWZhdWx0XCJdLm9uZShcIi52Yy1zd2l0Y2hcIikuc3R5bGUuYm90dG9tPW4rXCJweFwiKTt2YXIgaT13aW5kb3cuZGV2aWNlUGl4ZWxSYXRpb3x8MSxhPWRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ1tuYW1lPVwidmlld3BvcnRcIl0nKTtpZihhJiZhLmNvbnRlbnQpe3ZhciByPWEuY29udGVudC5tYXRjaCgvaW5pdGlhbFxcLXNjYWxlXFw9XFxkKyhcXC5cXGQrKT8vKSxsPXI/cGFyc2VGbG9hdChyWzBdLnNwbGl0KFwiPVwiKVsxXSk6MTsxPmwmJih0aGlzLiRkb20uc3R5bGUuZm9udFNpemU9MTMqaStcInB4XCIpfXZbXCJkZWZhdWx0XCJdLm9uZShcIi52Yy1tYXNrXCIsdGhpcy4kZG9tKS5zdHlsZS5kaXNwbGF5PVwibm9uZVwifX0se2tleTpcIl9tb2NrVGFwXCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgZT03MDAsdD0xMCxvPXZvaWQgMCxuPXZvaWQgMCxpPXZvaWQgMCxhPSExLHI9bnVsbDt0aGlzLiRkb20uYWRkRXZlbnRMaXN0ZW5lcihcInRvdWNoc3RhcnRcIixmdW5jdGlvbihlKXtpZih2b2lkIDA9PT1vKXt2YXIgdD1lLnRhcmdldFRvdWNoZXNbMF07bj10LnBhZ2VYLGk9dC5wYWdlWSxvPWUudGltZVN0YW1wLHI9ZS50YXJnZXQubm9kZVR5cGU9PT1Ob2RlLlRFWFRfTk9ERT9lLnRhcmdldC5wYXJlbnROb2RlOmUudGFyZ2V0fX0sITEpLHRoaXMuJGRvbS5hZGRFdmVudExpc3RlbmVyKFwidG91Y2htb3ZlXCIsZnVuY3Rpb24oZSl7dmFyIG89ZS5jaGFuZ2VkVG91Y2hlc1swXTsoTWF0aC5hYnMoby5wYWdlWC1uKT50fHxNYXRoLmFicyhvLnBhZ2VZLWkpPnQpJiYoYT0hMCl9KSx0aGlzLiRkb20uYWRkRXZlbnRMaXN0ZW5lcihcInRvdWNoZW5kXCIsZnVuY3Rpb24odCl7aWYoYT09PSExJiZ0LnRpbWVTdGFtcC1vPGUmJm51bGwhPXIpe3ZhciBuPXIudGFnTmFtZS50b0xvd2VyQ2FzZSgpLGk9ITE7c3dpdGNoKG4pe2Nhc2VcInRleHRhcmVhXCI6aT0hMDticmVhaztjYXNlXCJpbnB1dFwiOnN3aXRjaChyLnR5cGUpe2Nhc2VcImJ1dHRvblwiOmNhc2VcImNoZWNrYm94XCI6Y2FzZVwiZmlsZVwiOmNhc2VcImltYWdlXCI6Y2FzZVwicmFkaW9cIjpjYXNlXCJzdWJtaXRcIjppPSExO2JyZWFrO2RlZmF1bHQ6aT0hci5kaXNhYmxlZCYmIXIucmVhZE9ubHl9fWk/ci5mb2N1cygpOnQucHJldmVudERlZmF1bHQoKTt2YXIgbD10LmNoYW5nZWRUb3VjaGVzWzBdLGM9ZG9jdW1lbnQuY3JlYXRlRXZlbnQoXCJNb3VzZUV2ZW50c1wiKTtjLmluaXRNb3VzZUV2ZW50KFwiY2xpY2tcIiwhMCwhMCx3aW5kb3csMSxsLnNjcmVlblgsbC5zY3JlZW5ZLGwuY2xpZW50WCxsLmNsaWVudFksITEsITEsITEsITEsMCxudWxsKSxjLmZvcndhcmRlZFRvdWNoRXZlbnQ9ITAsYy5pbml0RXZlbnQoXCJjbGlja1wiLCEwLCEwKSxyLmRpc3BhdGNoRXZlbnQoYyl9bz12b2lkIDAsYT0hMSxyPW51bGx9LCExKX19LHtrZXk6XCJfYmluZEV2ZW50XCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgZT10aGlzLHQ9dltcImRlZmF1bHRcIl0ub25lKFwiLnZjLXN3aXRjaFwiLGUuJGRvbSk7dltcImRlZmF1bHRcIl0uYmluZCh0LFwidG91Y2hzdGFydFwiLGZ1bmN0aW9uKHQpe2Uuc3dpdGNoUG9zLnN0YXJ0WD10LnRvdWNoZXNbMF0ucGFnZVgsZS5zd2l0Y2hQb3Muc3RhcnRZPXQudG91Y2hlc1swXS5wYWdlWX0pLHZbXCJkZWZhdWx0XCJdLmJpbmQodCxcInRvdWNoZW5kXCIsZnVuY3Rpb24odCl7ZS5zd2l0Y2hQb3MueD1lLnN3aXRjaFBvcy5lbmRYLGUuc3dpdGNoUG9zLnk9ZS5zd2l0Y2hQb3MuZW5kWSxlLnN3aXRjaFBvcy5zdGFydFg9MCxlLnN3aXRjaFBvcy5zdGFydFk9MCxlLnN3aXRjaFBvcy5lbmRYPTAsZS5zd2l0Y2hQb3MuZW5kWT0wLGQuc2V0U3RvcmFnZShcInN3aXRjaF94XCIsZS5zd2l0Y2hQb3MueCksZC5zZXRTdG9yYWdlKFwic3dpdGNoX3lcIixlLnN3aXRjaFBvcy55KX0pLHZbXCJkZWZhdWx0XCJdLmJpbmQodCxcInRvdWNobW92ZVwiLGZ1bmN0aW9uKG8pe2lmKG8udG91Y2hlcy5sZW5ndGg+MCl7dmFyIG49by50b3VjaGVzWzBdLnBhZ2VYLWUuc3dpdGNoUG9zLnN0YXJ0WCxpPW8udG91Y2hlc1swXS5wYWdlWS1lLnN3aXRjaFBvcy5zdGFydFksYT1lLnN3aXRjaFBvcy54LW4scj1lLnN3aXRjaFBvcy55LWk7YSt0Lm9mZnNldFdpZHRoPmRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5vZmZzZXRXaWR0aCYmKGE9ZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50Lm9mZnNldFdpZHRoLXQub2Zmc2V0V2lkdGgpLHIrdC5vZmZzZXRIZWlnaHQ+ZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50Lm9mZnNldEhlaWdodCYmKHI9ZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50Lm9mZnNldEhlaWdodC10Lm9mZnNldEhlaWdodCksMD5hJiYoYT0wKSwwPnImJihyPTApLHQuc3R5bGUucmlnaHQ9YStcInB4XCIsdC5zdHlsZS5ib3R0b209citcInB4XCIsZS5zd2l0Y2hQb3MuZW5kWD1hLGUuc3dpdGNoUG9zLmVuZFk9cixvLnByZXZlbnREZWZhdWx0KCl9fSksdltcImRlZmF1bHRcIl0uYmluZCh2W1wiZGVmYXVsdFwiXS5vbmUoXCIudmMtc3dpdGNoXCIsZS4kZG9tKSxcImNsaWNrXCIsZnVuY3Rpb24oKXtlLnNob3coKX0pLHZbXCJkZWZhdWx0XCJdLmJpbmQodltcImRlZmF1bHRcIl0ub25lKFwiLnZjLWhpZGVcIixlLiRkb20pLFwiY2xpY2tcIixmdW5jdGlvbigpe2UuaGlkZSgpfSksdltcImRlZmF1bHRcIl0uYmluZCh2W1wiZGVmYXVsdFwiXS5vbmUoXCIudmMtbWFza1wiLGUuJGRvbSksXCJjbGlja1wiLGZ1bmN0aW9uKHQpe3JldHVybiB0LnRhcmdldCE9dltcImRlZmF1bHRcIl0ub25lKFwiLnZjLW1hc2tcIik/ITE6dm9pZCBlLmhpZGUoKX0pLHZbXCJkZWZhdWx0XCJdLmRlbGVnYXRlKHZbXCJkZWZhdWx0XCJdLm9uZShcIi52Yy10YWJiYXJcIixlLiRkb20pLFwiY2xpY2tcIixcIi52Yy10YWJcIixmdW5jdGlvbih0KXt2YXIgbz10aGlzLmRhdGFzZXQudGFiO28hPWUuYWN0aXZlZFRhYiYmZS5zaG93VGFiKG8pfSksdltcImRlZmF1bHRcIl0uYmluZCh2W1wiZGVmYXVsdFwiXS5vbmUoXCIudmMtcGFuZWxcIixlLiRkb20pLFwidHJhbnNpdGlvbmVuZCB3ZWJraXRUcmFuc2l0aW9uRW5kIG9UcmFuc2l0aW9uRW5kIG90cmFuc2l0aW9uZW5kXCIsZnVuY3Rpb24odCl7cmV0dXJuIHQudGFyZ2V0IT12W1wiZGVmYXVsdFwiXS5vbmUoXCIudmMtcGFuZWxcIik/ITE6dm9pZCh2W1wiZGVmYXVsdFwiXS5oYXNDbGFzcyhlLiRkb20sXCJ2Yy10b2dnbGVcIil8fCh0LnRhcmdldC5zdHlsZS5kaXNwbGF5PVwibm9uZVwiKSl9KTt2YXIgbz12W1wiZGVmYXVsdFwiXS5vbmUoXCIudmMtY29udGVudFwiLGUuJGRvbSksbj0hMTt2W1wiZGVmYXVsdFwiXS5iaW5kKG8sXCJ0b3VjaHN0YXJ0XCIsZnVuY3Rpb24oZSl7dmFyIHQ9by5zY3JvbGxUb3AsaT1vLnNjcm9sbEhlaWdodCxhPXQrby5vZmZzZXRIZWlnaHQ7MD09PXQ/KG8uc2Nyb2xsVG9wPTEsMD09PW8uc2Nyb2xsVG9wJiYodltcImRlZmF1bHRcIl0uaGFzQ2xhc3MoZS50YXJnZXQsXCJ2Yy1jbWQtaW5wdXRcIil8fChuPSEwKSkpOmE9PT1pJiYoby5zY3JvbGxUb3A9dC0xLG8uc2Nyb2xsVG9wPT09dCYmKHZbXCJkZWZhdWx0XCJdLmhhc0NsYXNzKGUudGFyZ2V0LFwidmMtY21kLWlucHV0XCIpfHwobj0hMCkpKX0pLHZbXCJkZWZhdWx0XCJdLmJpbmQobyxcInRvdWNobW92ZVwiLGZ1bmN0aW9uKGUpe24mJmUucHJldmVudERlZmF1bHQoKX0pLHZbXCJkZWZhdWx0XCJdLmJpbmQobyxcInRvdWNoZW5kXCIsZnVuY3Rpb24oZSl7bj0hMX0pfX0se2tleTpcIl9hdXRvUnVuXCIsdmFsdWU6ZnVuY3Rpb24oKXt0aGlzLmlzSW5pdGVkPSEwO2Zvcih2YXIgZSBpbiB0aGlzLnBsdWdpbkxpc3QpdGhpcy5faW5pdFBsdWdpbih0aGlzLnBsdWdpbkxpc3RbZV0pO3RoaXMudGFiTGlzdC5sZW5ndGg+MCYmdGhpcy5zaG93VGFiKHRoaXMudGFiTGlzdFswXSksdGhpcy50cmlnZ2VyRXZlbnQoXCJyZWFkeVwiKX19LHtrZXk6XCJ0cmlnZ2VyRXZlbnRcIix2YWx1ZTpmdW5jdGlvbihlLHQpe2U9XCJvblwiK2UuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkrZS5zbGljZSgxKSxkLmlzRnVuY3Rpb24odGhpcy5vcHRpb25bZV0pJiZ0aGlzLm9wdGlvbltlXS5hcHBseSh0aGlzLHQpfX0se2tleTpcIl9pbml0UGx1Z2luXCIsdmFsdWU6ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcztlLnZDb25zb2xlPXRoaXMsZS50cmlnZ2VyKFwiaW5pdFwiKSxlLnRyaWdnZXIoXCJyZW5kZXJUYWJcIixmdW5jdGlvbihvKXt0LnRhYkxpc3QucHVzaChlLmlkKTt2YXIgbj12W1wiZGVmYXVsdFwiXS5yZW5kZXIoZ1tcImRlZmF1bHRcIl0se2lkOmUuaWQsbmFtZTplLm5hbWV9KTt2W1wiZGVmYXVsdFwiXS5vbmUoXCIudmMtdGFiYmFyXCIsdC4kZG9tKS5pbnNlcnRBZGphY2VudEVsZW1lbnQoXCJiZWZvcmVlbmRcIixuKTt2YXIgaT12W1wiZGVmYXVsdFwiXS5yZW5kZXIobVtcImRlZmF1bHRcIl0se2lkOmUuaWR9KTtvJiYoZC5pc1N0cmluZyhvKT9pLmlubmVySFRNTCs9bzpkLmlzRnVuY3Rpb24oby5hcHBlbmRUbyk/by5hcHBlbmRUbyhpKTpkLmlzRWxlbWVudChvKSYmaS5pbnNlcnRBZGphY2VudEVsZW1lbnQoXCJiZWZvcmVlbmRcIixvKSksdltcImRlZmF1bHRcIl0ub25lKFwiLnZjLWNvbnRlbnRcIix0LiRkb20pLmluc2VydEFkamFjZW50RWxlbWVudChcImJlZm9yZWVuZFwiLGkpfSksZS50cmlnZ2VyKFwiYWRkVG9wQmFyXCIsZnVuY3Rpb24obyl7aWYobylmb3IodmFyIG49dltcImRlZmF1bHRcIl0ub25lKFwiLnZjLXRvcGJhclwiLHQuJGRvbSksaT1mdW5jdGlvbih0KXt2YXIgaT1vW3RdLGE9dltcImRlZmF1bHRcIl0ucmVuZGVyKF9bXCJkZWZhdWx0XCJdLHtuYW1lOmkubmFtZXx8XCJVbmRlZmluZWRcIixjbGFzc05hbWU6aS5jbGFzc05hbWV8fFwiXCIscGx1Z2luSUQ6ZS5pZH0pO2lmKGkuZGF0YSlmb3IodmFyIHIgaW4gaS5kYXRhKWEuZGF0YXNldFtyXT1pLmRhdGFbcl07ZC5pc0Z1bmN0aW9uKGkub25DbGljaykmJnZbXCJkZWZhdWx0XCJdLmJpbmQoYSxcImNsaWNrXCIsZnVuY3Rpb24odCl7dmFyIG89aS5vbkNsaWNrLmNhbGwoYSk7bz09PSExfHwodltcImRlZmF1bHRcIl0ucmVtb3ZlQ2xhc3ModltcImRlZmF1bHRcIl0uYWxsKFwiLnZjLXRvcGJhci1cIitlLmlkKSxcInZjLWFjdGl2ZWRcIiksdltcImRlZmF1bHRcIl0uYWRkQ2xhc3MoYSxcInZjLWFjdGl2ZWRcIikpfSksbi5pbnNlcnRBZGphY2VudEVsZW1lbnQoXCJiZWZvcmVlbmRcIixhKX0sYT0wO2E8by5sZW5ndGg7YSsrKWkoYSl9KSxlLnRyaWdnZXIoXCJhZGRUb29sXCIsZnVuY3Rpb24obyl7aWYobylmb3IodmFyIG49dltcImRlZmF1bHRcIl0ub25lKFwiLnZjLXRvb2wtbGFzdFwiLHQuJGRvbSksaT1mdW5jdGlvbih0KXt2YXIgaT1vW3RdLGE9dltcImRlZmF1bHRcIl0ucmVuZGVyKHhbXCJkZWZhdWx0XCJdLHtuYW1lOmkubmFtZXx8XCJVbmRlZmluZWRcIixwbHVnaW5JRDplLmlkfSk7MT09aS5nbG9iYWwmJnZbXCJkZWZhdWx0XCJdLmFkZENsYXNzKGEsXCJ2Yy1nbG9iYWwtdG9vbFwiKSxkLmlzRnVuY3Rpb24oaS5vbkNsaWNrKSYmdltcImRlZmF1bHRcIl0uYmluZChhLFwiY2xpY2tcIixmdW5jdGlvbihlKXtpLm9uQ2xpY2suY2FsbChhKX0pLG4ucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoYSxuKX0sYT0wO2E8by5sZW5ndGg7YSsrKWkoYSl9KSxlLmlzUmVhZHk9ITAsZS50cmlnZ2VyKFwicmVhZHlcIil9fSx7a2V5OlwiX3RyaWdnZXJQbHVnaW5zRXZlbnRcIix2YWx1ZTpmdW5jdGlvbihlKXtmb3IodmFyIHQgaW4gdGhpcy5wbHVnaW5MaXN0KXRoaXMucGx1Z2luTGlzdFt0XS5pc1JlYWR5JiZ0aGlzLnBsdWdpbkxpc3RbdF0udHJpZ2dlcihlKX19LHtrZXk6XCJfdHJpZ2dlclBsdWdpbkV2ZW50XCIsdmFsdWU6ZnVuY3Rpb24oZSx0KXt2YXIgbz10aGlzLnBsdWdpbkxpc3RbZV07byYmby5pc1JlYWR5JiZvLnRyaWdnZXIodCl9fSx7a2V5OlwiYWRkUGx1Z2luXCIsdmFsdWU6ZnVuY3Rpb24oZSl7cmV0dXJuIHZvaWQgMCE9PXRoaXMucGx1Z2luTGlzdFtlLmlkXT8oY29uc29sZS5kZWJ1ZyhcIlBsdWdpbiBcIitlLmlkK1wiIGhhcyBhbHJlYWR5IGJlZW4gYWRkZWQuXCIpLCExKToodGhpcy5wbHVnaW5MaXN0W2UuaWRdPWUsdGhpcy5pc0luaXRlZCYmKHRoaXMuX2luaXRQbHVnaW4oZSksMT09dGhpcy50YWJMaXN0Lmxlbmd0aCYmdGhpcy5zaG93VGFiKHRoaXMudGFiTGlzdFswXSkpLCEwKX19LHtrZXk6XCJyZW1vdmVQbHVnaW5cIix2YWx1ZTpmdW5jdGlvbihlKXtlPShlK1wiXCIpLnRvTG93ZXJDYXNlKCk7dmFyIHQ9dGhpcy5wbHVnaW5MaXN0W2VdO2lmKHZvaWQgMD09PXQpcmV0dXJuIGNvbnNvbGUuZGVidWcoXCJQbHVnaW4gXCIrZStcIiBkb2VzIG5vdCBleGlzdC5cIiksITE7aWYodC50cmlnZ2VyKFwicmVtb3ZlXCIpLHRoaXMuaXNJbml0ZWQpe3ZhciBvPXZbXCJkZWZhdWx0XCJdLm9uZShcIiNfX3ZjX3RhYl9cIitlKTtvJiZvLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQobyk7Zm9yKHZhciBuPXZbXCJkZWZhdWx0XCJdLmFsbChcIi52Yy10b3BiYXItXCIrZSx0aGlzLiRkb20pLGk9MDtpPG4ubGVuZ3RoO2krKyluW2ldLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQobltpXSk7dmFyIGE9dltcImRlZmF1bHRcIl0ub25lKFwiI19fdmNfbG9nX1wiK2UpO2EmJmEucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChhKTtmb3IodmFyIHI9dltcImRlZmF1bHRcIl0uYWxsKFwiLnZjLXRvb2wtXCIrZSx0aGlzLiRkb20pLGw9MDtsPHIubGVuZ3RoO2wrKylyW2xdLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQocltsXSl9dmFyIGM9dGhpcy50YWJMaXN0LmluZGV4T2YoZSk7Yz4tMSYmdGhpcy50YWJMaXN0LnNwbGljZShjLDEpO3RyeXtkZWxldGUgdGhpcy5wbHVnaW5MaXN0W2VdfWNhdGNoKHMpe3RoaXMucGx1Z2luTGlzdFtlXT12b2lkIDB9cmV0dXJuIHRoaXMuYWN0aXZlZFRhYj09ZSYmdGhpcy50YWJMaXN0Lmxlbmd0aD4wJiZ0aGlzLnNob3dUYWIodGhpcy50YWJMaXN0WzBdKSwhMH19LHtrZXk6XCJzaG93XCIsdmFsdWU6ZnVuY3Rpb24oKXtpZih0aGlzLmlzSW5pdGVkKXt2YXIgZT10aGlzLHQ9dltcImRlZmF1bHRcIl0ub25lKFwiLnZjLXBhbmVsXCIsdGhpcy4kZG9tKTt0LnN0eWxlLmRpc3BsYXk9XCJibG9ja1wiLHNldFRpbWVvdXQoZnVuY3Rpb24oKXt2W1wiZGVmYXVsdFwiXS5hZGRDbGFzcyhlLiRkb20sXCJ2Yy10b2dnbGVcIiksZS5fdHJpZ2dlclBsdWdpbnNFdmVudChcInNob3dDb25zb2xlXCIpO3ZhciB0PXZbXCJkZWZhdWx0XCJdLm9uZShcIi52Yy1tYXNrXCIsZS4kZG9tKTt0LnN0eWxlLmRpc3BsYXk9XCJibG9ja1wifSwxMCl9fX0se2tleTpcImhpZGVcIix2YWx1ZTpmdW5jdGlvbigpe2lmKHRoaXMuaXNJbml0ZWQpe3ZbXCJkZWZhdWx0XCJdLnJlbW92ZUNsYXNzKHRoaXMuJGRvbSxcInZjLXRvZ2dsZVwiKSx0aGlzLl90cmlnZ2VyUGx1Z2luc0V2ZW50KFwiaGlkZUNvbnNvbGVcIik7dmFyIGU9dltcImRlZmF1bHRcIl0ub25lKFwiLnZjLW1hc2tcIix0aGlzLiRkb20pLHQ9dltcImRlZmF1bHRcIl0ub25lKFwiLnZjLXBhbmVsXCIsdGhpcy4kZG9tKTt2W1wiZGVmYXVsdFwiXS5iaW5kKGUsXCJ0cmFuc2l0aW9uZW5kXCIsZnVuY3Rpb24obyl7ZS5zdHlsZS5kaXNwbGF5PVwibm9uZVwiLHQuc3R5bGUuZGlzcGxheT1cIm5vbmVcIn0pfX19LHtrZXk6XCJzaG93U3dpdGNoXCIsdmFsdWU6ZnVuY3Rpb24oKXtpZih0aGlzLmlzSW5pdGVkKXt2YXIgZT12W1wiZGVmYXVsdFwiXS5vbmUoXCIudmMtc3dpdGNoXCIsdGhpcy4kZG9tKTtlLnN0eWxlLmRpc3BsYXk9XCJibG9ja1wifX19LHtrZXk6XCJoaWRlU3dpdGNoXCIsdmFsdWU6ZnVuY3Rpb24oKXtpZih0aGlzLmlzSW5pdGVkKXt2YXIgZT12W1wiZGVmYXVsdFwiXS5vbmUoXCIudmMtc3dpdGNoXCIsdGhpcy4kZG9tKTtlLnN0eWxlLmRpc3BsYXk9XCJub25lXCJ9fX0se2tleTpcInNob3dUYWJcIix2YWx1ZTpmdW5jdGlvbihlKXtpZih0aGlzLmlzSW5pdGVkKXt2YXIgdD12W1wiZGVmYXVsdFwiXS5vbmUoXCIjX192Y19sb2dfXCIrZSk7dltcImRlZmF1bHRcIl0ucmVtb3ZlQ2xhc3ModltcImRlZmF1bHRcIl0uYWxsKFwiLnZjLXRhYlwiLHRoaXMuJGRvbSksXCJ2Yy1hY3RpdmVkXCIpLHZbXCJkZWZhdWx0XCJdLmFkZENsYXNzKHZbXCJkZWZhdWx0XCJdLm9uZShcIiNfX3ZjX3RhYl9cIitlKSxcInZjLWFjdGl2ZWRcIiksdltcImRlZmF1bHRcIl0ucmVtb3ZlQ2xhc3ModltcImRlZmF1bHRcIl0uYWxsKFwiLnZjLWxvZ2JveFwiLHRoaXMuJGRvbSksXCJ2Yy1hY3RpdmVkXCIpLHZbXCJkZWZhdWx0XCJdLmFkZENsYXNzKHQsXCJ2Yy1hY3RpdmVkXCIpO3ZhciBvPXZbXCJkZWZhdWx0XCJdLmFsbChcIi52Yy10b3BiYXItXCIrZSx0aGlzLiRkb20pO3ZbXCJkZWZhdWx0XCJdLnJlbW92ZUNsYXNzKHZbXCJkZWZhdWx0XCJdLmFsbChcIi52Yy10b3B0YWJcIix0aGlzLiRkb20pLFwidmMtdG9nZ2xlXCIpLHZbXCJkZWZhdWx0XCJdLmFkZENsYXNzKG8sXCJ2Yy10b2dnbGVcIiksby5sZW5ndGg+MD92W1wiZGVmYXVsdFwiXS5hZGRDbGFzcyh2W1wiZGVmYXVsdFwiXS5vbmUoXCIudmMtY29udGVudFwiLHRoaXMuJGRvbSksXCJ2Yy1oYXMtdG9wYmFyXCIpOnZbXCJkZWZhdWx0XCJdLnJlbW92ZUNsYXNzKHZbXCJkZWZhdWx0XCJdLm9uZShcIi52Yy1jb250ZW50XCIsdGhpcy4kZG9tKSxcInZjLWhhcy10b3BiYXJcIiksdltcImRlZmF1bHRcIl0ucmVtb3ZlQ2xhc3ModltcImRlZmF1bHRcIl0uYWxsKFwiLnZjLXRvb2xcIix0aGlzLiRkb20pLFwidmMtdG9nZ2xlXCIpLHZbXCJkZWZhdWx0XCJdLmFkZENsYXNzKHZbXCJkZWZhdWx0XCJdLmFsbChcIi52Yy10b29sLVwiK2UsdGhpcy4kZG9tKSxcInZjLXRvZ2dsZVwiKSx0aGlzLmFjdGl2ZWRUYWImJnRoaXMuX3RyaWdnZXJQbHVnaW5FdmVudCh0aGlzLmFjdGl2ZWRUYWIsXCJoaWRlXCIpLHRoaXMuYWN0aXZlZFRhYj1lLHRoaXMuX3RyaWdnZXJQbHVnaW5FdmVudCh0aGlzLmFjdGl2ZWRUYWIsXCJzaG93XCIpfX19LHtrZXk6XCJzZXRPcHRpb25cIix2YWx1ZTpmdW5jdGlvbihlLHQpe2lmKGQuaXNTdHJpbmcoZSkpdGhpcy5vcHRpb25bZV09dCx0aGlzLl90cmlnZ2VyUGx1Z2luc0V2ZW50KFwidXBkYXRlT3B0aW9uXCIpO2Vsc2UgaWYoZC5pc09iamVjdChlKSl7Zm9yKHZhciBvIGluIGUpdGhpcy5vcHRpb25bb109ZVtvXTt0aGlzLl90cmlnZ2VyUGx1Z2luc0V2ZW50KFwidXBkYXRlT3B0aW9uXCIpfWVsc2UgY29uc29sZS5kZWJ1ZyhcIlRoZSBmaXJzdCBwYXJhbWV0ZXIgb2YgdkNvbnNvbGUuc2V0T3B0aW9uKCkgbXVzdCBiZSBhIHN0cmluZyBvciBhbiBvYmplY3QuXCIpfX0se2tleTpcImRlc3Ryb3lcIix2YWx1ZTpmdW5jdGlvbigpe2lmKHRoaXMuaXNJbml0ZWQpe2Zvcih2YXIgZT1PYmplY3Qua2V5cyh0aGlzLnBsdWdpbkxpc3QpLHQ9ZS5sZW5ndGgtMTt0Pj0wO3QtLSl0aGlzLnJlbW92ZVBsdWdpbihlW3RdKTt0aGlzLiRkb20ucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0aGlzLiRkb20pfX19XSksZX0oKTt0W1wiZGVmYXVsdFwiXT1BLGUuZXhwb3J0cz10W1wiZGVmYXVsdFwiXX0sZnVuY3Rpb24oZSx0KXtlLmV4cG9ydHM9e25hbWU6XCJ2Y29uc29sZVwiLHZlcnNpb246XCIzLjIuMFwiLGRlc2NyaXB0aW9uOlwiQSBsaWdodHdlaWdodCwgZXh0ZW5kYWJsZSBmcm9udC1lbmQgZGV2ZWxvcGVyIHRvb2wgZm9yIG1vYmlsZSB3ZWIgcGFnZS5cIixob21lcGFnZTpcImh0dHBzOi8vZ2l0aHViLmNvbS9UZW5jZW50L3ZDb25zb2xlXCIsbWFpbjpcImRpc3QvdmNvbnNvbGUubWluLmpzXCIsc2NyaXB0czp7dGVzdDpcIm1vY2hhXCIsZGlzdDpcIndlYnBhY2tcIn0sa2V5d29yZHM6W1wiY29uc29sZVwiLFwiZGVidWdcIixcIm1vYmlsZVwiXSxyZXBvc2l0b3J5Ont0eXBlOlwiZ2l0XCIsdXJsOlwiZ2l0K2h0dHBzOi8vZ2l0aHViLmNvbS9UZW5jZW50L3ZDb25zb2xlLmdpdFwifSxkZXBlbmRlbmNpZXM6e30sZGV2RGVwZW5kZW5jaWVzOntcImJhYmVsLWNvcmVcIjpcIl42LjcuN1wiLFwiYmFiZWwtbG9hZGVyXCI6XCJeNi4yLjRcIixcImJhYmVsLXBsdWdpbi1hZGQtbW9kdWxlLWV4cG9ydHNcIjpcIl4wLjEuNFwiLFwiYmFiZWwtcHJlc2V0LWVzMjAxNVwiOlwiXjYuNi4wXCIsXCJiYWJlbC1wcmVzZXQtc3RhZ2UtM1wiOlwiXjYuNS4wXCIsY2hhaTpcIl4zLjUuMFwiLFwiY3NzLWxvYWRlclwiOlwiXjAuMjMuMVwiLFwiZXh0cmFjdC10ZXh0LXdlYnBhY2stcGx1Z2luXCI6XCJeMS4wLjFcIixcImh0bWwtbG9hZGVyXCI6XCJeMC40LjNcIixqc2RvbTpcIl45LjIuMVwiLFwianNvbi1sb2FkZXJcIjpcIl4wLjUuNFwiLGxlc3M6XCJeMi41LjNcIixcImxlc3MtbG9hZGVyXCI6XCJeMi4yLjNcIixtb2NoYTpcIl4yLjUuM1wiLFwic3R5bGUtbG9hZGVyXCI6XCJeMC4xMy4xXCIsd2VicGFjazpcIn4xLjEyLjExXCJ9LGF1dGhvcjpcIlRlbmNlbnRcIixsaWNlbnNlOlwiTUlUXCJ9fSxmdW5jdGlvbihlLHQpe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIG8oZSl7dmFyIHQ9ZT4wP25ldyBEYXRlKGUpOm5ldyBEYXRlLG89dC5nZXREYXRlKCk8MTA/XCIwXCIrdC5nZXREYXRlKCk6dC5nZXREYXRlKCksbj10LmdldE1vbnRoKCk8OT9cIjBcIisodC5nZXRNb250aCgpKzEpOnQuZ2V0TW9udGgoKSsxLGk9dC5nZXRGdWxsWWVhcigpLGE9dC5nZXRIb3VycygpPDEwP1wiMFwiK3QuZ2V0SG91cnMoKTp0LmdldEhvdXJzKCkscj10LmdldE1pbnV0ZXMoKTwxMD9cIjBcIit0LmdldE1pbnV0ZXMoKTp0LmdldE1pbnV0ZXMoKSxsPXQuZ2V0U2Vjb25kcygpPDEwP1wiMFwiK3QuZ2V0U2Vjb25kcygpOnQuZ2V0U2Vjb25kcygpLGM9dC5nZXRNaWxsaXNlY29uZHMoKTwxMD9cIjBcIit0LmdldE1pbGxpc2Vjb25kcygpOnQuZ2V0TWlsbGlzZWNvbmRzKCk7cmV0dXJuIDEwMD5jJiYoYz1cIjBcIitjKSx7dGltZTordCx5ZWFyOmksbW9udGg6bixkYXk6byxob3VyOmEsbWludXRlOnIsc2Vjb25kOmwsbWlsbGlzZWNvbmQ6Y319ZnVuY3Rpb24gbihlKXtyZXR1cm5cIltvYmplY3QgTnVtYmVyXVwiPT1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoZSl9ZnVuY3Rpb24gaShlKXtyZXR1cm5cIltvYmplY3QgU3RyaW5nXVwiPT1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoZSl9ZnVuY3Rpb24gYShlKXtyZXR1cm5cIltvYmplY3QgQXJyYXldXCI9PU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChlKX1mdW5jdGlvbiByKGUpe3JldHVyblwiW29iamVjdCBCb29sZWFuXVwiPT1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoZSl9ZnVuY3Rpb24gbChlKXtyZXR1cm5cIltvYmplY3QgVW5kZWZpbmVkXVwiPT1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoZSl9ZnVuY3Rpb24gYyhlKXtyZXR1cm5cIltvYmplY3QgTnVsbF1cIj09T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGUpfWZ1bmN0aW9uIHMoZSl7cmV0dXJuXCJbb2JqZWN0IFN5bWJvbF1cIj09T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGUpfWZ1bmN0aW9uIGQoZSl7cmV0dXJuIShcIltvYmplY3QgT2JqZWN0XVwiIT1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoZSkmJihuKGUpfHxpKGUpfHxyKGUpfHxhKGUpfHxjKGUpfHx1KGUpfHxsKGUpfHxzKGUpKSl9ZnVuY3Rpb24gdShlKXtyZXR1cm5cIltvYmplY3QgRnVuY3Rpb25dXCI9PU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChlKX1mdW5jdGlvbiB2KGUpe3JldHVyblwib2JqZWN0XCI9PT0oXCJ1bmRlZmluZWRcIj09dHlwZW9mIEhUTUxFbGVtZW50P1widW5kZWZpbmVkXCI6dyhIVE1MRWxlbWVudCkpP2UgaW5zdGFuY2VvZiBIVE1MRWxlbWVudDplJiZcIm9iamVjdFwiPT09KFwidW5kZWZpbmVkXCI9PXR5cGVvZiBlP1widW5kZWZpbmVkXCI6dyhlKSkmJm51bGwhPT1lJiYxPT09ZS5ub2RlVHlwZSYmXCJzdHJpbmdcIj09dHlwZW9mIGUubm9kZU5hbWV9ZnVuY3Rpb24gZihlKXt2YXIgdD1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoZSk7cmV0dXJuXCJbb2JqZWN0IGdsb2JhbF1cIj09dHx8XCJbb2JqZWN0IFdpbmRvd11cIj09dHx8XCJbb2JqZWN0IERPTVdpbmRvd11cIj09dH1mdW5jdGlvbiBwKGUpe3ZhciB0PU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7aWYoIWV8fFwib2JqZWN0XCIhPT0oXCJ1bmRlZmluZWRcIj09dHlwZW9mIGU/XCJ1bmRlZmluZWRcIjp3KGUpKXx8ZS5ub2RlVHlwZXx8ZihlKSlyZXR1cm4hMTt0cnl7aWYoZS5jb25zdHJ1Y3RvciYmIXQuY2FsbChlLFwiY29uc3RydWN0b3JcIikmJiF0LmNhbGwoZS5jb25zdHJ1Y3Rvci5wcm90b3R5cGUsXCJpc1Byb3RvdHlwZU9mXCIpKXJldHVybiExfWNhdGNoKG8pe3JldHVybiExfXZhciBuPXZvaWQgMDtmb3IobiBpbiBlKTtyZXR1cm4gdm9pZCAwPT09bnx8dC5jYWxsKGUsbil9ZnVuY3Rpb24gaChlKXtyZXR1cm4gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImFcIikuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoZSkpLnBhcmVudE5vZGUuaW5uZXJIVE1MfWZ1bmN0aW9uIGcoZSl7dmFyIHQ9YXJndW1lbnRzLmxlbmd0aDw9MXx8dm9pZCAwPT09YXJndW1lbnRzWzFdP1wiXHRcIjphcmd1bWVudHNbMV0sbz1hcmd1bWVudHMubGVuZ3RoPD0yfHx2b2lkIDA9PT1hcmd1bWVudHNbMl0/XCJDSVJDVUxBUl9ERVBFTkRFQ1lfT0JKRUNUXCI6YXJndW1lbnRzWzJdLG49W10saT1KU09OLnN0cmluZ2lmeShlLGZ1bmN0aW9uKGUsdCl7aWYoXCJvYmplY3RcIj09PShcInVuZGVmaW5lZFwiPT10eXBlb2YgdD9cInVuZGVmaW5lZFwiOncodCkpJiZudWxsIT09dCl7aWYofm4uaW5kZXhPZih0KSlyZXR1cm4gbztuLnB1c2godCl9cmV0dXJuIHR9LHQpO3JldHVybiBuPW51bGwsaX1mdW5jdGlvbiBiKGUpe2lmKCFkKGUpJiYhYShlKSlyZXR1cm5bXTt2YXIgdD1bXCJ0b1N0cmluZ1wiLFwidG9Mb2NhbGVTdHJpbmdcIixcInZhbHVlT2ZcIixcImhhc093blByb3BlcnR5XCIsXCJpc1Byb3RvdHlwZU9mXCIsXCJwcm9wZXJ0eUlzRW51bWVyYWJsZVwiLFwiY29uc3RydWN0b3JcIl0sbz1bXTtmb3IodmFyIG4gaW4gZSl0LmluZGV4T2Yobik8MCYmby5wdXNoKG4pO3JldHVybiBvPW8uc29ydCgpfWZ1bmN0aW9uIG0oZSl7cmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChlKS5yZXBsYWNlKFwiW29iamVjdCBcIixcIlwiKS5yZXBsYWNlKFwiXVwiLFwiXCIpfWZ1bmN0aW9uIHkoZSx0KXt3aW5kb3cubG9jYWxTdG9yYWdlJiYoZT1cInZDb25zb2xlX1wiK2UsbG9jYWxTdG9yYWdlLnNldEl0ZW0oZSx0KSl9ZnVuY3Rpb24gXyhlKXtyZXR1cm4gd2luZG93LmxvY2FsU3RvcmFnZT8oZT1cInZDb25zb2xlX1wiK2UsbG9jYWxTdG9yYWdlLmdldEl0ZW0oZSkpOnZvaWQgMH1PYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgdz1cImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJlwic3ltYm9sXCI9PXR5cGVvZiBTeW1ib2wuaXRlcmF0b3I/ZnVuY3Rpb24oZSl7cmV0dXJuIHR5cGVvZiBlfTpmdW5jdGlvbihlKXtyZXR1cm4gZSYmXCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZlLmNvbnN0cnVjdG9yPT09U3ltYm9sP1wic3ltYm9sXCI6dHlwZW9mIGV9O3QuZ2V0RGF0ZT1vLHQuaXNOdW1iZXI9bix0LmlzU3RyaW5nPWksdC5pc0FycmF5PWEsdC5pc0Jvb2xlYW49cix0LmlzVW5kZWZpbmVkPWwsdC5pc051bGw9Yyx0LmlzU3ltYm9sPXMsdC5pc09iamVjdD1kLHQuaXNGdW5jdGlvbj11LHQuaXNFbGVtZW50PXYsdC5pc1dpbmRvdz1mLHQuaXNQbGFpbk9iamVjdD1wLHQuaHRtbEVuY29kZT1oLHQuSlNPTlN0cmluZ2lmeT1nLHQuZ2V0T2JqQWxsS2V5cz1iLHQuZ2V0T2JqTmFtZT1tLHQuc2V0U3RvcmFnZT15LHQuZ2V0U3RvcmFnZT1ffSxmdW5jdGlvbihlLHQsbyl7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gbihlKXtyZXR1cm4gZSYmZS5fX2VzTW9kdWxlP2U6e1wiZGVmYXVsdFwiOmV9fU9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBpPW8oNCksYT1vKDYpLHI9bihhKSxsPXt9O2wub25lPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIHQ/dC5xdWVyeVNlbGVjdG9yKGUpOmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoZSl9LGwuYWxsPWZ1bmN0aW9uKGUsdCl7dmFyIG89dm9pZCAwLG49W107cmV0dXJuIG89dD90LnF1ZXJ5U2VsZWN0b3JBbGwoZSk6ZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChlKSxvJiZvLmxlbmd0aD4wJiYobj1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChvKSksbn0sbC5hZGRDbGFzcz1mdW5jdGlvbihlLHQpe2lmKGUpeygwLGkuaXNBcnJheSkoZSl8fChlPVtlXSk7Zm9yKHZhciBvPTA7bzxlLmxlbmd0aDtvKyspe3ZhciBuPWVbb10uY2xhc3NOYW1lfHxcIlwiLGE9bi5zcGxpdChcIiBcIik7YS5pbmRleE9mKHQpPi0xfHwoYS5wdXNoKHQpLGVbb10uY2xhc3NOYW1lPWEuam9pbihcIiBcIikpfX19LGwucmVtb3ZlQ2xhc3M9ZnVuY3Rpb24oZSx0KXtpZihlKXsoMCxpLmlzQXJyYXkpKGUpfHwoZT1bZV0pO2Zvcih2YXIgbz0wO288ZS5sZW5ndGg7bysrKXtmb3IodmFyIG49ZVtvXS5jbGFzc05hbWUuc3BsaXQoXCIgXCIpLGE9MDthPG4ubGVuZ3RoO2ErKyluW2FdPT10JiYoblthXT1cIlwiKTtlW29dLmNsYXNzTmFtZT1uLmpvaW4oXCIgXCIpLnRyaW0oKX19fSxsLmhhc0NsYXNzPWZ1bmN0aW9uKGUsdCl7aWYoIWUpcmV0dXJuITE7Zm9yKHZhciBvPWUuY2xhc3NOYW1lLnNwbGl0KFwiIFwiKSxuPTA7bjxvLmxlbmd0aDtuKyspaWYob1tuXT09dClyZXR1cm4hMDtyZXR1cm4hMX0sbC5iaW5kPWZ1bmN0aW9uKGUsdCxvLG4pe2lmKGUpe3ZvaWQgMD09PW4mJihuPSExKSwoMCxpLmlzQXJyYXkpKGUpfHwoZT1bZV0pO2Zvcih2YXIgYT0wO2E8ZS5sZW5ndGg7YSsrKWVbYV0uYWRkRXZlbnRMaXN0ZW5lcih0LG8sbil9fSxsLmRlbGVnYXRlPWZ1bmN0aW9uKGUsdCxvLG4pe2UmJmUuYWRkRXZlbnRMaXN0ZW5lcih0LGZ1bmN0aW9uKHQpe3ZhciBpPWwuYWxsKG8sZSk7aWYoaSllOmZvcih2YXIgYT0wO2E8aS5sZW5ndGg7YSsrKWZvcih2YXIgcj10LnRhcmdldDtyOyl7aWYocj09aVthXSl7bi5jYWxsKHIsdCk7YnJlYWsgZX1pZihyPXIucGFyZW50Tm9kZSxyPT1lKWJyZWFrfX0sITEpfSxsLnJlbmRlcj1yW1wiZGVmYXVsdFwiXSx0W1wiZGVmYXVsdFwiXT1sLGUuZXhwb3J0cz10W1wiZGVmYXVsdFwiXX0sZnVuY3Rpb24oZSx0KXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiBvKGUsdCxvKXt2YXIgbj0vXFx7XFx7KFteXFx9XSspXFx9XFx9L2csaT1cIlwiLGE9XCJcIixyPTAsbD1bXSxjPWZ1bmN0aW9uKGUsdCl7XCJcIiE9PWUmJihpKz10P2UubWF0Y2goL14gP2Vsc2UvZyk/XCJ9IFwiK2UrXCIge1xcblwiOmUubWF0Y2goL1xcLyhpZnxmb3J8c3dpdGNoKS9nKT9cIn1cXG5cIjplLm1hdGNoKC9eID9pZnxmb3J8c3dpdGNoL2cpP2UrXCIge1xcblwiOmUubWF0Y2goL14gPyhicmVha3xjb250aW51ZSkgPyQvZyk/ZStcIjtcXG5cIjplLm1hdGNoKC9eID8oY2FzZXxkZWZhdWx0KS9nKT9lK1wiOlxcblwiOlwiYXJyLnB1c2goXCIrZStcIik7XFxuXCI6J2Fyci5wdXNoKFwiJytlLnJlcGxhY2UoL1wiL2csJ1xcXFxcIicpKydcIik7XFxuJyl9O2Zvcih3aW5kb3cuX19taXRvX2RhdGE9dCx3aW5kb3cuX19taXRvX2NvZGU9XCJcIix3aW5kb3cuX19taXRvX3Jlc3VsdD1cIlwiLGU9ZS5yZXBsYWNlKC8oXFx7XFx7ID9zd2l0Y2goLis/KVxcfVxcfSlbXFxyXFxuXFx0IF0rXFx7XFx7L2csXCIkMXt7XCIpLGU9ZS5yZXBsYWNlKC9eW1xcclxcbl0vLFwiXCIpLnJlcGxhY2UoL1xcbi9nLFwiXFxcXFxcblwiKS5yZXBsYWNlKC9cXHIvZyxcIlxcXFxcXHJcIiksYT1cIihmdW5jdGlvbigpe1xcblwiLGk9XCJ2YXIgYXJyID0gW107XFxuXCI7bD1uLmV4ZWMoZSk7KWMoZS5zbGljZShyLGwuaW5kZXgpLCExKSxjKGxbMV0sITApLHI9bC5pbmRleCtsWzBdLmxlbmd0aDtjKGUuc3Vic3RyKHIsZS5sZW5ndGgtciksITEpLGkrPSdfX21pdG9fcmVzdWx0ID0gYXJyLmpvaW4oXCJcIik7JyxpPVwid2l0aCAoX19taXRvX2RhdGEpIHtcXG5cIitpK1wiXFxufVwiLGErPWksYSs9XCJ9KSgpO1wiO3ZhciBzPWRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwic2NyaXB0XCIpLGQ9XCJcIjtzLmxlbmd0aD4wJiYoZD1zWzBdLmdldEF0dHJpYnV0ZShcIm5vbmNlXCIpfHxcIlwiKTt2YXIgdT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiU0NSSVBUXCIpO3UuaW5uZXJIVE1MPWEsdS5zZXRBdHRyaWJ1dGUoXCJub25jZVwiLGQpLGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5hcHBlbmRDaGlsZCh1KTt2YXIgdj1fX21pdG9fcmVzdWx0O2lmKGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5yZW1vdmVDaGlsZCh1KSwhbyl7dmFyIGY9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcIkRJVlwiKTtmLmlubmVySFRNTD12LHY9Zi5jaGlsZHJlblswXX1yZXR1cm4gdn1PYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSx0W1wiZGVmYXVsdFwiXT1vLGUuZXhwb3J0cz10W1wiZGVmYXVsdFwiXX0sZnVuY3Rpb24oZSx0LG8pe3ZhciBuPW8oOCk7XCJzdHJpbmdcIj09dHlwZW9mIG4mJihuPVtbZS5pZCxuLFwiXCJdXSk7bygxMCkobix7fSk7bi5sb2NhbHMmJihlLmV4cG9ydHM9bi5sb2NhbHMpfSxmdW5jdGlvbihlLHQsbyl7dD1lLmV4cG9ydHM9byg5KSgpLHQucHVzaChbZS5pZCwnI19fdmNvbnNvbGV7Y29sb3I6IzAwMDtmb250LXNpemU6MTNweDtmb250LWZhbWlseTpIZWx2ZXRpY2EgTmV1ZSxIZWx2ZXRpY2EsQXJpYWwsc2Fucy1zZXJpZn0jX192Y29uc29sZSAudmMtbWF4LWhlaWdodHttYXgtaGVpZ2h0OjE5LjIzMDc2OTIzZW19I19fdmNvbnNvbGUgLnZjLW1heC1oZWlnaHQtbGluZXttYXgtaGVpZ2h0OjMuMzg0NjE1MzhlbX0jX192Y29uc29sZSAudmMtbWluLWhlaWdodHttaW4taGVpZ2h0OjMuMDc2OTIzMDhlbX0jX192Y29uc29sZSBkZCwjX192Y29uc29sZSBkbCwjX192Y29uc29sZSBwcmV7bWFyZ2luOjB9I19fdmNvbnNvbGUgLnZjLXN3aXRjaHtkaXNwbGF5OmJsb2NrO3Bvc2l0aW9uOmZpeGVkO3JpZ2h0Oi43NjkyMzA3N2VtO2JvdHRvbTouNzY5MjMwNzdlbTtjb2xvcjojZmZmO2JhY2tncm91bmQtY29sb3I6IzA0YmUwMjtsaW5lLWhlaWdodDoxO2ZvbnQtc2l6ZToxLjA3NjkyMzA4ZW07cGFkZGluZzouNjE1Mzg0NjJlbSAxLjIzMDc2OTIzZW07ei1pbmRleDoxMDAwMDtib3JkZXItcmFkaXVzOi4zMDc2OTIzMWVtO2JveC1zaGFkb3c6MCAwIC42MTUzODQ2MmVtIHJnYmEoMCwwLDAsLjQpfSNfX3Zjb25zb2xlIC52Yy1tYXNre3RvcDowO2JhY2tncm91bmQ6dHJhbnNwYXJlbnQ7ei1pbmRleDoxMDAwMTt0cmFuc2l0aW9uOmJhY2tncm91bmQgLjNzOy13ZWJraXQtdGFwLWhpZ2hsaWdodC1jb2xvcjp0cmFuc3BhcmVudDtvdmVyZmxvdy15OnNjcm9sbH0jX192Y29uc29sZSAudmMtbWFzaywjX192Y29uc29sZSAudmMtcGFuZWx7ZGlzcGxheTpub25lO3Bvc2l0aW9uOmZpeGVkO2xlZnQ6MDtyaWdodDowO2JvdHRvbTowfSNfX3Zjb25zb2xlIC52Yy1wYW5lbHttaW4taGVpZ2h0Ojg1JTt6LWluZGV4OjEwMDAyO2JhY2tncm91bmQtY29sb3I6I2VmZWZmNDstd2Via2l0LXRyYW5zaXRpb246LXdlYmtpdC10cmFuc2Zvcm0gLjNzO3RyYW5zaXRpb246LXdlYmtpdC10cmFuc2Zvcm0gLjNzO3RyYW5zaXRpb246dHJhbnNmb3JtIC4zczt0cmFuc2l0aW9uOnRyYW5zZm9ybSAuM3MsLXdlYmtpdC10cmFuc2Zvcm0gLjNzOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoMTAwJSk7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoMTAwJSl9I19fdmNvbnNvbGUgLnZjLXRhYmJhcntib3JkZXItYm90dG9tOjFweCBzb2xpZCAjZDlkOWQ5O292ZXJmbG93LXg6YXV0bztoZWlnaHQ6M2VtO3dpZHRoOmF1dG87d2hpdGUtc3BhY2U6bm93cmFwfSNfX3Zjb25zb2xlIC52Yy10YWJiYXIgLnZjLXRhYntkaXNwbGF5OmlubGluZS1ibG9jaztsaW5lLWhlaWdodDozZW07cGFkZGluZzowIDEuMTUzODQ2MTVlbTtib3JkZXItcmlnaHQ6MXB4IHNvbGlkICNkOWQ5ZDk7dGV4dC1kZWNvcmF0aW9uOm5vbmU7Y29sb3I6IzAwMDstd2Via2l0LXRhcC1oaWdobGlnaHQtY29sb3I6dHJhbnNwYXJlbnQ7LXdlYmtpdC10b3VjaC1jYWxsb3V0Om5vbmV9I19fdmNvbnNvbGUgLnZjLXRhYmJhciAudmMtdGFiOmFjdGl2ZXtiYWNrZ3JvdW5kLWNvbG9yOnJnYmEoMCwwLDAsLjE1KX0jX192Y29uc29sZSAudmMtdGFiYmFyIC52Yy10YWIudmMtYWN0aXZlZHtiYWNrZ3JvdW5kLWNvbG9yOiNmZmZ9I19fdmNvbnNvbGUgLnZjLWNvbnRlbnR7YmFja2dyb3VuZC1jb2xvcjojZmZmO292ZXJmbG93LXg6aGlkZGVuO292ZXJmbG93LXk6YXV0bztwb3NpdGlvbjphYnNvbHV0ZTt0b3A6My4wNzY5MjMwOGVtO2xlZnQ6MDtyaWdodDowO2JvdHRvbTozLjA3NjkyMzA4ZW07LXdlYmtpdC1vdmVyZmxvdy1zY3JvbGxpbmc6dG91Y2h9I19fdmNvbnNvbGUgLnZjLWNvbnRlbnQudmMtaGFzLXRvcGJhcnt0b3A6NS40NjE1Mzg0NmVtfSNfX3Zjb25zb2xlIC52Yy10b3BiYXJ7YmFja2dyb3VuZC1jb2xvcjojZmJmOWZlO2Rpc3BsYXk6ZmxleDtkaXNwbGF5Oi13ZWJraXQtYm94O2ZsZXgtZGlyZWN0aW9uOnJvdztmbGV4LXdyYXA6d3JhcDstd2Via2l0LWJveC1kaXJlY3Rpb246cm93Oy13ZWJraXQtZmxleC13cmFwOndyYXA7d2lkdGg6MTAwJX0jX192Y29uc29sZSAudmMtdG9wYmFyIC52Yy10b3B0YWJ7ZGlzcGxheTpub25lO2ZsZXg6MTstd2Via2l0LWJveC1mbGV4OjE7bGluZS1oZWlnaHQ6Mi4zMDc2OTIzMWVtO3BhZGRpbmc6MCAxLjE1Mzg0NjE1ZW07Ym9yZGVyLWJvdHRvbToxcHggc29saWQgI2Q5ZDlkOTt0ZXh0LWRlY29yYXRpb246bm9uZTt0ZXh0LWFsaWduOmNlbnRlcjtjb2xvcjojMDAwOy13ZWJraXQtdGFwLWhpZ2hsaWdodC1jb2xvcjp0cmFuc3BhcmVudDstd2Via2l0LXRvdWNoLWNhbGxvdXQ6bm9uZX0jX192Y29uc29sZSAudmMtdG9wYmFyIC52Yy10b3B0YWIudmMtdG9nZ2xle2Rpc3BsYXk6YmxvY2t9I19fdmNvbnNvbGUgLnZjLXRvcGJhciAudmMtdG9wdGFiOmFjdGl2ZXtiYWNrZ3JvdW5kLWNvbG9yOnJnYmEoMCwwLDAsLjE1KX0jX192Y29uc29sZSAudmMtdG9wYmFyIC52Yy10b3B0YWIudmMtYWN0aXZlZHtib3JkZXItYm90dG9tOjFweCBzb2xpZCAjM2U4MmY3fSNfX3Zjb25zb2xlIC52Yy1sb2dib3h7ZGlzcGxheTpub25lO3Bvc2l0aW9uOnJlbGF0aXZlO21pbi1oZWlnaHQ6MTAwJX0jX192Y29uc29sZSAudmMtbG9nYm94IGl7Zm9udC1zdHlsZTpub3JtYWx9I19fdmNvbnNvbGUgLnZjLWxvZ2JveCAudmMtbG9ne3BhZGRpbmctYm90dG9tOjNlbTstd2Via2l0LXRhcC1oaWdobGlnaHQtY29sb3I6dHJhbnNwYXJlbnR9I19fdmNvbnNvbGUgLnZjLWxvZ2JveCAudmMtbG9nOmVtcHR5OmJlZm9yZXtjb250ZW50OlwiRW1wdHlcIjtjb2xvcjojOTk5O3Bvc2l0aW9uOmFic29sdXRlO3RvcDo0NSU7bGVmdDowO3JpZ2h0OjA7Ym90dG9tOjA7Zm9udC1zaXplOjEuMTUzODQ2MTVlbTt0ZXh0LWFsaWduOmNlbnRlcn0jX192Y29uc29sZSAudmMtbG9nYm94IC52Yy1pdGVte21hcmdpbjowO3BhZGRpbmc6LjQ2MTUzODQ2ZW0gLjYxNTM4NDYyZW07b3ZlcmZsb3c6aGlkZGVuO2xpbmUtaGVpZ2h0OjEuMztib3JkZXItYm90dG9tOjFweCBzb2xpZCAjZWVlO3dvcmQtYnJlYWs6YnJlYWstd29yZH0jX192Y29uc29sZSAudmMtbG9nYm94IC52Yy1pdGVtLWluZm97Y29sb3I6IzZhNWFjZH0jX192Y29uc29sZSAudmMtbG9nYm94IC52Yy1pdGVtLWRlYnVne2NvbG9yOiNkYWE1MjB9I19fdmNvbnNvbGUgLnZjLWxvZ2JveCAudmMtaXRlbS13YXJue2NvbG9yOm9yYW5nZTtib3JkZXItY29sb3I6I2ZmYjkzMDtiYWNrZ3JvdW5kLWNvbG9yOiNmZmZhY2R9I19fdmNvbnNvbGUgLnZjLWxvZ2JveCAudmMtaXRlbS1lcnJvcntjb2xvcjojZGMxNDNjO2JvcmRlci1jb2xvcjojZjRhMGFiO2JhY2tncm91bmQtY29sb3I6I2ZmZTRlMX0jX192Y29uc29sZSAudmMtbG9nYm94IC52Yy1sb2cudmMtbG9nLXBhcnRseSAudmMtaXRlbXtkaXNwbGF5Om5vbmV9I19fdmNvbnNvbGUgLnZjLWxvZ2JveCAudmMtbG9nLnZjLWxvZy1wYXJ0bHktZXJyb3IgLnZjLWl0ZW0tZXJyb3IsI19fdmNvbnNvbGUgLnZjLWxvZ2JveCAudmMtbG9nLnZjLWxvZy1wYXJ0bHktaW5mbyAudmMtaXRlbS1pbmZvLCNfX3Zjb25zb2xlIC52Yy1sb2dib3ggLnZjLWxvZy52Yy1sb2ctcGFydGx5LWxvZyAudmMtaXRlbS1sb2csI19fdmNvbnNvbGUgLnZjLWxvZ2JveCAudmMtbG9nLnZjLWxvZy1wYXJ0bHktd2FybiAudmMtaXRlbS13YXJue2Rpc3BsYXk6YmxvY2t9I19fdmNvbnNvbGUgLnZjLWxvZ2JveCAudmMtaXRlbSAudmMtaXRlbS1jb250ZW50e21hcmdpbi1yaWdodDo0LjYxNTM4NDYyZW07ZGlzcGxheTpibG9ja30jX192Y29uc29sZSAudmMtbG9nYm94IC52Yy1pdGVtIC52Yy1pdGVtLW1ldGF7Y29sb3I6Izg4ODtmbG9hdDpyaWdodDt3aWR0aDo0LjYxNTM4NDYyZW07dGV4dC1hbGlnbjpyaWdodH0jX192Y29uc29sZSAudmMtbG9nYm94IC52Yy1pdGVtLnZjLWl0ZW0tbm9tZXRhIC52Yy1pdGVtLWNvbnRlbnR7bWFyZ2luLXJpZ2h0OjB9I19fdmNvbnNvbGUgLnZjLWxvZ2JveCAudmMtaXRlbS52Yy1pdGVtLW5vbWV0YSAudmMtaXRlbS1tZXRhe2Rpc3BsYXk6bm9uZX0jX192Y29uc29sZSAudmMtbG9nYm94IC52Yy1pdGVtIC52Yy1pdGVtLWNvZGV7ZGlzcGxheTpibG9jazt3aGl0ZS1zcGFjZTpwcmUtd3JhcDtvdmVyZmxvdzphdXRvO3Bvc2l0aW9uOnJlbGF0aXZlfSNfX3Zjb25zb2xlIC52Yy1sb2dib3ggLnZjLWl0ZW0gLnZjLWl0ZW0tY29kZS52Yy1pdGVtLWNvZGUtaW5wdXQsI19fdmNvbnNvbGUgLnZjLWxvZ2JveCAudmMtaXRlbSAudmMtaXRlbS1jb2RlLnZjLWl0ZW0tY29kZS1vdXRwdXR7cGFkZGluZy1sZWZ0Oi45MjMwNzY5MmVtfSNfX3Zjb25zb2xlIC52Yy1sb2dib3ggLnZjLWl0ZW0gLnZjLWl0ZW0tY29kZS52Yy1pdGVtLWNvZGUtaW5wdXQ6YmVmb3JlLCNfX3Zjb25zb2xlIC52Yy1sb2dib3ggLnZjLWl0ZW0gLnZjLWl0ZW0tY29kZS52Yy1pdGVtLWNvZGUtb3V0cHV0OmJlZm9yZXtjb250ZW50OlwiXFxcXDIwM0FcIjtwb3NpdGlvbjphYnNvbHV0ZTt0b3A6LS4yMzA3NjkyM2VtO2xlZnQ6MDtmb250LXNpemU6MS4yMzA3NjkyM2VtO2NvbG9yOiM2YTVhY2R9I19fdmNvbnNvbGUgLnZjLWxvZ2JveCAudmMtaXRlbSAudmMtaXRlbS1jb2RlLnZjLWl0ZW0tY29kZS1vdXRwdXQ6YmVmb3Jle2NvbnRlbnQ6XCJcXFxcMjAzOVwifSNfX3Zjb25zb2xlIC52Yy1sb2dib3ggLnZjLWl0ZW0gLnZjLWZvbGR7ZGlzcGxheTpibG9jaztvdmVyZmxvdzphdXRvOy13ZWJraXQtb3ZlcmZsb3ctc2Nyb2xsaW5nOnRvdWNofSNfX3Zjb25zb2xlIC52Yy1sb2dib3ggLnZjLWl0ZW0gLnZjLWZvbGQgLnZjLWZvbGQtb3V0ZXJ7ZGlzcGxheTpibG9jaztmb250LXN0eWxlOml0YWxpYztwYWRkaW5nLWxlZnQ6Ljc2OTIzMDc3ZW07cG9zaXRpb246cmVsYXRpdmV9I19fdmNvbnNvbGUgLnZjLWxvZ2JveCAudmMtaXRlbSAudmMtZm9sZCAudmMtZm9sZC1vdXRlcjphY3RpdmV7YmFja2dyb3VuZC1jb2xvcjojZTZlNmU2fSNfX3Zjb25zb2xlIC52Yy1sb2dib3ggLnZjLWl0ZW0gLnZjLWZvbGQgLnZjLWZvbGQtb3V0ZXI6YmVmb3Jle2NvbnRlbnQ6XCJcIjtwb3NpdGlvbjphYnNvbHV0ZTt0b3A6LjMwNzY5MjMxZW07bGVmdDouMTUzODQ2MTVlbTt3aWR0aDowO2hlaWdodDowO2JvcmRlcjouMzA3NjkyMzFlbSBzb2xpZCB0cmFuc3BhcmVudDtib3JkZXItbGVmdC1jb2xvcjojMDAwfSNfX3Zjb25zb2xlIC52Yy1sb2dib3ggLnZjLWl0ZW0gLnZjLWZvbGQgLnZjLWZvbGQtb3V0ZXIudmMtdG9nZ2xlOmJlZm9yZXt0b3A6LjQ2MTUzODQ2ZW07bGVmdDowO2JvcmRlci10b3AtY29sb3I6IzAwMDtib3JkZXItbGVmdC1jb2xvcjp0cmFuc3BhcmVudH0jX192Y29uc29sZSAudmMtbG9nYm94IC52Yy1pdGVtIC52Yy1mb2xkIC52Yy1mb2xkLWlubmVye2Rpc3BsYXk6bm9uZTttYXJnaW4tbGVmdDouNzY5MjMwNzdlbX0jX192Y29uc29sZSAudmMtbG9nYm94IC52Yy1pdGVtIC52Yy1mb2xkIC52Yy1mb2xkLWlubmVyLnZjLXRvZ2dsZXtkaXNwbGF5OmJsb2NrfSNfX3Zjb25zb2xlIC52Yy1sb2dib3ggLnZjLWl0ZW0gLnZjLWZvbGQgLnZjLWZvbGQtaW5uZXIgLnZjLWNvZGUta2V5e21hcmdpbi1sZWZ0Oi43NjkyMzA3N2VtfSNfX3Zjb25zb2xlIC52Yy1sb2dib3ggLnZjLWl0ZW0gLnZjLWZvbGQgLnZjLWZvbGQtb3V0ZXIgLnZjLWNvZGUta2V5e21hcmdpbi1sZWZ0OjB9I19fdmNvbnNvbGUgLnZjLWxvZ2JveCAudmMtY29kZS1rZXl7Y29sb3I6IzkwNX0jX192Y29uc29sZSAudmMtbG9nYm94IC52Yy1jb2RlLXByaXZhdGUta2V5e2NvbG9yOiNkMzkxYjV9I19fdmNvbnNvbGUgLnZjLWxvZ2JveCAudmMtY29kZS1mdW5jdGlvbntjb2xvcjojOTA1O2ZvbnQtc3R5bGU6aXRhbGljfSNfX3Zjb25zb2xlIC52Yy1sb2dib3ggLnZjLWNvZGUtYm9vbGVhbiwjX192Y29uc29sZSAudmMtbG9nYm94IC52Yy1jb2RlLW51bWJlcntjb2xvcjojMDA4NmIzfSNfX3Zjb25zb2xlIC52Yy1sb2dib3ggLnZjLWNvZGUtc3RyaW5ne2NvbG9yOiMxODM2OTF9I19fdmNvbnNvbGUgLnZjLWxvZ2JveCAudmMtY29kZS1udWxsLCNfX3Zjb25zb2xlIC52Yy1sb2dib3ggLnZjLWNvZGUtdW5kZWZpbmVke2NvbG9yOiM2NjZ9I19fdmNvbnNvbGUgLnZjLWxvZ2JveCAudmMtY21ke3Bvc2l0aW9uOmFic29sdXRlO2hlaWdodDozLjA3NjkyMzA4ZW07bGVmdDowO3JpZ2h0OjA7Ym90dG9tOjA7Ym9yZGVyLXRvcDoxcHggc29saWQgI2Q5ZDlkOTtkaXNwbGF5OmJsb2NrIWltcG9ydGFudH0jX192Y29uc29sZSAudmMtbG9nYm94IC52Yy1jbWQgLnZjLWNtZC1pbnB1dC13cmFwe2Rpc3BsYXk6YmxvY2s7aGVpZ2h0OjIuMTUzODQ2MTVlbTttYXJnaW4tcmlnaHQ6My4wNzY5MjMwOGVtO3BhZGRpbmc6LjQ2MTUzODQ2ZW0gLjYxNTM4NDYyZW19I19fdmNvbnNvbGUgLnZjLWxvZ2JveCAudmMtY21kIC52Yy1jbWQtaW5wdXR7d2lkdGg6MTAwJTtib3JkZXI6bm9uZTtyZXNpemU6bm9uZTtvdXRsaW5lOm5vbmU7cGFkZGluZzowO2ZvbnQtc2l6ZTouOTIzMDc2OTJlbX0jX192Y29uc29sZSAudmMtbG9nYm94IC52Yy1jbWQgLnZjLWNtZC1pbnB1dDo6LXdlYmtpdC1pbnB1dC1wbGFjZWhvbGRlcntsaW5lLWhlaWdodDoyLjE1Mzg0NjE1ZW19I19fdmNvbnNvbGUgLnZjLWxvZ2JveCAudmMtY21kIC52Yy1jbWQtYnRue3Bvc2l0aW9uOmFic29sdXRlO3RvcDowO3JpZ2h0OjA7Ym90dG9tOjA7d2lkdGg6My4wNzY5MjMwOGVtO2JvcmRlcjpub25lO2JhY2tncm91bmQtY29sb3I6I2VmZWZmNDtvdXRsaW5lOm5vbmU7LXdlYmtpdC10b3VjaC1jYWxsb3V0Om5vbmU7Zm9udC1zaXplOjFlbX0jX192Y29uc29sZSAudmMtbG9nYm94IC52Yy1jbWQgLnZjLWNtZC1idG46YWN0aXZle2JhY2tncm91bmQtY29sb3I6cmdiYSgwLDAsMCwuMTUpfSNfX3Zjb25zb2xlIC52Yy1sb2dib3ggLnZjLWdyb3VwIC52Yy1ncm91cC1wcmV2aWV3ey13ZWJraXQtdG91Y2gtY2FsbG91dDpub25lfSNfX3Zjb25zb2xlIC52Yy1sb2dib3ggLnZjLWdyb3VwIC52Yy1ncm91cC1wcmV2aWV3OmFjdGl2ZXtiYWNrZ3JvdW5kLWNvbG9yOiNlNmU2ZTZ9I19fdmNvbnNvbGUgLnZjLWxvZ2JveCAudmMtZ3JvdXAgLnZjLWdyb3VwLWRldGFpbHtkaXNwbGF5Om5vbmU7cGFkZGluZzowIDAgLjc2OTIzMDc3ZW0gMS41Mzg0NjE1NGVtO2JvcmRlci1ib3R0b206MXB4IHNvbGlkICNlZWV9I19fdmNvbnNvbGUgLnZjLWxvZ2JveCAudmMtZ3JvdXAudmMtYWN0aXZlZCAudmMtZ3JvdXAtZGV0YWlse2Rpc3BsYXk6YmxvY2s7YmFja2dyb3VuZC1jb2xvcjojZmJmOWZlfSNfX3Zjb25zb2xlIC52Yy1sb2dib3ggLnZjLWdyb3VwLnZjLWFjdGl2ZWQgLnZjLXRhYmxlLXJvd3tiYWNrZ3JvdW5kLWNvbG9yOiNmZmZ9I19fdmNvbnNvbGUgLnZjLWxvZ2JveCAudmMtZ3JvdXAudmMtYWN0aXZlZCAudmMtZ3JvdXAtcHJldmlld3tiYWNrZ3JvdW5kLWNvbG9yOiNmYmY5ZmV9I19fdmNvbnNvbGUgLnZjLWxvZ2JveCAudmMtdGFibGUgLnZjLXRhYmxlLXJvd3tkaXNwbGF5OmZsZXg7ZGlzcGxheTotd2Via2l0LWZsZXg7ZmxleC1kaXJlY3Rpb246cm93O2ZsZXgtd3JhcDp3cmFwOy13ZWJraXQtYm94LWRpcmVjdGlvbjpyb3c7LXdlYmtpdC1mbGV4LXdyYXA6d3JhcDtvdmVyZmxvdzpoaWRkZW47Ym9yZGVyLWJvdHRvbToxcHggc29saWQgI2VlZX0jX192Y29uc29sZSAudmMtbG9nYm94IC52Yy10YWJsZSAudmMtdGFibGUtcm93LnZjLWxlZnQtYm9yZGVye2JvcmRlci1sZWZ0OjFweCBzb2xpZCAjZWVlfSNfX3Zjb25zb2xlIC52Yy1sb2dib3ggLnZjLXRhYmxlIC52Yy10YWJsZS1jb2x7ZmxleDoxOy13ZWJraXQtYm94LWZsZXg6MTtwYWRkaW5nOi4yMzA3NjkyM2VtIC4zMDc2OTIzMWVtO2JvcmRlci1sZWZ0OjFweCBzb2xpZCAjZWVlO292ZXJmbG93OmF1dG87d2hpdGUtc3BhY2U6cHJlLXdyYXA7d29yZC1icmVhazpicmVhay13b3JkOy13ZWJraXQtb3ZlcmZsb3ctc2Nyb2xsaW5nOnRvdWNofSNfX3Zjb25zb2xlIC52Yy1sb2dib3ggLnZjLXRhYmxlIC52Yy10YWJsZS1jb2w6Zmlyc3QtY2hpbGR7Ym9yZGVyOm5vbmV9I19fdmNvbnNvbGUgLnZjLWxvZ2JveCAudmMtdGFibGUgLnZjLXNtYWxsIC52Yy10YWJsZS1jb2x7cGFkZGluZzowIC4zMDc2OTIzMWVtO2ZvbnQtc2l6ZTouOTIzMDc2OTJlbX0jX192Y29uc29sZSAudmMtbG9nYm94IC52Yy10YWJsZSAudmMtdGFibGUtY29sLTJ7ZmxleDoyOy13ZWJraXQtYm94LWZsZXg6Mn0jX192Y29uc29sZSAudmMtbG9nYm94IC52Yy10YWJsZSAudmMtdGFibGUtY29sLTN7ZmxleDozOy13ZWJraXQtYm94LWZsZXg6M30jX192Y29uc29sZSAudmMtbG9nYm94IC52Yy10YWJsZSAudmMtdGFibGUtY29sLTR7ZmxleDo0Oy13ZWJraXQtYm94LWZsZXg6NH0jX192Y29uc29sZSAudmMtbG9nYm94IC52Yy10YWJsZSAudmMtdGFibGUtY29sLTV7ZmxleDo1Oy13ZWJraXQtYm94LWZsZXg6NX0jX192Y29uc29sZSAudmMtbG9nYm94IC52Yy10YWJsZSAudmMtdGFibGUtY29sLTZ7ZmxleDo2Oy13ZWJraXQtYm94LWZsZXg6Nn0jX192Y29uc29sZSAudmMtbG9nYm94IC52Yy10YWJsZSAudmMtdGFibGUtcm93LWVycm9ye2JvcmRlci1jb2xvcjojZjRhMGFiO2JhY2tncm91bmQtY29sb3I6I2ZmZTRlMX0jX192Y29uc29sZSAudmMtbG9nYm94IC52Yy10YWJsZSAudmMtdGFibGUtcm93LWVycm9yIC52Yy10YWJsZS1jb2x7Y29sb3I6I2RjMTQzYztib3JkZXItY29sb3I6I2Y0YTBhYn0jX192Y29uc29sZSAudmMtbG9nYm94IC52Yy10YWJsZSAudmMtdGFibGUtY29sLXRpdGxle2ZvbnQtd2VpZ2h0OjcwMH0jX192Y29uc29sZSAudmMtbG9nYm94LnZjLWFjdGl2ZWR7ZGlzcGxheTpibG9ja30jX192Y29uc29sZSAudmMtdG9vbGJhcntib3JkZXItdG9wOjFweCBzb2xpZCAjZDlkOWQ5O2xpbmUtaGVpZ2h0OjNlbTtwb3NpdGlvbjphYnNvbHV0ZTtsZWZ0OjA7cmlnaHQ6MDtib3R0b206MDtkaXNwbGF5OmZsZXg7ZGlzcGxheTotd2Via2l0LWJveDtmbGV4LWRpcmVjdGlvbjpyb3c7LXdlYmtpdC1ib3gtZGlyZWN0aW9uOnJvd30jX192Y29uc29sZSAudmMtdG9vbGJhciAudmMtdG9vbHtkaXNwbGF5Om5vbmU7dGV4dC1kZWNvcmF0aW9uOm5vbmU7Y29sb3I6IzAwMDt3aWR0aDo1MCU7ZmxleDoxOy13ZWJraXQtYm94LWZsZXg6MTt0ZXh0LWFsaWduOmNlbnRlcjtwb3NpdGlvbjpyZWxhdGl2ZTstd2Via2l0LXRvdWNoLWNhbGxvdXQ6bm9uZX0jX192Y29uc29sZSAudmMtdG9vbGJhciAudmMtdG9vbC52Yy1nbG9iYWwtdG9vbCwjX192Y29uc29sZSAudmMtdG9vbGJhciAudmMtdG9vbC52Yy10b2dnbGV7ZGlzcGxheTpibG9ja30jX192Y29uc29sZSAudmMtdG9vbGJhciAudmMtdG9vbDphY3RpdmV7YmFja2dyb3VuZC1jb2xvcjpyZ2JhKDAsMCwwLC4xNSl9I19fdmNvbnNvbGUgLnZjLXRvb2xiYXIgLnZjLXRvb2w6YWZ0ZXJ7Y29udGVudDpcIiBcIjtwb3NpdGlvbjphYnNvbHV0ZTt0b3A6LjUzODQ2MTU0ZW07Ym90dG9tOi41Mzg0NjE1NGVtO3JpZ2h0OjA7Ym9yZGVyLWxlZnQ6MXB4IHNvbGlkICNkOWQ5ZDl9I19fdmNvbnNvbGUgLnZjLXRvb2xiYXIgLnZjLXRvb2wtbGFzdDphZnRlcntib3JkZXI6bm9uZX0jX192Y29uc29sZS52Yy10b2dnbGUgLnZjLXN3aXRjaHtkaXNwbGF5Om5vbmV9I19fdmNvbnNvbGUudmMtdG9nZ2xlIC52Yy1tYXNre2JhY2tncm91bmQ6cmdiYSgwLDAsMCwuNik7ZGlzcGxheTpibG9ja30jX192Y29uc29sZS52Yy10b2dnbGUgLnZjLXBhbmVsey13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZSgwKTt0cmFuc2Zvcm06dHJhbnNsYXRlKDApfScsXCJcIl0pfSxmdW5jdGlvbihlLHQpe1widXNlIHN0cmljdFwiO2UuZXhwb3J0cz1mdW5jdGlvbigpe3ZhciBlPVtdO3JldHVybiBlLnRvU3RyaW5nPWZ1bmN0aW9uKCl7Zm9yKHZhciBlPVtdLHQ9MDt0PHRoaXMubGVuZ3RoO3QrKyl7dmFyIG89dGhpc1t0XTtvWzJdP2UucHVzaChcIkBtZWRpYSBcIitvWzJdK1wie1wiK29bMV0rXCJ9XCIpOmUucHVzaChvWzFdKX1yZXR1cm4gZS5qb2luKFwiXCIpfSxlLmk9ZnVuY3Rpb24odCxvKXtcInN0cmluZ1wiPT10eXBlb2YgdCYmKHQ9W1tudWxsLHQsXCJcIl1dKTtmb3IodmFyIG49e30saT0wO2k8dGhpcy5sZW5ndGg7aSsrKXt2YXIgYT10aGlzW2ldWzBdO1wibnVtYmVyXCI9PXR5cGVvZiBhJiYoblthXT0hMCl9Zm9yKGk9MDtpPHQubGVuZ3RoO2krKyl7dmFyIHI9dFtpXTtcIm51bWJlclwiPT10eXBlb2YgclswXSYmbltyWzBdXXx8KG8mJiFyWzJdP3JbMl09bzpvJiYoclsyXT1cIihcIityWzJdK1wiKSBhbmQgKFwiK28rXCIpXCIpLGUucHVzaChyKSl9fSxlfX0sZnVuY3Rpb24oZSx0LG8pe2Z1bmN0aW9uIG4oZSx0KXtmb3IodmFyIG89MDtvPGUubGVuZ3RoO28rKyl7dmFyIG49ZVtvXSxpPWZbbi5pZF07aWYoaSl7aS5yZWZzKys7Zm9yKHZhciBhPTA7YTxpLnBhcnRzLmxlbmd0aDthKyspaS5wYXJ0c1thXShuLnBhcnRzW2FdKTtmb3IoO2E8bi5wYXJ0cy5sZW5ndGg7YSsrKWkucGFydHMucHVzaChzKG4ucGFydHNbYV0sdCkpfWVsc2V7Zm9yKHZhciByPVtdLGE9MDthPG4ucGFydHMubGVuZ3RoO2ErKylyLnB1c2gocyhuLnBhcnRzW2FdLHQpKTtmW24uaWRdPXtpZDpuLmlkLHJlZnM6MSxwYXJ0czpyfX19fWZ1bmN0aW9uIGkoZSl7Zm9yKHZhciB0PVtdLG89e30sbj0wO248ZS5sZW5ndGg7bisrKXt2YXIgaT1lW25dLGE9aVswXSxyPWlbMV0sbD1pWzJdLGM9aVszXSxzPXtjc3M6cixtZWRpYTpsLHNvdXJjZU1hcDpjfTtvW2FdP29bYV0ucGFydHMucHVzaChzKTp0LnB1c2gob1thXT17aWQ6YSxwYXJ0czpbc119KX1yZXR1cm4gdH1mdW5jdGlvbiBhKGUsdCl7dmFyIG89ZygpLG49eVt5Lmxlbmd0aC0xXTtpZihcInRvcFwiPT09ZS5pbnNlcnRBdCluP24ubmV4dFNpYmxpbmc/by5pbnNlcnRCZWZvcmUodCxuLm5leHRTaWJsaW5nKTpvLmFwcGVuZENoaWxkKHQpOm8uaW5zZXJ0QmVmb3JlKHQsby5maXJzdENoaWxkKSx5LnB1c2godCk7ZWxzZXtpZihcImJvdHRvbVwiIT09ZS5pbnNlcnRBdCl0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIHZhbHVlIGZvciBwYXJhbWV0ZXIgJ2luc2VydEF0Jy4gTXVzdCBiZSAndG9wJyBvciAnYm90dG9tJy5cIik7by5hcHBlbmRDaGlsZCh0KX19ZnVuY3Rpb24gcihlKXtlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZSk7dmFyIHQ9eS5pbmRleE9mKGUpO3Q+PTAmJnkuc3BsaWNlKHQsMSl9ZnVuY3Rpb24gbChlKXt2YXIgdD1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3R5bGVcIik7cmV0dXJuIHQudHlwZT1cInRleHQvY3NzXCIsYShlLHQpLHR9ZnVuY3Rpb24gYyhlKXt2YXIgdD1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGlua1wiKTtyZXR1cm4gdC5yZWw9XCJzdHlsZXNoZWV0XCIsYShlLHQpLHR9ZnVuY3Rpb24gcyhlLHQpe3ZhciBvLG4saTtpZih0LnNpbmdsZXRvbil7dmFyIGE9bSsrO289Ynx8KGI9bCh0KSksbj1kLmJpbmQobnVsbCxvLGEsITEpLGk9ZC5iaW5kKG51bGwsbyxhLCEwKX1lbHNlIGUuc291cmNlTWFwJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBVUkwmJlwiZnVuY3Rpb25cIj09dHlwZW9mIFVSTC5jcmVhdGVPYmplY3RVUkwmJlwiZnVuY3Rpb25cIj09dHlwZW9mIFVSTC5yZXZva2VPYmplY3RVUkwmJlwiZnVuY3Rpb25cIj09dHlwZW9mIEJsb2ImJlwiZnVuY3Rpb25cIj09dHlwZW9mIGJ0b2E/KG89Yyh0KSxuPXYuYmluZChudWxsLG8pLGk9ZnVuY3Rpb24oKXtyKG8pLG8uaHJlZiYmVVJMLnJldm9rZU9iamVjdFVSTChvLmhyZWYpfSk6KG89bCh0KSxuPXUuYmluZChudWxsLG8pLGk9ZnVuY3Rpb24oKXtyKG8pfSk7cmV0dXJuIG4oZSksZnVuY3Rpb24odCl7aWYodCl7aWYodC5jc3M9PT1lLmNzcyYmdC5tZWRpYT09PWUubWVkaWEmJnQuc291cmNlTWFwPT09ZS5zb3VyY2VNYXApcmV0dXJuO24oZT10KX1lbHNlIGkoKX19ZnVuY3Rpb24gZChlLHQsbyxuKXt2YXIgaT1vP1wiXCI6bi5jc3M7aWYoZS5zdHlsZVNoZWV0KWUuc3R5bGVTaGVldC5jc3NUZXh0PV8odCxpKTtlbHNle3ZhciBhPWRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGkpLHI9ZS5jaGlsZE5vZGVzO3JbdF0mJmUucmVtb3ZlQ2hpbGQoclt0XSksci5sZW5ndGg/ZS5pbnNlcnRCZWZvcmUoYSxyW3RdKTplLmFwcGVuZENoaWxkKGEpfX1mdW5jdGlvbiB1KGUsdCl7dmFyIG89dC5jc3Msbj10Lm1lZGlhO2lmKG4mJmUuc2V0QXR0cmlidXRlKFwibWVkaWFcIixuKSxlLnN0eWxlU2hlZXQpZS5zdHlsZVNoZWV0LmNzc1RleHQ9bztlbHNle2Zvcig7ZS5maXJzdENoaWxkOyllLnJlbW92ZUNoaWxkKGUuZmlyc3RDaGlsZCk7ZS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShvKSl9fWZ1bmN0aW9uIHYoZSx0KXt2YXIgbz10LmNzcyxuPXQuc291cmNlTWFwO24mJihvKz1cIlxcbi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsXCIrYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkobikpKSkrXCIgKi9cIik7dmFyIGk9bmV3IEJsb2IoW29dLHt0eXBlOlwidGV4dC9jc3NcIlxyXG59KSxhPWUuaHJlZjtlLmhyZWY9VVJMLmNyZWF0ZU9iamVjdFVSTChpKSxhJiZVUkwucmV2b2tlT2JqZWN0VVJMKGEpfXZhciBmPXt9LHA9ZnVuY3Rpb24oZSl7dmFyIHQ7cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuXCJ1bmRlZmluZWRcIj09dHlwZW9mIHQmJih0PWUuYXBwbHkodGhpcyxhcmd1bWVudHMpKSx0fX0saD1wKGZ1bmN0aW9uKCl7cmV0dXJuL21zaWUgWzYtOV1cXGIvLnRlc3Qod2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKSl9KSxnPXAoZnVuY3Rpb24oKXtyZXR1cm4gZG9jdW1lbnQuaGVhZHx8ZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJoZWFkXCIpWzBdfSksYj1udWxsLG09MCx5PVtdO2UuZXhwb3J0cz1mdW5jdGlvbihlLHQpe3Q9dHx8e30sXCJ1bmRlZmluZWRcIj09dHlwZW9mIHQuc2luZ2xldG9uJiYodC5zaW5nbGV0b249aCgpKSxcInVuZGVmaW5lZFwiPT10eXBlb2YgdC5pbnNlcnRBdCYmKHQuaW5zZXJ0QXQ9XCJib3R0b21cIik7dmFyIG89aShlKTtyZXR1cm4gbihvLHQpLGZ1bmN0aW9uKGUpe2Zvcih2YXIgYT1bXSxyPTA7cjxvLmxlbmd0aDtyKyspe3ZhciBsPW9bcl0sYz1mW2wuaWRdO2MucmVmcy0tLGEucHVzaChjKX1pZihlKXt2YXIgcz1pKGUpO24ocyx0KX1mb3IodmFyIHI9MDtyPGEubGVuZ3RoO3IrKyl7dmFyIGM9YVtyXTtpZigwPT09Yy5yZWZzKXtmb3IodmFyIGQ9MDtkPGMucGFydHMubGVuZ3RoO2QrKyljLnBhcnRzW2RdKCk7ZGVsZXRlIGZbYy5pZF19fX19O3ZhciBfPWZ1bmN0aW9uKCl7dmFyIGU9W107cmV0dXJuIGZ1bmN0aW9uKHQsbyl7cmV0dXJuIGVbdF09byxlLmZpbHRlcihCb29sZWFuKS5qb2luKFwiXFxuXCIpfX0oKX0sZnVuY3Rpb24oZSx0KXtlLmV4cG9ydHM9JzxkaXYgaWQ9XCJfX3Zjb25zb2xlXCIgY2xhc3M9XCJcIj5cXG4gIDxkaXYgY2xhc3M9XCJ2Yy1zd2l0Y2hcIj52Q29uc29sZTwvZGl2PlxcbiAgPGRpdiBjbGFzcz1cInZjLW1hc2tcIj5cXG4gIDwvZGl2PlxcbiAgPGRpdiBjbGFzcz1cInZjLXBhbmVsXCI+XFxuICAgIDxkaXYgY2xhc3M9XCJ2Yy10YWJiYXJcIj5cXG4gICAgPC9kaXY+XFxuICAgIDxkaXYgY2xhc3M9XCJ2Yy10b3BiYXJcIj5cXG4gICAgPC9kaXY+XFxuICAgIDxkaXYgY2xhc3M9XCJ2Yy1jb250ZW50XCI+XFxuICAgIDwvZGl2PlxcbiAgICA8ZGl2IGNsYXNzPVwidmMtdG9vbGJhclwiPlxcbiAgICAgIDxhIGNsYXNzPVwidmMtdG9vbCB2Yy1nbG9iYWwtdG9vbCB2Yy10b29sLWxhc3QgdmMtaGlkZVwiPkhpZGU8L2E+XFxuICAgIDwvZGl2PlxcbiAgPC9kaXY+XFxuPC9kaXY+J30sZnVuY3Rpb24oZSx0KXtlLmV4cG9ydHM9JzxhIGNsYXNzPVwidmMtdGFiXCIgZGF0YS10YWI9XCJ7e2lkfX1cIiBpZD1cIl9fdmNfdGFiX3t7aWR9fVwiPnt7bmFtZX19PC9hPid9LGZ1bmN0aW9uKGUsdCl7ZS5leHBvcnRzPSc8ZGl2IGNsYXNzPVwidmMtbG9nYm94XCIgaWQ9XCJfX3ZjX2xvZ197e2lkfX1cIj5cXG4gIFxcbjwvZGl2Pid9LGZ1bmN0aW9uKGUsdCl7ZS5leHBvcnRzPSc8YSBjbGFzcz1cInZjLXRvcHRhYiB2Yy10b3BiYXIte3twbHVnaW5JRH19e3tpZiAoY2xhc3NOYW1lKX19IHt7Y2xhc3NOYW1lfX17ey9pZn19XCI+e3tuYW1lfX08L2E+J30sZnVuY3Rpb24oZSx0KXtlLmV4cG9ydHM9JzxhIGNsYXNzPVwidmMtdG9vbCB2Yy10b29sLXt7cGx1Z2luSUR9fVwiPnt7bmFtZX19PC9hPid9LGZ1bmN0aW9uKGUsdCxvKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiBuKGUpe2lmKGUmJmUuX19lc01vZHVsZSlyZXR1cm4gZTt2YXIgdD17fTtpZihudWxsIT1lKWZvcih2YXIgbyBpbiBlKU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChlLG8pJiYodFtvXT1lW29dKTtyZXR1cm4gdFtcImRlZmF1bHRcIl09ZSx0fWZ1bmN0aW9uIGkoZSl7cmV0dXJuIGUmJmUuX19lc01vZHVsZT9lOntcImRlZmF1bHRcIjplfX1mdW5jdGlvbiBhKGUsdCl7aWYoIShlIGluc3RhbmNlb2YgdCkpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKX1mdW5jdGlvbiByKGUsdCl7aWYoIWUpdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpO3JldHVybiF0fHxcIm9iamVjdFwiIT10eXBlb2YgdCYmXCJmdW5jdGlvblwiIT10eXBlb2YgdD9lOnR9ZnVuY3Rpb24gbChlLHQpe2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIHQmJm51bGwhPT10KXRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiK3R5cGVvZiB0KTtlLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKHQmJnQucHJvdG90eXBlLHtjb25zdHJ1Y3Rvcjp7dmFsdWU6ZSxlbnVtZXJhYmxlOiExLHdyaXRhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH19KSx0JiYoT2JqZWN0LnNldFByb3RvdHlwZU9mP09iamVjdC5zZXRQcm90b3R5cGVPZihlLHQpOmUuX19wcm90b19fPXQpfU9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBjPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZShlLHQpe2Zvcih2YXIgbz0wO288dC5sZW5ndGg7bysrKXt2YXIgbj10W29dO24uZW51bWVyYWJsZT1uLmVudW1lcmFibGV8fCExLG4uY29uZmlndXJhYmxlPSEwLFwidmFsdWVcImluIG4mJihuLndyaXRhYmxlPSEwKSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxuLmtleSxuKX19cmV0dXJuIGZ1bmN0aW9uKHQsbyxuKXtyZXR1cm4gbyYmZSh0LnByb3RvdHlwZSxvKSxuJiZlKHQsbiksdH19KCkscz1mdW5jdGlvbiB3KGUsdCxvKXtudWxsPT09ZSYmKGU9RnVuY3Rpb24ucHJvdG90eXBlKTt2YXIgbj1PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGUsdCk7aWYodm9pZCAwPT09bil7dmFyIGk9T2JqZWN0LmdldFByb3RvdHlwZU9mKGUpO3JldHVybiBudWxsPT09aT92b2lkIDA6dyhpLHQsbyl9aWYoXCJ2YWx1ZVwiaW4gbilyZXR1cm4gbi52YWx1ZTt2YXIgYT1uLmdldDtpZih2b2lkIDAhPT1hKXJldHVybiBhLmNhbGwobyl9LGQ9byg1KSx1PWkoZCksdj1vKDQpLGY9bih2KSxwPW8oMTcpLGg9aShwKSxnPW8oMjIpLGI9aShnKSxtPW8oMjMpLHk9aShtKSxfPWZ1bmN0aW9uKGUpe2Z1bmN0aW9uIHQoKXt2YXIgZTthKHRoaXMsdCk7Zm9yKHZhciBvPWFyZ3VtZW50cy5sZW5ndGgsbj1BcnJheShvKSxpPTA7bz5pO2krKyluW2ldPWFyZ3VtZW50c1tpXTt2YXIgbD1yKHRoaXMsKGU9T2JqZWN0LmdldFByb3RvdHlwZU9mKHQpKS5jYWxsLmFwcGx5KGUsW3RoaXNdLmNvbmNhdChuKSkpO3JldHVybiBsLnRwbFRhYmJveD1iW1wiZGVmYXVsdFwiXSxsLndpbmRvd09uRXJyb3I9bnVsbCxsfXJldHVybiBsKHQsZSksYyh0LFt7a2V5Olwib25SZWFkeVwiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIGU9dGhpcztzKE9iamVjdC5nZXRQcm90b3R5cGVPZih0LnByb3RvdHlwZSksXCJvblJlYWR5XCIsdGhpcykuY2FsbCh0aGlzKSx1W1wiZGVmYXVsdFwiXS5iaW5kKHVbXCJkZWZhdWx0XCJdLm9uZShcIi52Yy1jbWRcIix0aGlzLiR0YWJib3gpLFwic3VibWl0XCIsZnVuY3Rpb24odCl7dC5wcmV2ZW50RGVmYXVsdCgpO3ZhciBvPXVbXCJkZWZhdWx0XCJdLm9uZShcIi52Yy1jbWQtaW5wdXRcIix0LnRhcmdldCksbj1vLnZhbHVlO28udmFsdWU9XCJcIixcIlwiIT09biYmZS5ldmFsQ29tbWFuZChuKX0pO3ZhciBvPVwiXCI7bys9XCJpZiAoISF3aW5kb3cpIHtcIixvKz1cIndpbmRvdy5fX3ZDb25zb2xlX2NtZF9yZXN1bHQgPSB1bmRlZmluZWQ7XCIsbys9XCJ3aW5kb3cuX192Q29uc29sZV9jbWRfZXJyb3IgPSBmYWxzZTtcIixvKz1cIn1cIjt2YXIgbj1kb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcInNjcmlwdFwiKSxpPVwiXCI7bi5sZW5ndGg+MCYmKGk9blswXS5nZXRBdHRyaWJ1dGUoXCJub25jZVwiKXx8XCJcIik7dmFyIGE9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcIlNDUklQVFwiKTthLmlubmVySFRNTD1vLGEuc2V0QXR0cmlidXRlKFwibm9uY2VcIixpKSxkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuYXBwZW5kQ2hpbGQoYSksZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnJlbW92ZUNoaWxkKGEpfX0se2tleTpcIm1vY2tDb25zb2xlXCIsdmFsdWU6ZnVuY3Rpb24oKXtzKE9iamVjdC5nZXRQcm90b3R5cGVPZih0LnByb3RvdHlwZSksXCJtb2NrQ29uc29sZVwiLHRoaXMpLmNhbGwodGhpcyk7dmFyIGU9dGhpcztmLmlzRnVuY3Rpb24od2luZG93Lm9uZXJyb3IpJiYodGhpcy53aW5kb3dPbkVycm9yPXdpbmRvdy5vbmVycm9yKSx3aW5kb3cub25lcnJvcj1mdW5jdGlvbih0LG8sbixpLGEpe3ZhciByPXQ7byYmKHIrPVwiXFxuXCIrby5yZXBsYWNlKGxvY2F0aW9uLm9yaWdpbixcIlwiKSksKG58fGkpJiYocis9XCI6XCIrbitcIjpcIitpKTt2YXIgbD0hIWEmJiEhYS5zdGFjayxjPWwmJmEuc3RhY2sudG9TdHJpbmcoKXx8XCJcIjtlLnByaW50TG9nKHtsb2dUeXBlOlwiZXJyb3JcIixsb2dzOltyLGNdLG5vT3JpZ2luOiEwfSksZi5pc0Z1bmN0aW9uKGUud2luZG93T25FcnJvcikmJmUud2luZG93T25FcnJvci5jYWxsKHdpbmRvdyx0LG8sbixpLGEpfX19LHtrZXk6XCJldmFsQ29tbWFuZFwiLHZhbHVlOmZ1bmN0aW9uKGUpe3RoaXMucHJpbnRMb2coe2xvZ1R5cGU6XCJsb2dcIixjb250ZW50OnVbXCJkZWZhdWx0XCJdLnJlbmRlcih5W1wiZGVmYXVsdFwiXSx7Y29udGVudDplLHR5cGU6XCJpbnB1dFwifSksbm9NZXRhOiEwLHN0eWxlOlwiXCJ9KTt2YXIgdD1cIlwiO3QrPVwidHJ5IHtcXG5cIix0Kz1cIndpbmRvdy5fX3ZDb25zb2xlX2NtZF9yZXN1bHQgPSAoZnVuY3Rpb24oKSB7XFxuXCIsdCs9XCJyZXR1cm4gXCIrZStcIjtcXG5cIix0Kz1cIn0pKCk7XFxuXCIsdCs9XCJ3aW5kb3cuX192Q29uc29sZV9jbWRfZXJyb3IgPSBmYWxzZTtcXG5cIix0Kz1cIn0gY2F0Y2ggKGUpIHtcXG5cIix0Kz1cIndpbmRvdy5fX3ZDb25zb2xlX2NtZF9yZXN1bHQgPSBlLm1lc3NhZ2U7XFxuXCIsdCs9XCJ3aW5kb3cuX192Q29uc29sZV9jbWRfZXJyb3IgPSB0cnVlO1xcblwiLHQrPVwifVwiO3ZhciBvPWRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwic2NyaXB0XCIpLG49XCJcIjtvLmxlbmd0aD4wJiYobj1vWzBdLmdldEF0dHJpYnV0ZShcIm5vbmNlXCIpfHxcIlwiKTt2YXIgaT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiU0NSSVBUXCIpO2kuaW5uZXJIVE1MPXQsaS5zZXRBdHRyaWJ1dGUoXCJub25jZVwiLG4pLGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5hcHBlbmRDaGlsZChpKTt2YXIgYT13aW5kb3cuX192Q29uc29sZV9jbWRfcmVzdWx0LHI9d2luZG93Ll9fdkNvbnNvbGVfY21kX2Vycm9yO2lmKGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5yZW1vdmVDaGlsZChpKSwwPT1yKXt2YXIgbD12b2lkIDA7Zi5pc0FycmF5KGEpfHxmLmlzT2JqZWN0KGEpP2w9dGhpcy5nZXRGb2xkZWRMaW5lKGEpOihmLmlzTnVsbChhKT9hPVwibnVsbFwiOmYuaXNVbmRlZmluZWQoYSk/YT1cInVuZGVmaW5lZFwiOmYuaXNGdW5jdGlvbihhKT9hPVwiZnVuY3Rpb24oKVwiOmYuaXNTdHJpbmcoYSkmJihhPSdcIicrYSsnXCInKSxsPXVbXCJkZWZhdWx0XCJdLnJlbmRlcih5W1wiZGVmYXVsdFwiXSx7Y29udGVudDphLHR5cGU6XCJvdXRwdXRcIn0pKSx0aGlzLnByaW50TG9nKHtsb2dUeXBlOlwibG9nXCIsY29udGVudDpsLG5vTWV0YTohMCxzdHlsZTpcIlwifSl9ZWxzZSB0aGlzLnByaW50TG9nKHtsb2dUeXBlOlwiZXJyb3JcIixsb2dzOlthXSxub01ldGE6ITAsc3R5bGU6XCJcIn0pfX1dKSx0fShoW1wiZGVmYXVsdFwiXSk7dFtcImRlZmF1bHRcIl09XyxlLmV4cG9ydHM9dFtcImRlZmF1bHRcIl19LGZ1bmN0aW9uKGUsdCxvKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiBuKGUpe3JldHVybiBlJiZlLl9fZXNNb2R1bGU/ZTp7XCJkZWZhdWx0XCI6ZX19ZnVuY3Rpb24gaShlKXtpZihlJiZlLl9fZXNNb2R1bGUpcmV0dXJuIGU7dmFyIHQ9e307aWYobnVsbCE9ZSlmb3IodmFyIG8gaW4gZSlPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZSxvKSYmKHRbb109ZVtvXSk7cmV0dXJuIHRbXCJkZWZhdWx0XCJdPWUsdH1mdW5jdGlvbiBhKGUsdCl7aWYoIShlIGluc3RhbmNlb2YgdCkpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKX1mdW5jdGlvbiByKGUsdCl7aWYoIWUpdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpO3JldHVybiF0fHxcIm9iamVjdFwiIT10eXBlb2YgdCYmXCJmdW5jdGlvblwiIT10eXBlb2YgdD9lOnR9ZnVuY3Rpb24gbChlLHQpe2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIHQmJm51bGwhPT10KXRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiK3R5cGVvZiB0KTtlLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKHQmJnQucHJvdG90eXBlLHtjb25zdHJ1Y3Rvcjp7dmFsdWU6ZSxlbnVtZXJhYmxlOiExLHdyaXRhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH19KSx0JiYoT2JqZWN0LnNldFByb3RvdHlwZU9mP09iamVjdC5zZXRQcm90b3R5cGVPZihlLHQpOmUuX19wcm90b19fPXQpfU9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBjPVwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmXCJzeW1ib2xcIj09dHlwZW9mIFN5bWJvbC5pdGVyYXRvcj9mdW5jdGlvbihlKXtyZXR1cm4gdHlwZW9mIGV9OmZ1bmN0aW9uKGUpe3JldHVybiBlJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJmUuY29uc3RydWN0b3I9PT1TeW1ib2w/XCJzeW1ib2xcIjp0eXBlb2YgZX0scz1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoZSx0KXtmb3IodmFyIG89MDtvPHQubGVuZ3RoO28rKyl7dmFyIG49dFtvXTtuLmVudW1lcmFibGU9bi5lbnVtZXJhYmxlfHwhMSxuLmNvbmZpZ3VyYWJsZT0hMCxcInZhbHVlXCJpbiBuJiYobi53cml0YWJsZT0hMCksT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsbi5rZXksbil9fXJldHVybiBmdW5jdGlvbih0LG8sbil7cmV0dXJuIG8mJmUodC5wcm90b3R5cGUsbyksbiYmZSh0LG4pLHR9fSgpLGQ9byg0KSx1PWkoZCksdj1vKDUpLGY9bih2KSxwPW8oMTgpLGg9bihwKSxnPW8oMTkpLGI9bihnKSxtPW8oMjApLHk9bihtKSxfPW8oMjEpLHc9bihfKSx4PTFlMyxrPWZ1bmN0aW9uKGUpe2Z1bmN0aW9uIHQoKXt2YXIgZTthKHRoaXMsdCk7Zm9yKHZhciBvPWFyZ3VtZW50cy5sZW5ndGgsbj1BcnJheShvKSxpPTA7bz5pO2krKyluW2ldPWFyZ3VtZW50c1tpXTt2YXIgbD1yKHRoaXMsKGU9T2JqZWN0LmdldFByb3RvdHlwZU9mKHQpKS5jYWxsLmFwcGx5KGUsW3RoaXNdLmNvbmNhdChuKSkpO3JldHVybiBsLnRwbFRhYmJveD1cIlwiLGwuYWxsb3dVbmZvcm1hdHRlZExvZz0hMCxsLmlzUmVhZHk9ITEsbC5pc1Nob3c9ITEsbC4kdGFiYm94PW51bGwsbC5jb25zb2xlPXt9LGwubG9nTGlzdD1bXSxsLmlzSW5Cb3R0b209ITAsbC5tYXhMb2dOdW1iZXI9eCxsLmxvZ051bWJlcj0wLGwubW9ja0NvbnNvbGUoKSxsfXJldHVybiBsKHQsZSkscyh0LFt7a2V5Olwib25Jbml0XCIsdmFsdWU6ZnVuY3Rpb24oKXt0aGlzLiR0YWJib3g9ZltcImRlZmF1bHRcIl0ucmVuZGVyKHRoaXMudHBsVGFiYm94LHt9KSx0aGlzLnVwZGF0ZU1heExvZ051bWJlcigpfX0se2tleTpcIm9uUmVuZGVyVGFiXCIsdmFsdWU6ZnVuY3Rpb24oZSl7ZSh0aGlzLiR0YWJib3gpfX0se2tleTpcIm9uQWRkVG9wQmFyXCIsdmFsdWU6ZnVuY3Rpb24oZSl7Zm9yKHZhciB0PXRoaXMsbz1bXCJBbGxcIixcIkxvZ1wiLFwiSW5mb1wiLFwiV2FyblwiLFwiRXJyb3JcIl0sbj1bXSxpPTA7aTxvLmxlbmd0aDtpKyspbi5wdXNoKHtuYW1lOm9baV0sZGF0YTp7dHlwZTpvW2ldLnRvTG93ZXJDYXNlKCl9LGNsYXNzTmFtZTpcIlwiLG9uQ2xpY2s6ZnVuY3Rpb24oKXtyZXR1cm4gZltcImRlZmF1bHRcIl0uaGFzQ2xhc3ModGhpcyxcInZjLWFjdGl2ZWRcIik/ITE6dm9pZCB0LnNob3dMb2dUeXBlKHRoaXMuZGF0YXNldC50eXBlfHxcImFsbFwiKX19KTtuWzBdLmNsYXNzTmFtZT1cInZjLWFjdGl2ZWRcIixlKG4pfX0se2tleTpcIm9uQWRkVG9vbFwiLHZhbHVlOmZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMsbz1be25hbWU6XCJDbGVhclwiLGdsb2JhbDohMSxvbkNsaWNrOmZ1bmN0aW9uKCl7dC5jbGVhckxvZygpLHQudkNvbnNvbGUudHJpZ2dlckV2ZW50KFwiY2xlYXJMb2dcIil9fV07ZShvKX19LHtrZXk6XCJvblJlYWR5XCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgZT10aGlzO2UuaXNSZWFkeT0hMDt2YXIgdD1mW1wiZGVmYXVsdFwiXS5hbGwoXCIudmMtc3VidGFiXCIsZS4kdGFiYm94KTtmW1wiZGVmYXVsdFwiXS5iaW5kKHQsXCJjbGlja1wiLGZ1bmN0aW9uKG8pe2lmKG8ucHJldmVudERlZmF1bHQoKSxmW1wiZGVmYXVsdFwiXS5oYXNDbGFzcyh0aGlzLFwidmMtYWN0aXZlZFwiKSlyZXR1cm4hMTtmW1wiZGVmYXVsdFwiXS5yZW1vdmVDbGFzcyh0LFwidmMtYWN0aXZlZFwiKSxmW1wiZGVmYXVsdFwiXS5hZGRDbGFzcyh0aGlzLFwidmMtYWN0aXZlZFwiKTt2YXIgbj10aGlzLmRhdGFzZXQudHlwZSxpPWZbXCJkZWZhdWx0XCJdLm9uZShcIi52Yy1sb2dcIixlLiR0YWJib3gpO2ZbXCJkZWZhdWx0XCJdLnJlbW92ZUNsYXNzKGksXCJ2Yy1sb2ctcGFydGx5LWxvZ1wiKSxmW1wiZGVmYXVsdFwiXS5yZW1vdmVDbGFzcyhpLFwidmMtbG9nLXBhcnRseS1pbmZvXCIpLGZbXCJkZWZhdWx0XCJdLnJlbW92ZUNsYXNzKGksXCJ2Yy1sb2ctcGFydGx5LXdhcm5cIiksZltcImRlZmF1bHRcIl0ucmVtb3ZlQ2xhc3MoaSxcInZjLWxvZy1wYXJ0bHktZXJyb3JcIiksXCJhbGxcIj09bj9mW1wiZGVmYXVsdFwiXS5yZW1vdmVDbGFzcyhpLFwidmMtbG9nLXBhcnRseVwiKTooZltcImRlZmF1bHRcIl0uYWRkQ2xhc3MoaSxcInZjLWxvZy1wYXJ0bHlcIiksZltcImRlZmF1bHRcIl0uYWRkQ2xhc3MoaSxcInZjLWxvZy1wYXJ0bHktXCIrbikpfSk7dmFyIG89ZltcImRlZmF1bHRcIl0ub25lKFwiLnZjLWNvbnRlbnRcIik7ZltcImRlZmF1bHRcIl0uYmluZChvLFwic2Nyb2xsXCIsZnVuY3Rpb24odCl7ZS5pc1Nob3cmJihvLnNjcm9sbFRvcCtvLm9mZnNldEhlaWdodD49by5zY3JvbGxIZWlnaHQ/ZS5pc0luQm90dG9tPSEwOmUuaXNJbkJvdHRvbT0hMSl9KTtmb3IodmFyIG49MDtuPGUubG9nTGlzdC5sZW5ndGg7bisrKWUucHJpbnRMb2coZS5sb2dMaXN0W25dKTtlLmxvZ0xpc3Q9W119fSx7a2V5Olwib25SZW1vdmVcIix2YWx1ZTpmdW5jdGlvbigpe3dpbmRvdy5jb25zb2xlLmxvZz10aGlzLmNvbnNvbGUubG9nLHdpbmRvdy5jb25zb2xlLmluZm89dGhpcy5jb25zb2xlLmluZm8sd2luZG93LmNvbnNvbGUud2Fybj10aGlzLmNvbnNvbGUud2Fybix3aW5kb3cuY29uc29sZS5kZWJ1Zz10aGlzLmNvbnNvbGUuZGVidWcsd2luZG93LmNvbnNvbGUuZXJyb3I9dGhpcy5jb25zb2xlLmVycm9yLHdpbmRvdy5jb25zb2xlLnRpbWU9dGhpcy5jb25zb2xlLnRpbWUsd2luZG93LmNvbnNvbGUudGltZUVuZD10aGlzLmNvbnNvbGUudGltZUVuZCx3aW5kb3cuY29uc29sZS5jbGVhcj10aGlzLmNvbnNvbGUuY2xlYXIsdGhpcy5jb25zb2xlPXt9fX0se2tleTpcIm9uU2hvd1wiLHZhbHVlOmZ1bmN0aW9uKCl7dGhpcy5pc1Nob3c9ITAsMT09dGhpcy5pc0luQm90dG9tJiZ0aGlzLmF1dG9TY3JvbGxUb0JvdHRvbSgpfX0se2tleTpcIm9uSGlkZVwiLHZhbHVlOmZ1bmN0aW9uKCl7dGhpcy5pc1Nob3c9ITF9fSx7a2V5Olwib25TaG93Q29uc29sZVwiLHZhbHVlOmZ1bmN0aW9uKCl7MT09dGhpcy5pc0luQm90dG9tJiZ0aGlzLmF1dG9TY3JvbGxUb0JvdHRvbSgpfX0se2tleTpcIm9uVXBkYXRlT3B0aW9uXCIsdmFsdWU6ZnVuY3Rpb24oKXt0aGlzLnZDb25zb2xlLm9wdGlvbi5tYXhMb2dOdW1iZXIhPXRoaXMubWF4TG9nTnVtYmVyJiYodGhpcy51cGRhdGVNYXhMb2dOdW1iZXIoKSx0aGlzLmxpbWl0TWF4TG9ncygpKX19LHtrZXk6XCJ1cGRhdGVNYXhMb2dOdW1iZXJcIix2YWx1ZTpmdW5jdGlvbigpe3RoaXMubWF4TG9nTnVtYmVyPXRoaXMudkNvbnNvbGUub3B0aW9uLm1heExvZ051bWJlcnx8eCx0aGlzLm1heExvZ051bWJlcj1NYXRoLm1heCgxLHRoaXMubWF4TG9nTnVtYmVyKX19LHtrZXk6XCJsaW1pdE1heExvZ3NcIix2YWx1ZTpmdW5jdGlvbigpe2lmKHRoaXMuaXNSZWFkeSlmb3IoO3RoaXMubG9nTnVtYmVyPnRoaXMubWF4TG9nTnVtYmVyOyl7dmFyIGU9ZltcImRlZmF1bHRcIl0ub25lKFwiLnZjLWl0ZW1cIix0aGlzLiR0YWJib3gpO2lmKCFlKWJyZWFrO2UucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChlKSx0aGlzLmxvZ051bWJlci0tfX19LHtrZXk6XCJzaG93TG9nVHlwZVwiLHZhbHVlOmZ1bmN0aW9uKGUpe3ZhciB0PWZbXCJkZWZhdWx0XCJdLm9uZShcIi52Yy1sb2dcIix0aGlzLiR0YWJib3gpO2ZbXCJkZWZhdWx0XCJdLnJlbW92ZUNsYXNzKHQsXCJ2Yy1sb2ctcGFydGx5LWxvZ1wiKSxmW1wiZGVmYXVsdFwiXS5yZW1vdmVDbGFzcyh0LFwidmMtbG9nLXBhcnRseS1pbmZvXCIpLGZbXCJkZWZhdWx0XCJdLnJlbW92ZUNsYXNzKHQsXCJ2Yy1sb2ctcGFydGx5LXdhcm5cIiksZltcImRlZmF1bHRcIl0ucmVtb3ZlQ2xhc3ModCxcInZjLWxvZy1wYXJ0bHktZXJyb3JcIiksXCJhbGxcIj09ZT9mW1wiZGVmYXVsdFwiXS5yZW1vdmVDbGFzcyh0LFwidmMtbG9nLXBhcnRseVwiKTooZltcImRlZmF1bHRcIl0uYWRkQ2xhc3ModCxcInZjLWxvZy1wYXJ0bHlcIiksZltcImRlZmF1bHRcIl0uYWRkQ2xhc3ModCxcInZjLWxvZy1wYXJ0bHktXCIrZSkpfX0se2tleTpcImF1dG9TY3JvbGxUb0JvdHRvbVwiLHZhbHVlOmZ1bmN0aW9uKCl7dGhpcy52Q29uc29sZS5vcHRpb24uZGlzYWJsZUxvZ1Njcm9sbGluZ3x8dGhpcy5zY3JvbGxUb0JvdHRvbSgpfX0se2tleTpcInNjcm9sbFRvQm90dG9tXCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgZT1mW1wiZGVmYXVsdFwiXS5vbmUoXCIudmMtY29udGVudFwiKTtlJiYoZS5zY3JvbGxUb3A9ZS5zY3JvbGxIZWlnaHQtZS5vZmZzZXRIZWlnaHQpfX0se2tleTpcIm1vY2tDb25zb2xlXCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgZT10aGlzLHQ9dGhpcyxvPVtcImxvZ1wiLFwiaW5mb1wiLFwid2FyblwiLFwiZGVidWdcIixcImVycm9yXCJdO3dpbmRvdy5jb25zb2xlPyhvLm1hcChmdW5jdGlvbihlKXt0LmNvbnNvbGVbZV09d2luZG93LmNvbnNvbGVbZV19KSx0LmNvbnNvbGUudGltZT13aW5kb3cuY29uc29sZS50aW1lLHQuY29uc29sZS50aW1lRW5kPXdpbmRvdy5jb25zb2xlLnRpbWVFbmQsdC5jb25zb2xlLmNsZWFyPXdpbmRvdy5jb25zb2xlLmNsZWFyKTp3aW5kb3cuY29uc29sZT17fSxvLm1hcChmdW5jdGlvbih0KXt3aW5kb3cuY29uc29sZVt0XT1mdW5jdGlvbigpe2Zvcih2YXIgbz1hcmd1bWVudHMubGVuZ3RoLG49QXJyYXkobyksaT0wO28+aTtpKyspbltpXT1hcmd1bWVudHNbaV07ZS5wcmludExvZyh7bG9nVHlwZTp0LGxvZ3M6bn0pfX0pO3ZhciBuPXt9O3dpbmRvdy5jb25zb2xlLnRpbWU9ZnVuY3Rpb24oZSl7bltlXT1EYXRlLm5vdygpfSx3aW5kb3cuY29uc29sZS50aW1lRW5kPWZ1bmN0aW9uKGUpe3ZhciB0PW5bZV07dD8oY29uc29sZS5sb2coZStcIjpcIixEYXRlLm5vdygpLXQrXCJtc1wiKSxkZWxldGUgbltlXSk6Y29uc29sZS5sb2coZStcIjogMG1zXCIpfSx3aW5kb3cuY29uc29sZS5jbGVhcj1mdW5jdGlvbigpe2Zvcih2YXIgZT1hcmd1bWVudHMubGVuZ3RoLG89QXJyYXkoZSksbj0wO2U+bjtuKyspb1tuXT1hcmd1bWVudHNbbl07dC5jbGVhckxvZygpLHQuY29uc29sZS5jbGVhci5hcHBseSh3aW5kb3cuY29uc29sZSxvKX19fSx7a2V5OlwiY2xlYXJMb2dcIix2YWx1ZTpmdW5jdGlvbigpe2ZbXCJkZWZhdWx0XCJdLm9uZShcIi52Yy1sb2dcIix0aGlzLiR0YWJib3gpLmlubmVySFRNTD1cIlwifX0se2tleTpcInByaW50T3JpZ2luTG9nXCIsdmFsdWU6ZnVuY3Rpb24oZSl7XCJmdW5jdGlvblwiPT10eXBlb2YgdGhpcy5jb25zb2xlW2UubG9nVHlwZV0mJnRoaXMuY29uc29sZVtlLmxvZ1R5cGVdLmFwcGx5KHdpbmRvdy5jb25zb2xlLGUubG9ncyl9fSx7a2V5OlwicHJpbnRMb2dcIix2YWx1ZTpmdW5jdGlvbihlKXt2YXIgdD1lLmxvZ3N8fFtdO2lmKHQubGVuZ3RofHxlLmNvbnRlbnQpe3Q9W10uc2xpY2UuY2FsbCh0fHxbXSk7dmFyIG89ITAsbj0vXlxcWyhcXHcrKVxcXSQvaSxpPVwiXCI7aWYodS5pc1N0cmluZyh0WzBdKSl7dmFyIGE9dFswXS5tYXRjaChuKTtudWxsIT09YSYmYS5sZW5ndGg+MCYmKGk9YVsxXS50b0xvd2VyQ2FzZSgpKX1pZihpP289aT09dGhpcy5pZDowPT10aGlzLmFsbG93VW5mb3JtYXR0ZWRMb2cmJihvPSExKSwhbylyZXR1cm4gdm9pZChlLm5vT3JpZ2lufHx0aGlzLnByaW50T3JpZ2luTG9nKGUpKTtpZihlLmRhdGV8fChlLmRhdGU9K25ldyBEYXRlKSwhdGhpcy5pc1JlYWR5KXJldHVybiB2b2lkIHRoaXMubG9nTGlzdC5wdXNoKGUpO2lmKHUuaXNTdHJpbmcodFswXSkmJih0WzBdPXRbMF0ucmVwbGFjZShuLFwiXCIpLFwiXCI9PT10WzBdJiZ0LnNoaWZ0KCkpLCFlLm1ldGEpe3ZhciByPXUuZ2V0RGF0ZShlLmRhdGUpO2UubWV0YT1yLmhvdXIrXCI6XCIrci5taW51dGUrXCI6XCIrci5zZWNvbmR9Zm9yKHZhciBsPWZbXCJkZWZhdWx0XCJdLnJlbmRlcihiW1wiZGVmYXVsdFwiXSx7bG9nVHlwZTplLmxvZ1R5cGUsbm9NZXRhOiEhZS5ub01ldGEsbWV0YTplLm1ldGEsc3R5bGU6ZS5zdHlsZXx8XCJcIn0pLHM9ZltcImRlZmF1bHRcIl0ub25lKFwiLnZjLWl0ZW0tY29udGVudFwiLGwpLGQ9MDtkPHQubGVuZ3RoO2QrKyl7dmFyIHY9dm9pZCAwO3RyeXtpZihcIlwiPT09dFtkXSljb250aW51ZTt2PXUuaXNGdW5jdGlvbih0W2RdKT9cIjxzcGFuPiBcIit0W2RdLnRvU3RyaW5nKCkrXCI8L3NwYW4+XCI6dS5pc09iamVjdCh0W2RdKXx8dS5pc0FycmF5KHRbZF0pP3RoaXMuZ2V0Rm9sZGVkTGluZSh0W2RdKTpcIjxzcGFuPiBcIit1Lmh0bWxFbmNvZGUodFtkXSkucmVwbGFjZSgvXFxuL2csXCI8YnIvPlwiKStcIjwvc3Bhbj5cIn1jYXRjaChwKXt2PVwiPHNwYW4+IFtcIitjKHRbZF0pK1wiXTwvc3Bhbj5cIn12JiYoXCJzdHJpbmdcIj09dHlwZW9mIHY/cy5pbnNlcnRBZGphY2VudEhUTUwoXCJiZWZvcmVlbmRcIix2KTpzLmluc2VydEFkamFjZW50RWxlbWVudChcImJlZm9yZWVuZFwiLHYpKX11LmlzT2JqZWN0KGUuY29udGVudCkmJnMuaW5zZXJ0QWRqYWNlbnRFbGVtZW50KFwiYmVmb3JlZW5kXCIsZS5jb250ZW50KSxmW1wiZGVmYXVsdFwiXS5vbmUoXCIudmMtbG9nXCIsdGhpcy4kdGFiYm94KS5pbnNlcnRBZGphY2VudEVsZW1lbnQoXCJiZWZvcmVlbmRcIixsKSx0aGlzLmxvZ051bWJlcisrLHRoaXMubGltaXRNYXhMb2dzKCksdGhpcy5pc0luQm90dG9tJiZ0aGlzLmF1dG9TY3JvbGxUb0JvdHRvbSgpLGUubm9PcmlnaW58fHRoaXMucHJpbnRPcmlnaW5Mb2coZSl9fX0se2tleTpcImdldEZvbGRlZExpbmVcIix2YWx1ZTpmdW5jdGlvbihlLHQpe3ZhciBvPXRoaXM7aWYoIXQpe3ZhciBuPXUuSlNPTlN0cmluZ2lmeShlKSxpPW4uc3Vic3RyKDAsMjYpO3Q9dS5nZXRPYmpOYW1lKGUpLG4ubGVuZ3RoPjI2JiYoaSs9XCIuLi5cIiksdCs9XCIgXCIraX12YXIgYT1mW1wiZGVmYXVsdFwiXS5yZW5kZXIoeVtcImRlZmF1bHRcIl0se291dGVyOnQsbGluZVR5cGU6XCJvYmpcIn0pO3JldHVybiBmW1wiZGVmYXVsdFwiXS5iaW5kKGZbXCJkZWZhdWx0XCJdLm9uZShcIi52Yy1mb2xkLW91dGVyXCIsYSksXCJjbGlja1wiLGZ1bmN0aW9uKHQpe3QucHJldmVudERlZmF1bHQoKSx0LnN0b3BQcm9wYWdhdGlvbigpLGZbXCJkZWZhdWx0XCJdLmhhc0NsYXNzKGEsXCJ2Yy10b2dnbGVcIik/KGZbXCJkZWZhdWx0XCJdLnJlbW92ZUNsYXNzKGEsXCJ2Yy10b2dnbGVcIiksZltcImRlZmF1bHRcIl0ucmVtb3ZlQ2xhc3MoZltcImRlZmF1bHRcIl0ub25lKFwiLnZjLWZvbGQtaW5uZXJcIixhKSxcInZjLXRvZ2dsZVwiKSxmW1wiZGVmYXVsdFwiXS5yZW1vdmVDbGFzcyhmW1wiZGVmYXVsdFwiXS5vbmUoXCIudmMtZm9sZC1vdXRlclwiLGEpLFwidmMtdG9nZ2xlXCIpKTooZltcImRlZmF1bHRcIl0uYWRkQ2xhc3MoYSxcInZjLXRvZ2dsZVwiKSxmW1wiZGVmYXVsdFwiXS5hZGRDbGFzcyhmW1wiZGVmYXVsdFwiXS5vbmUoXCIudmMtZm9sZC1pbm5lclwiLGEpLFwidmMtdG9nZ2xlXCIpLGZbXCJkZWZhdWx0XCJdLmFkZENsYXNzKGZbXCJkZWZhdWx0XCJdLm9uZShcIi52Yy1mb2xkLW91dGVyXCIsYSksXCJ2Yy10b2dnbGVcIikpO3ZhciBuPWZbXCJkZWZhdWx0XCJdLm9uZShcIi52Yy1mb2xkLWlubmVyXCIsYSk7aWYoMD09bi5jaGlsZHJlbi5sZW5ndGgmJmUpe2Zvcih2YXIgaT11LmdldE9iakFsbEtleXMoZSkscj0wO3I8aS5sZW5ndGg7cisrKXt2YXIgbD1lW2lbcl1dLGM9XCJ1bmRlZmluZWRcIixzPVwiXCI7dS5pc1N0cmluZyhsKT8oYz1cInN0cmluZ1wiLGw9J1wiJytsKydcIicpOnUuaXNOdW1iZXIobCk/Yz1cIm51bWJlclwiOnUuaXNCb29sZWFuKGwpP2M9XCJib29sZWFuXCI6dS5pc051bGwobCk/KGM9XCJudWxsXCIsbD1cIm51bGxcIik6dS5pc1VuZGVmaW5lZChsKT8oYz1cInVuZGVmaW5lZFwiLGw9XCJ1bmRlZmluZWRcIik6dS5pc0Z1bmN0aW9uKGwpPyhjPVwiZnVuY3Rpb25cIixsPVwiZnVuY3Rpb24oKVwiKTp1LmlzU3ltYm9sKGwpJiYoYz1cInN5bWJvbFwiKTt2YXIgZD12b2lkIDA7aWYodS5pc0FycmF5KGwpKXt2YXIgdj11LmdldE9iak5hbWUobCkrXCJbXCIrbC5sZW5ndGgrXCJdXCI7ZD1vLmdldEZvbGRlZExpbmUobCxmW1wiZGVmYXVsdFwiXS5yZW5kZXIod1tcImRlZmF1bHRcIl0se2tleTppW3JdLGtleVR5cGU6cyx2YWx1ZTp2LHZhbHVlVHlwZTpcImFycmF5XCJ9LCEwKSl9ZWxzZSBpZih1LmlzT2JqZWN0KGwpKXt2YXIgcD11LmdldE9iak5hbWUobCk7ZD1vLmdldEZvbGRlZExpbmUobCxmW1wiZGVmYXVsdFwiXS5yZW5kZXIod1tcImRlZmF1bHRcIl0se2tleTp1Lmh0bWxFbmNvZGUoaVtyXSksa2V5VHlwZTpzLHZhbHVlOnAsdmFsdWVUeXBlOlwib2JqZWN0XCJ9LCEwKSl9ZWxzZXtlLmhhc093blByb3BlcnR5JiYhZS5oYXNPd25Qcm9wZXJ0eShpW3JdKSYmKHM9XCJwcml2YXRlXCIpO3ZhciBoPXtsaW5lVHlwZTpcImt2XCIsa2V5OnUuaHRtbEVuY29kZShpW3JdKSxrZXlUeXBlOnMsdmFsdWU6dS5odG1sRW5jb2RlKGwpLHZhbHVlVHlwZTpjfTtkPWZbXCJkZWZhdWx0XCJdLnJlbmRlcih5W1wiZGVmYXVsdFwiXSxoKX1uLmluc2VydEFkamFjZW50RWxlbWVudChcImJlZm9yZWVuZFwiLGQpfWlmKHUuaXNPYmplY3QoZSkpe3ZhciBnPWUuX19wcm90b19fLGI9dm9pZCAwO2I9dS5pc09iamVjdChnKT9vLmdldEZvbGRlZExpbmUoZyxmW1wiZGVmYXVsdFwiXS5yZW5kZXIod1tcImRlZmF1bHRcIl0se2tleTpcIl9fcHJvdG9fX1wiLGtleVR5cGU6XCJwcml2YXRlXCIsdmFsdWU6dS5nZXRPYmpOYW1lKGcpLHZhbHVlVHlwZTpcIm9iamVjdFwifSwhMCkpOmZbXCJkZWZhdWx0XCJdLnJlbmRlcih3W1wiZGVmYXVsdFwiXSx7a2V5OlwiX19wcm90b19fXCIsa2V5VHlwZTpcInByaXZhdGVcIix2YWx1ZTpcIm51bGxcIix2YWx1ZVR5cGU6XCJudWxsXCJ9KSxuLmluc2VydEFkamFjZW50RWxlbWVudChcImJlZm9yZWVuZFwiLGIpfX1yZXR1cm4hMX0pLGF9fV0pLHR9KGhbXCJkZWZhdWx0XCJdKTt0W1wiZGVmYXVsdFwiXT1rLGUuZXhwb3J0cz10W1wiZGVmYXVsdFwiXX0sZnVuY3Rpb24oZSx0KXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiBvKGUsdCl7aWYoIShlIGluc3RhbmNlb2YgdCkpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKX1PYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgbj1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoZSx0KXtmb3IodmFyIG89MDtvPHQubGVuZ3RoO28rKyl7dmFyIG49dFtvXTtuLmVudW1lcmFibGU9bi5lbnVtZXJhYmxlfHwhMSxuLmNvbmZpZ3VyYWJsZT0hMCxcInZhbHVlXCJpbiBuJiYobi53cml0YWJsZT0hMCksT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsbi5rZXksbil9fXJldHVybiBmdW5jdGlvbih0LG8sbil7cmV0dXJuIG8mJmUodC5wcm90b3R5cGUsbyksbiYmZSh0LG4pLHR9fSgpLGk9ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKHQpe3ZhciBuPWFyZ3VtZW50cy5sZW5ndGg8PTF8fHZvaWQgMD09PWFyZ3VtZW50c1sxXT9cIm5ld1BsdWdpblwiOmFyZ3VtZW50c1sxXTtvKHRoaXMsZSksdGhpcy5pZD10LHRoaXMubmFtZT1uLHRoaXMuaXNSZWFkeT0hMSx0aGlzLmV2ZW50TGlzdD17fX1yZXR1cm4gbihlLFt7a2V5Olwib25cIix2YWx1ZTpmdW5jdGlvbihlLHQpe3JldHVybiB0aGlzLmV2ZW50TGlzdFtlXT10LHRoaXN9fSx7a2V5OlwidHJpZ2dlclwiLHZhbHVlOmZ1bmN0aW9uKGUsdCl7aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgdGhpcy5ldmVudExpc3RbZV0pdGhpcy5ldmVudExpc3RbZV0uY2FsbCh0aGlzLHQpO2Vsc2V7dmFyIG89XCJvblwiK2UuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkrZS5zbGljZSgxKTtcImZ1bmN0aW9uXCI9PXR5cGVvZiB0aGlzW29dJiZ0aGlzW29dLmNhbGwodGhpcyx0KX1yZXR1cm4gdGhpc319LHtrZXk6XCJpZFwiLGdldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9pZH0sc2V0OmZ1bmN0aW9uKGUpe2lmKCFlKXRocm93XCJQbHVnaW4gSUQgY2Fubm90IGJlIGVtcHR5XCI7dGhpcy5faWQ9ZS50b0xvd2VyQ2FzZSgpfX0se2tleTpcIm5hbWVcIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fbmFtZX0sc2V0OmZ1bmN0aW9uKGUpe2lmKCFlKXRocm93XCJQbHVnaW4gbmFtZSBjYW5ub3QgYmUgZW1wdHlcIjt0aGlzLl9uYW1lPWV9fSx7a2V5OlwidkNvbnNvbGVcIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fdkNvbnNvbGV8fHZvaWQgMH0sc2V0OmZ1bmN0aW9uKGUpe2lmKCFlKXRocm93XCJ2Q29uc29sZSBjYW5ub3QgYmUgZW1wdHlcIjt0aGlzLl92Q29uc29sZT1lfX1dKSxlfSgpO3RbXCJkZWZhdWx0XCJdPWksZS5leHBvcnRzPXRbXCJkZWZhdWx0XCJdfSxmdW5jdGlvbihlLHQpe2UuZXhwb3J0cz0nPGRpdiBjbGFzcz1cInZjLWl0ZW0gdmMtaXRlbS17e2xvZ1R5cGV9fSB7e2lmICghbm9NZXRhKX19dmMtaXRlbS1ub21ldGF7ey9pZn19IHt7c3R5bGV9fVwiPlxcblx0PHNwYW4gY2xhc3M9XCJ2Yy1pdGVtLW1ldGFcIj57e2lmICghbm9NZXRhKX19e3ttZXRhfX17ey9pZn19PC9zcGFuPlxcblx0PGRpdiBjbGFzcz1cInZjLWl0ZW0tY29udGVudFwiPjwvZGl2PlxcbjwvZGl2Pid9LGZ1bmN0aW9uKGUsdCl7ZS5leHBvcnRzPSc8ZGl2IGNsYXNzPVwidmMtZm9sZFwiPlxcbiAge3tpZiAobGluZVR5cGUgPT0gXFwnb2JqXFwnKX19XFxuICAgIDxpIGNsYXNzPVwidmMtZm9sZC1vdXRlclwiPnt7b3V0ZXJ9fTwvaT5cXG4gICAgPGRpdiBjbGFzcz1cInZjLWZvbGQtaW5uZXJcIj48L2Rpdj5cXG4gIHt7ZWxzZSBpZiAobGluZVR5cGUgPT0gXFwndmFsdWVcXCcpfX1cXG4gICAgPGkgY2xhc3M9XCJ2Yy1jb2RlLXt7dmFsdWVUeXBlfX1cIj57e3ZhbHVlfX08L2k+XFxuICB7e2Vsc2UgaWYgKGxpbmVUeXBlID09IFxcJ2t2XFwnKX19XFxuICAgIDxpIGNsYXNzPVwidmMtY29kZS1rZXl7e2lmIChrZXlUeXBlKX19IHZjLWNvZGUte3trZXlUeXBlfX0ta2V5e3svaWZ9fVwiPnt7a2V5fX08L2k+OiA8aSBjbGFzcz1cInZjLWNvZGUte3t2YWx1ZVR5cGV9fVwiPnt7dmFsdWV9fTwvaT5cXG4gIHt7L2lmfX1cXG48L2Rpdj4nfSxmdW5jdGlvbihlLHQpe2UuZXhwb3J0cz0nPHNwYW4+XFxuICA8aSBjbGFzcz1cInZjLWNvZGUta2V5e3tpZiAoa2V5VHlwZSl9fSB2Yy1jb2RlLXt7a2V5VHlwZX19LWtleXt7L2lmfX1cIj57e2tleX19PC9pPjogPGkgY2xhc3M9XCJ2Yy1jb2RlLXt7dmFsdWVUeXBlfX1cIj57e3ZhbHVlfX08L2k+XFxuPC9zcGFuPid9LGZ1bmN0aW9uKGUsdCl7ZS5leHBvcnRzPSc8ZGl2PlxcbiAgPGRpdiBjbGFzcz1cInZjLWxvZ1wiPjwvZGl2PlxcbiAgPGZvcm0gY2xhc3M9XCJ2Yy1jbWRcIj5cXG4gICAgPGJ1dHRvbiBjbGFzcz1cInZjLWNtZC1idG5cIiB0eXBlPVwic3VibWl0XCI+T0s8L2J1dHRvbj5cXG4gICAgPGRpdiBjbGFzcz1cInZjLWNtZC1pbnB1dC13cmFwXCI+XFxuICAgICAgPHRleHRhcmVhIGNsYXNzPVwidmMtY21kLWlucHV0XCIgcGxhY2Vob2xkZXI9XCJjb21tYW5kLi4uXCI+PC90ZXh0YXJlYT5cXG4gICAgPC9kaXY+XFxuICA8L2Zvcm0+XFxuPC9kaXY+J30sZnVuY3Rpb24oZSx0KXtlLmV4cG9ydHM9JzxwcmUgY2xhc3M9XCJ2Yy1pdGVtLWNvZGUgdmMtaXRlbS1jb2RlLXt7dHlwZX19XCI+e3tjb250ZW50fX08L3ByZT4nfSxmdW5jdGlvbihlLHQsbyl7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gbihlKXtyZXR1cm4gZSYmZS5fX2VzTW9kdWxlP2U6e1wiZGVmYXVsdFwiOmV9fWZ1bmN0aW9uIGkoZSl7aWYoZSYmZS5fX2VzTW9kdWxlKXJldHVybiBlO3ZhciB0PXt9O2lmKG51bGwhPWUpZm9yKHZhciBvIGluIGUpT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsbykmJih0W29dPWVbb10pO3JldHVybiB0W1wiZGVmYXVsdFwiXT1lLHR9ZnVuY3Rpb24gYShlLHQpe2lmKCEoZSBpbnN0YW5jZW9mIHQpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIil9ZnVuY3Rpb24gcihlLHQpe2lmKCFlKXRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTtyZXR1cm4hdHx8XCJvYmplY3RcIiE9dHlwZW9mIHQmJlwiZnVuY3Rpb25cIiE9dHlwZW9mIHQ/ZTp0fWZ1bmN0aW9uIGwoZSx0KXtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiB0JiZudWxsIT09dCl0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIit0eXBlb2YgdCk7ZS5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZSh0JiZ0LnByb3RvdHlwZSx7Y29uc3RydWN0b3I6e3ZhbHVlOmUsZW51bWVyYWJsZTohMSx3cml0YWJsZTohMCxjb25maWd1cmFibGU6ITB9fSksdCYmKE9iamVjdC5zZXRQcm90b3R5cGVPZj9PYmplY3Quc2V0UHJvdG90eXBlT2YoZSx0KTplLl9fcHJvdG9fXz10KX1PYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgYz1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoZSx0KXtmb3IodmFyIG89MDtvPHQubGVuZ3RoO28rKyl7dmFyIG49dFtvXTtuLmVudW1lcmFibGU9bi5lbnVtZXJhYmxlfHwhMSxuLmNvbmZpZ3VyYWJsZT0hMCxcInZhbHVlXCJpbiBuJiYobi53cml0YWJsZT0hMCksT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsbi5rZXksbil9fXJldHVybiBmdW5jdGlvbih0LG8sbil7cmV0dXJuIG8mJmUodC5wcm90b3R5cGUsbyksbiYmZSh0LG4pLHR9fSgpLHM9ZnVuY3Rpb24gZyhlLHQsbyl7bnVsbD09PWUmJihlPUZ1bmN0aW9uLnByb3RvdHlwZSk7dmFyIG49T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihlLHQpO2lmKHZvaWQgMD09PW4pe3ZhciBpPU9iamVjdC5nZXRQcm90b3R5cGVPZihlKTtyZXR1cm4gbnVsbD09PWk/dm9pZCAwOmcoaSx0LG8pfWlmKFwidmFsdWVcImluIG4pcmV0dXJuIG4udmFsdWU7dmFyIGE9bi5nZXQ7aWYodm9pZCAwIT09YSlyZXR1cm4gYS5jYWxsKG8pfSxkPW8oNCksdT0oaShkKSxvKDE3KSksdj1uKHUpLGY9bygyNSkscD1uKGYpLGg9ZnVuY3Rpb24oZSl7ZnVuY3Rpb24gdCgpe3ZhciBlO2EodGhpcyx0KTtmb3IodmFyIG89YXJndW1lbnRzLmxlbmd0aCxuPUFycmF5KG8pLGk9MDtvPmk7aSsrKW5baV09YXJndW1lbnRzW2ldO3ZhciBsPXIodGhpcywoZT1PYmplY3QuZ2V0UHJvdG90eXBlT2YodCkpLmNhbGwuYXBwbHkoZSxbdGhpc10uY29uY2F0KG4pKSk7cmV0dXJuIGwudHBsVGFiYm94PXBbXCJkZWZhdWx0XCJdLGwuYWxsb3dVbmZvcm1hdHRlZExvZz0hMSxsfXJldHVybiBsKHQsZSksYyh0LFt7a2V5Olwib25Jbml0XCIsdmFsdWU6ZnVuY3Rpb24oKXtzKE9iamVjdC5nZXRQcm90b3R5cGVPZih0LnByb3RvdHlwZSksXCJvbkluaXRcIix0aGlzKS5jYWxsKHRoaXMpLHRoaXMucHJpbnRTeXN0ZW1JbmZvKCl9fSx7a2V5OlwicHJpbnRTeXN0ZW1JbmZvXCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgZT1uYXZpZ2F0b3IudXNlckFnZW50LHQ9XCJcIixvPWUubWF0Y2goLyhpcG9kKS4qXFxzKFtcXGRfXSspL2kpLG49ZS5tYXRjaCgvKGlwYWQpLipcXHMoW1xcZF9dKykvaSksaT1lLm1hdGNoKC8oaXBob25lKVxcc29zXFxzKFtcXGRfXSspL2kpLGE9ZS5tYXRjaCgvKGFuZHJvaWQpXFxzKFtcXGRcXC5dKykvaSk7dD1cIlVua25vd25cIixhP3Q9XCJBbmRyb2lkIFwiK2FbMl06aT90PVwiaVBob25lLCBpT1MgXCIraVsyXS5yZXBsYWNlKC9fL2csXCIuXCIpOm4/dD1cImlQYWQsIGlPUyBcIituWzJdLnJlcGxhY2UoL18vZyxcIi5cIik6byYmKHQ9XCJpUG9kLCBpT1MgXCIrb1syXS5yZXBsYWNlKC9fL2csXCIuXCIpKTt2YXIgcj10LGw9ZS5tYXRjaCgvTWljcm9NZXNzZW5nZXJcXC8oW1xcZFxcLl0rKS9pKTt0PVwiVW5rbm93blwiLGwmJmxbMV0/KHQ9bFsxXSxyKz1cIiwgV2VDaGF0IFwiK3QsY29uc29sZS5pbmZvKFwiW3N5c3RlbV1cIixcIlN5c3RlbTpcIixyKSk6Y29uc29sZS5pbmZvKFwiW3N5c3RlbV1cIixcIlN5c3RlbTpcIixyKSx0PVwiVW5rbm93blwiLHQ9XCJodHRwczpcIj09bG9jYXRpb24ucHJvdG9jb2w/XCJIVFRQU1wiOlwiaHR0cDpcIj09bG9jYXRpb24ucHJvdG9jb2w/XCJIVFRQXCI6bG9jYXRpb24ucHJvdG9jb2wucmVwbGFjZShcIjpcIixcIlwiKSxyPXQ7dmFyIGM9ZS50b0xvd2VyQ2FzZSgpLm1hdGNoKC8gbmV0dHlwZVxcLyhbXiBdKykvZyk7dD1cIlVua25vd25cIixjJiZjWzBdPyhjPWNbMF0uc3BsaXQoXCIvXCIpLHQ9Y1sxXSxyKz1cIiwgXCIrdCxjb25zb2xlLmluZm8oXCJbc3lzdGVtXVwiLFwiTmV0d29yazpcIixyKSk6Y29uc29sZS5pbmZvKFwiW3N5c3RlbV1cIixcIlByb3RvY29sOlwiLHIpLGNvbnNvbGUuaW5mbyhcIltzeXN0ZW1dXCIsXCJVQTpcIixlKSxzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7dmFyIGU9d2luZG93LnBlcmZvcm1hbmNlfHx3aW5kb3cubXNQZXJmb3JtYW5jZXx8d2luZG93LndlYmtpdFBlcmZvcm1hbmNlO2lmKGUmJmUudGltaW5nKXt2YXIgdD1lLnRpbWluZzt0Lm5hdmlnYXRpb25TdGFydCYmY29uc29sZS5pbmZvKFwiW3N5c3RlbV1cIixcIm5hdmlnYXRpb25TdGFydDpcIix0Lm5hdmlnYXRpb25TdGFydCksdC5uYXZpZ2F0aW9uU3RhcnQmJnQuZG9tYWluTG9va3VwU3RhcnQmJmNvbnNvbGUuaW5mbyhcIltzeXN0ZW1dXCIsXCJuYXZpZ2F0aW9uOlwiLHQuZG9tYWluTG9va3VwU3RhcnQtdC5uYXZpZ2F0aW9uU3RhcnQrXCJtc1wiKSx0LmRvbWFpbkxvb2t1cEVuZCYmdC5kb21haW5Mb29rdXBTdGFydCYmY29uc29sZS5pbmZvKFwiW3N5c3RlbV1cIixcImRuczpcIix0LmRvbWFpbkxvb2t1cEVuZC10LmRvbWFpbkxvb2t1cFN0YXJ0K1wibXNcIiksdC5jb25uZWN0RW5kJiZ0LmNvbm5lY3RTdGFydCYmKHQuY29ubmVjdEVuZCYmdC5zZWN1cmVDb25uZWN0aW9uU3RhcnQ/Y29uc29sZS5pbmZvKFwiW3N5c3RlbV1cIixcInRjcCAoc3NsKTpcIix0LmNvbm5lY3RFbmQtdC5jb25uZWN0U3RhcnQrXCJtcyAoXCIrKHQuY29ubmVjdEVuZC10LnNlY3VyZUNvbm5lY3Rpb25TdGFydCkrXCJtcylcIik6Y29uc29sZS5pbmZvKFwiW3N5c3RlbV1cIixcInRjcDpcIix0LmNvbm5lY3RFbmQtdC5jb25uZWN0U3RhcnQrXCJtc1wiKSksdC5yZXNwb25zZVN0YXJ0JiZ0LnJlcXVlc3RTdGFydCYmY29uc29sZS5pbmZvKFwiW3N5c3RlbV1cIixcInJlcXVlc3Q6XCIsdC5yZXNwb25zZVN0YXJ0LXQucmVxdWVzdFN0YXJ0K1wibXNcIiksdC5yZXNwb25zZUVuZCYmdC5yZXNwb25zZVN0YXJ0JiZjb25zb2xlLmluZm8oXCJbc3lzdGVtXVwiLFwicmVzcG9uc2U6XCIsdC5yZXNwb25zZUVuZC10LnJlc3BvbnNlU3RhcnQrXCJtc1wiKSx0LmRvbUNvbXBsZXRlJiZ0LmRvbUxvYWRpbmcmJih0LmRvbUNvbnRlbnRMb2FkZWRFdmVudFN0YXJ0JiZ0LmRvbUxvYWRpbmc/Y29uc29sZS5pbmZvKFwiW3N5c3RlbV1cIixcImRvbUNvbXBsZXRlIChkb21Mb2FkZWQpOlwiLHQuZG9tQ29tcGxldGUtdC5kb21Mb2FkaW5nK1wibXMgKFwiKyh0LmRvbUNvbnRlbnRMb2FkZWRFdmVudFN0YXJ0LXQuZG9tTG9hZGluZykrXCJtcylcIik6Y29uc29sZS5pbmZvKFwiW3N5c3RlbV1cIixcImRvbUNvbXBsZXRlOlwiLHQuZG9tQ29tcGxldGUtdC5kb21Mb2FkaW5nK1wibXNcIikpLHQubG9hZEV2ZW50RW5kJiZ0LmxvYWRFdmVudFN0YXJ0JiZjb25zb2xlLmluZm8oXCJbc3lzdGVtXVwiLFwibG9hZEV2ZW50OlwiLHQubG9hZEV2ZW50RW5kLXQubG9hZEV2ZW50U3RhcnQrXCJtc1wiKSx0Lm5hdmlnYXRpb25TdGFydCYmdC5sb2FkRXZlbnRFbmQmJmNvbnNvbGUuaW5mbyhcIltzeXN0ZW1dXCIsXCJ0b3RhbCAoRE9NKTpcIix0LmxvYWRFdmVudEVuZC10Lm5hdmlnYXRpb25TdGFydCtcIm1zIChcIisodC5kb21Db21wbGV0ZS10Lm5hdmlnYXRpb25TdGFydCkrXCJtcylcIil9fSwwKX19XSksdH0odltcImRlZmF1bHRcIl0pO3RbXCJkZWZhdWx0XCJdPWgsZS5leHBvcnRzPXRbXCJkZWZhdWx0XCJdfSxmdW5jdGlvbihlLHQpe2UuZXhwb3J0cz0nPGRpdj5cXG4gIDxkaXYgY2xhc3M9XCJ2Yy1sb2dcIj48L2Rpdj5cXG48L2Rpdj4nfSxmdW5jdGlvbihlLHQsbyl7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gbihlKXtpZihlJiZlLl9fZXNNb2R1bGUpcmV0dXJuIGU7dmFyIHQ9e307aWYobnVsbCE9ZSlmb3IodmFyIG8gaW4gZSlPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZSxvKSYmKHRbb109ZVtvXSk7cmV0dXJuIHRbXCJkZWZhdWx0XCJdPWUsdH1mdW5jdGlvbiBpKGUpe3JldHVybiBlJiZlLl9fZXNNb2R1bGU/ZTp7XCJkZWZhdWx0XCI6ZX19ZnVuY3Rpb24gYShlLHQpe2lmKCEoZSBpbnN0YW5jZW9mIHQpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIil9ZnVuY3Rpb24gcihlLHQpe2lmKCFlKXRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTtyZXR1cm4hdHx8XCJvYmplY3RcIiE9dHlwZW9mIHQmJlwiZnVuY3Rpb25cIiE9dHlwZW9mIHQ/ZTp0fWZ1bmN0aW9uIGwoZSx0KXtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiB0JiZudWxsIT09dCl0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIit0eXBlb2YgdCk7ZS5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZSh0JiZ0LnByb3RvdHlwZSx7Y29uc3RydWN0b3I6e3ZhbHVlOmUsZW51bWVyYWJsZTohMSx3cml0YWJsZTohMCxjb25maWd1cmFibGU6ITB9fSksdCYmKE9iamVjdC5zZXRQcm90b3R5cGVPZj9PYmplY3Quc2V0UHJvdG90eXBlT2YoZSx0KTplLl9fcHJvdG9fXz10KX1PYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgYz1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoZSx0KXtmb3IodmFyIG89MDtvPHQubGVuZ3RoO28rKyl7dmFyIG49dFtvXTtuLmVudW1lcmFibGU9bi5lbnVtZXJhYmxlfHwhMSxuLmNvbmZpZ3VyYWJsZT0hMCxcInZhbHVlXCJpbiBuJiYobi53cml0YWJsZT0hMCksT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsbi5rZXksbil9fXJldHVybiBmdW5jdGlvbih0LG8sbil7cmV0dXJuIG8mJmUodC5wcm90b3R5cGUsbyksbiYmZSh0LG4pLHR9fSgpLHM9byg1KSxkPWkocyksdT1vKDQpLHY9bih1KSxmPW8oMTgpLHA9aShmKSxoPW8oMjcpLGc9aShoKSxiPW8oMjgpLG09aShiKSx5PW8oMjkpLF89aSh5KSx3PWZ1bmN0aW9uKGUpe2Z1bmN0aW9uIHQoKXt2YXIgZTthKHRoaXMsdCk7Zm9yKHZhciBvPWFyZ3VtZW50cy5sZW5ndGgsbj1BcnJheShvKSxpPTA7bz5pO2krKyluW2ldPWFyZ3VtZW50c1tpXTt2YXIgbD1yKHRoaXMsKGU9T2JqZWN0LmdldFByb3RvdHlwZU9mKHQpKS5jYWxsLmFwcGx5KGUsW3RoaXNdLmNvbmNhdChuKSkpO3JldHVybiBsLiR0YWJib3g9ZFtcImRlZmF1bHRcIl0ucmVuZGVyKGdbXCJkZWZhdWx0XCJdLHt9KSxsLiRoZWFkZXI9bnVsbCxsLnJlcUxpc3Q9e30sbC5kb21MaXN0PXt9LGwuaXNSZWFkeT0hMSxsLmlzU2hvdz0hMSxsLmlzSW5Cb3R0b209ITAsbC5fb3Blbj12b2lkIDAsbC5fc2VuZD12b2lkIDAsbC5tb2NrQWpheCgpLGx9cmV0dXJuIGwodCxlKSxjKHQsW3trZXk6XCJvblJlbmRlclRhYlwiLHZhbHVlOmZ1bmN0aW9uKGUpe2UodGhpcy4kdGFiYm94KX19LHtrZXk6XCJvbkFkZFRvb2xcIix2YWx1ZTpmdW5jdGlvbihlKXt2YXIgdD10aGlzLG89W3tuYW1lOlwiQ2xlYXJcIixnbG9iYWw6ITEsb25DbGljazpmdW5jdGlvbihlKXt0LmNsZWFyTG9nKCl9fV07ZShvKX19LHtrZXk6XCJvblJlYWR5XCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgZT10aGlzO2UuaXNSZWFkeT0hMCx0aGlzLnJlbmRlckhlYWRlcigpLGRbXCJkZWZhdWx0XCJdLmRlbGVnYXRlKGRbXCJkZWZhdWx0XCJdLm9uZShcIi52Yy1sb2dcIix0aGlzLiR0YWJib3gpLFwiY2xpY2tcIixcIi52Yy1ncm91cC1wcmV2aWV3XCIsZnVuY3Rpb24odCl7dmFyIG89dGhpcy5kYXRhc2V0LnJlcWlkLG49dGhpcy5wYXJlbnROb2RlO2RbXCJkZWZhdWx0XCJdLmhhc0NsYXNzKG4sXCJ2Yy1hY3RpdmVkXCIpPyhkW1wiZGVmYXVsdFwiXS5yZW1vdmVDbGFzcyhuLFwidmMtYWN0aXZlZFwiKSxlLnVwZGF0ZVJlcXVlc3Qobyx7YWN0aXZlZDohMX0pKTooZFtcImRlZmF1bHRcIl0uYWRkQ2xhc3MobixcInZjLWFjdGl2ZWRcIiksZS51cGRhdGVSZXF1ZXN0KG8se2FjdGl2ZWQ6ITB9KSksdC5wcmV2ZW50RGVmYXVsdCgpfSk7dmFyIHQ9ZFtcImRlZmF1bHRcIl0ub25lKFwiLnZjLWNvbnRlbnRcIik7ZFtcImRlZmF1bHRcIl0uYmluZCh0LFwic2Nyb2xsXCIsZnVuY3Rpb24obyl7ZS5pc1Nob3cmJih0LnNjcm9sbFRvcCt0Lm9mZnNldEhlaWdodD49dC5zY3JvbGxIZWlnaHQ/ZS5pc0luQm90dG9tPSEwOmUuaXNJbkJvdHRvbT0hMSl9KTtmb3IodmFyIG8gaW4gZS5yZXFMaXN0KWUudXBkYXRlUmVxdWVzdChvLHt9KX19LHtrZXk6XCJvblJlbW92ZVwiLHZhbHVlOmZ1bmN0aW9uKCl7d2luZG93LlhNTEh0dHBSZXF1ZXN0JiYod2luZG93LlhNTEh0dHBSZXF1ZXN0LnByb3RvdHlwZS5vcGVuPXRoaXMuX29wZW4sd2luZG93LlhNTEh0dHBSZXF1ZXN0LnByb3RvdHlwZS5zZW5kPXRoaXMuX3NlbmQsdGhpcy5fb3Blbj12b2lkIDAsdGhpcy5fc2VuZD12b2lkIDApfX0se2tleTpcIm9uU2hvd1wiLHZhbHVlOmZ1bmN0aW9uKCl7dGhpcy5pc1Nob3c9ITAsMT09dGhpcy5pc0luQm90dG9tJiZ0aGlzLnNjcm9sbFRvQm90dG9tKCl9fSx7a2V5Olwib25IaWRlXCIsdmFsdWU6ZnVuY3Rpb24oKXt0aGlzLmlzU2hvdz0hMX19LHtrZXk6XCJvblNob3dDb25zb2xlXCIsdmFsdWU6ZnVuY3Rpb24oKXsxPT10aGlzLmlzSW5Cb3R0b20mJnRoaXMuc2Nyb2xsVG9Cb3R0b20oKX19LHtrZXk6XCJzY3JvbGxUb0JvdHRvbVwiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIGU9ZFtcImRlZmF1bHRcIl0ub25lKFwiLnZjLWNvbnRlbnRcIik7ZS5zY3JvbGxUb3A9ZS5zY3JvbGxIZWlnaHQtZS5vZmZzZXRIZWlnaHR9fSx7a2V5OlwiY2xlYXJMb2dcIix2YWx1ZTpmdW5jdGlvbigpe3RoaXMucmVxTGlzdD17fTtmb3IodmFyIGUgaW4gdGhpcy5kb21MaXN0KXRoaXMuZG9tTGlzdFtlXS5yZW1vdmUoKSx0aGlzLmRvbUxpc3RbZV09dm9pZCAwO3RoaXMuZG9tTGlzdD17fSx0aGlzLnJlbmRlckhlYWRlcigpfX0se2tleTpcInJlbmRlckhlYWRlclwiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIGU9T2JqZWN0LmtleXModGhpcy5yZXFMaXN0KS5sZW5ndGgsdD1kW1wiZGVmYXVsdFwiXS5yZW5kZXIobVtcImRlZmF1bHRcIl0se2NvdW50OmV9KSxvPWRbXCJkZWZhdWx0XCJdLm9uZShcIi52Yy1sb2dcIix0aGlzLiR0YWJib3gpO3RoaXMuJGhlYWRlcj90aGlzLiRoZWFkZXIucGFyZW50Tm9kZS5yZXBsYWNlQ2hpbGQodCx0aGlzLiRoZWFkZXIpOm8ucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUodCxvKSx0aGlzLiRoZWFkZXI9dH19LHtrZXk6XCJ1cGRhdGVSZXF1ZXN0XCIsdmFsdWU6ZnVuY3Rpb24oZSx0KXt2YXIgbz1PYmplY3Qua2V5cyh0aGlzLnJlcUxpc3QpLmxlbmd0aCxuPXRoaXMucmVxTGlzdFtlXXx8e307Zm9yKHZhciBpIGluIHQpbltpXT10W2ldO2lmKHRoaXMucmVxTGlzdFtlXT1uLHRoaXMuaXNSZWFkeSl7dmFyIGE9e2lkOmUsdXJsOm4udXJsLHN0YXR1czpuLnN0YXR1cyxtZXRob2Q6bi5tZXRob2R8fFwiLVwiLGNvc3RUaW1lOm4uY29zdFRpbWU+MD9uLmNvc3RUaW1lK1wibXNcIjpcIi1cIixoZWFkZXI6bi5oZWFkZXJ8fG51bGwsZ2V0RGF0YTpuLmdldERhdGF8fG51bGwscG9zdERhdGE6bi5wb3N0RGF0YXx8bnVsbCxyZXNwb25zZTpudWxsLGFjdGl2ZWQ6ISFuLmFjdGl2ZWR9O3N3aXRjaChuLnJlc3BvbnNlVHlwZSl7Y2FzZVwiXCI6Y2FzZVwidGV4dFwiOmlmKHYuaXNTdHJpbmcobi5yZXNwb25zZSkpdHJ5e2EucmVzcG9uc2U9SlNPTi5wYXJzZShuLnJlc3BvbnNlKSxhLnJlc3BvbnNlPUpTT04uc3RyaW5naWZ5KGEucmVzcG9uc2UsbnVsbCwxKSxhLnJlc3BvbnNlPXYuaHRtbEVuY29kZShhLnJlc3BvbnNlKX1jYXRjaChyKXthLnJlc3BvbnNlPXYuaHRtbEVuY29kZShuLnJlc3BvbnNlKX1lbHNlXCJ1bmRlZmluZWRcIiE9dHlwZW9mIG4ucmVzcG9uc2UmJihhLnJlc3BvbnNlPU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChuLnJlc3BvbnNlKSk7YnJlYWs7Y2FzZVwianNvblwiOlwidW5kZWZpbmVkXCIhPXR5cGVvZiBuLnJlc3BvbnNlJiYoYS5yZXNwb25zZT1KU09OLnN0cmluZ2lmeShuLnJlc3BvbnNlLG51bGwsMSkpO2JyZWFrO2Nhc2VcImJsb2JcIjpjYXNlXCJkb2N1bWVudFwiOmNhc2VcImFycmF5YnVmZmVyXCI6ZGVmYXVsdDpcInVuZGVmaW5lZFwiIT10eXBlb2Ygbi5yZXNwb25zZSYmKGEucmVzcG9uc2U9T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG4ucmVzcG9uc2UpKX0wPT1uLnJlYWR5U3RhdGV8fDE9PW4ucmVhZHlTdGF0ZT9hLnN0YXR1cz1cIlBlbmRpbmdcIjoyPT1uLnJlYWR5U3RhdGV8fDM9PW4ucmVhZHlTdGF0ZT9hLnN0YXR1cz1cIkxvYWRpbmdcIjo0PT1uLnJlYWR5U3RhdGV8fChhLnN0YXR1cz1cIlVua25vd25cIik7dmFyIGw9ZFtcImRlZmF1bHRcIl0ucmVuZGVyKF9bXCJkZWZhdWx0XCJdLGEpLGM9dGhpcy5kb21MaXN0W2VdO24uc3RhdHVzPj00MDAmJmRbXCJkZWZhdWx0XCJdLmFkZENsYXNzKGRbXCJkZWZhdWx0XCJdLm9uZShcIi52Yy1ncm91cC1wcmV2aWV3XCIsbCksXCJ2Yy10YWJsZS1yb3ctZXJyb3JcIiksYz9jLnBhcmVudE5vZGUucmVwbGFjZUNoaWxkKGwsYyk6ZFtcImRlZmF1bHRcIl0ub25lKFwiLnZjLWxvZ1wiLHRoaXMuJHRhYmJveCkuaW5zZXJ0QWRqYWNlbnRFbGVtZW50KFwiYmVmb3JlZW5kXCIsbCksdGhpcy5kb21MaXN0W2VdPWw7dmFyIHM9T2JqZWN0LmtleXModGhpcy5yZXFMaXN0KS5sZW5ndGg7cyE9byYmdGhpcy5yZW5kZXJIZWFkZXIoKSx0aGlzLmlzSW5Cb3R0b20mJnRoaXMuc2Nyb2xsVG9Cb3R0b20oKX19fSx7a2V5OlwibW9ja0FqYXhcIix2YWx1ZTpmdW5jdGlvbigpe3ZhciBlPXdpbmRvdy5YTUxIdHRwUmVxdWVzdDtpZihlKXt2YXIgdD10aGlzLG89d2luZG93LlhNTEh0dHBSZXF1ZXN0LnByb3RvdHlwZS5vcGVuLG49d2luZG93LlhNTEh0dHBSZXF1ZXN0LnByb3RvdHlwZS5zZW5kO3QuX29wZW49byx0Ll9zZW5kPW4sd2luZG93LlhNTEh0dHBSZXF1ZXN0LnByb3RvdHlwZS5vcGVuPWZ1bmN0aW9uKCl7dmFyIGU9dGhpcyxuPVtdLnNsaWNlLmNhbGwoYXJndW1lbnRzKSxpPW5bMF0sYT1uWzFdLHI9dC5nZXRVbmlxdWVJRCgpLGw9bnVsbDtlLl9yZXF1ZXN0SUQ9cixlLl9tZXRob2Q9aSxlLl91cmw9YTt2YXIgYz1lLm9ucmVhZHlzdGF0ZWNoYW5nZXx8ZnVuY3Rpb24oKXt9LHM9ZnVuY3Rpb24oKXt2YXIgbz10LnJlcUxpc3Rbcl18fHt9O2lmKG8ucmVhZHlTdGF0ZT1lLnJlYWR5U3RhdGUsby5zdGF0dXM9MCxlLnJlYWR5U3RhdGU+MSYmKG8uc3RhdHVzPWUuc3RhdHVzKSxvLnJlc3BvbnNlVHlwZT1lLnJlc3BvbnNlVHlwZSwwPT1lLnJlYWR5U3RhdGUpby5zdGFydFRpbWV8fChvLnN0YXJ0VGltZT0rbmV3IERhdGUpO2Vsc2UgaWYoMT09ZS5yZWFkeVN0YXRlKW8uc3RhcnRUaW1lfHwoby5zdGFydFRpbWU9K25ldyBEYXRlKTtlbHNlIGlmKDI9PWUucmVhZHlTdGF0ZSl7by5oZWFkZXI9e307Zm9yKHZhciBuPWUuZ2V0QWxsUmVzcG9uc2VIZWFkZXJzKCl8fFwiXCIsaT1uLnNwbGl0KFwiXFxuXCIpLGE9MDthPGkubGVuZ3RoO2ErKyl7dmFyIHM9aVthXTtpZihzKXt2YXIgZD1zLnNwbGl0KFwiOiBcIiksdT1kWzBdLHY9ZC5zbGljZSgxKS5qb2luKFwiOiBcIik7by5oZWFkZXJbdV09dn19fWVsc2UgMz09ZS5yZWFkeVN0YXRlfHwoND09ZS5yZWFkeVN0YXRlPyhjbGVhckludGVydmFsKGwpLG8uZW5kVGltZT0rbmV3IERhdGUsby5jb3N0VGltZT1vLmVuZFRpbWUtKG8uc3RhcnRUaW1lfHxvLmVuZFRpbWUpLG8ucmVzcG9uc2U9ZS5yZXNwb25zZSk6Y2xlYXJJbnRlcnZhbChsKSk7cmV0dXJuIGUuX25vVkNvbnNvbGV8fHQudXBkYXRlUmVxdWVzdChyLG8pLGMuYXBwbHkoZSxhcmd1bWVudHMpfTtlLm9ucmVhZHlzdGF0ZWNoYW5nZT1zO3ZhciBkPS0xO3JldHVybiBsPXNldEludGVydmFsKGZ1bmN0aW9uKCl7ZCE9ZS5yZWFkeVN0YXRlJiYoZD1lLnJlYWR5U3RhdGUscy5jYWxsKGUpKX0sMTApLG8uYXBwbHkoZSxuKX0sd2luZG93LlhNTEh0dHBSZXF1ZXN0LnByb3RvdHlwZS5zZW5kPWZ1bmN0aW9uKCl7dmFyIGU9dGhpcyxvPVtdLnNsaWNlLmNhbGwoYXJndW1lbnRzKSxpPW9bMF0sYT10LnJlcUxpc3RbZS5fcmVxdWVzdElEXXx8e307YS5tZXRob2Q9ZS5fbWV0aG9kLnRvVXBwZXJDYXNlKCk7dmFyIHI9ZS5fdXJsLnNwbGl0KFwiP1wiKTtpZihhLnVybD1yLnNoaWZ0KCksci5sZW5ndGg+MCl7YS5nZXREYXRhPXt9LHI9ci5qb2luKFwiP1wiKSxyPXIuc3BsaXQoXCImXCIpO3ZhciBsPSEwLGM9ITEscz12b2lkIDA7dHJ5e2Zvcih2YXIgZCx1PXJbU3ltYm9sLml0ZXJhdG9yXSgpOyEobD0oZD11Lm5leHQoKSkuZG9uZSk7bD0hMCl7dmFyIGY9ZC52YWx1ZTtmPWYuc3BsaXQoXCI9XCIpLGEuZ2V0RGF0YVtmWzBdXT1mWzFdfX1jYXRjaChwKXtjPSEwLHM9cH1maW5hbGx5e3RyeXshbCYmdVtcInJldHVyblwiXSYmdVtcInJldHVyblwiXSgpfWZpbmFsbHl7aWYoYyl0aHJvdyBzfX19aWYoXCJQT1NUXCI9PWEubWV0aG9kKWlmKHYuaXNTdHJpbmcoaSkpe3ZhciBoPWkuc3BsaXQoXCImXCIpO2EucG9zdERhdGE9e307dmFyIGc9ITAsYj0hMSxtPXZvaWQgMDt0cnl7Zm9yKHZhciB5LF89aFtTeW1ib2wuaXRlcmF0b3JdKCk7IShnPSh5PV8ubmV4dCgpKS5kb25lKTtnPSEwKXt2YXIgdz15LnZhbHVlO3c9dy5zcGxpdChcIj1cIiksYS5wb3N0RGF0YVt3WzBdXT13WzFdfX1jYXRjaChwKXtiPSEwLG09cH1maW5hbGx5e3RyeXshZyYmX1tcInJldHVyblwiXSYmX1tcInJldHVyblwiXSgpfWZpbmFsbHl7aWYoYil0aHJvdyBtfX19ZWxzZSB2LmlzUGxhaW5PYmplY3QoaSkmJihhLnBvc3REYXRhPWkpO3JldHVybiBlLl9ub1ZDb25zb2xlfHx0LnVwZGF0ZVJlcXVlc3QoZS5fcmVxdWVzdElELGEpLG4uYXBwbHkoZSxvKX19fX0se2tleTpcImdldFVuaXF1ZUlEXCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgZT1cInh4eHh4eHh4LXh4eHgtNHh4eC15eHh4LXh4eHh4eHh4eHh4eFwiLnJlcGxhY2UoL1t4eV0vZyxmdW5jdGlvbihlKXt2YXIgdD0xNipNYXRoLnJhbmRvbSgpfDAsbz1cInhcIj09ZT90OjMmdHw4O3JldHVybiBvLnRvU3RyaW5nKDE2KX0pO3JldHVybiBlfX1dKSx0fShwW1wiZGVmYXVsdFwiXSk7dFtcImRlZmF1bHRcIl09dyxlLmV4cG9ydHM9dFtcImRlZmF1bHRcIl19LGZ1bmN0aW9uKGUsdCl7ZS5leHBvcnRzPSc8ZGl2IGNsYXNzPVwidmMtdGFibGVcIj5cXG4gIDxkaXYgY2xhc3M9XCJ2Yy1sb2dcIj48L2Rpdj5cXG48L2Rpdj4nfSxmdW5jdGlvbihlLHQpe2UuZXhwb3J0cz0nPGRsIGNsYXNzPVwidmMtdGFibGUtcm93XCI+XFxuICA8ZGQgY2xhc3M9XCJ2Yy10YWJsZS1jb2wgdmMtdGFibGUtY29sLTRcIj5OYW1lIHt7aWYgKGNvdW50ID4gMCl9fSh7e2NvdW50fX0pe3svaWZ9fTwvZGQ+XFxuICA8ZGQgY2xhc3M9XCJ2Yy10YWJsZS1jb2xcIj5NZXRob2Q8L2RkPlxcbiAgPGRkIGNsYXNzPVwidmMtdGFibGUtY29sXCI+U3RhdHVzPC9kZD5cXG4gIDxkZCBjbGFzcz1cInZjLXRhYmxlLWNvbFwiPlRpbWU8L2RkPlxcbjwvZGw+J30sZnVuY3Rpb24oZSx0KXtlLmV4cG9ydHM9JzxkaXYgY2xhc3M9XCJ2Yy1ncm91cCB7e2FjdGl2ZWQgPyBcXCd2Yy1hY3RpdmVkXFwnIDogXFwnXFwnfX1cIj5cXG4gIDxkbCBjbGFzcz1cInZjLXRhYmxlLXJvdyB2Yy1ncm91cC1wcmV2aWV3XCIgZGF0YS1yZXFpZD1cInt7aWR9fVwiPlxcbiAgICA8ZGQgY2xhc3M9XCJ2Yy10YWJsZS1jb2wgdmMtdGFibGUtY29sLTRcIj57e3VybH19PC9kZD5cXG4gICAgPGRkIGNsYXNzPVwidmMtdGFibGUtY29sXCI+e3ttZXRob2R9fTwvZGQ+XFxuICAgIDxkZCBjbGFzcz1cInZjLXRhYmxlLWNvbFwiPnt7c3RhdHVzfX08L2RkPlxcbiAgICA8ZGQgY2xhc3M9XCJ2Yy10YWJsZS1jb2xcIj57e2Nvc3RUaW1lfX08L2RkPlxcbiAgPC9kbD5cXG4gIDxkaXYgY2xhc3M9XCJ2Yy1ncm91cC1kZXRhaWxcIj5cXG4gICAge3tpZiAoaGVhZGVyICE9PSBudWxsKX19XFxuICAgIDxkaXY+XFxuICAgICAgPGRsIGNsYXNzPVwidmMtdGFibGUtcm93IHZjLWxlZnQtYm9yZGVyXCI+XFxuICAgICAgICA8ZHQgY2xhc3M9XCJ2Yy10YWJsZS1jb2wgdmMtdGFibGUtY29sLXRpdGxlXCI+SGVhZGVyczwvZHQ+XFxuICAgICAgPC9kbD5cXG4gICAgICB7e2ZvciAodmFyIGtleSBpbiBoZWFkZXIpfX1cXG4gICAgICA8ZGl2IGNsYXNzPVwidmMtdGFibGUtcm93IHZjLWxlZnQtYm9yZGVyIHZjLXNtYWxsXCI+XFxuICAgICAgICA8ZGl2IGNsYXNzPVwidmMtdGFibGUtY29sIHZjLXRhYmxlLWNvbC0yXCI+e3trZXl9fTwvZGl2PlxcbiAgICAgICAgPGRpdiBjbGFzcz1cInZjLXRhYmxlLWNvbCB2Yy10YWJsZS1jb2wtNCB2Yy1tYXgtaGVpZ2h0LWxpbmVcIj57e2hlYWRlcltrZXldfX08L2Rpdj5cXG4gICAgICA8L2Rpdj5cXG4gICAgICB7ey9mb3J9fVxcbiAgICA8L2Rpdj5cXG4gICAge3svaWZ9fVxcbiAgICB7e2lmIChnZXREYXRhICE9PSBudWxsKX19XFxuICAgIDxkaXY+XFxuICAgICAgPGRsIGNsYXNzPVwidmMtdGFibGUtcm93IHZjLWxlZnQtYm9yZGVyXCI+XFxuICAgICAgICA8ZHQgY2xhc3M9XCJ2Yy10YWJsZS1jb2wgdmMtdGFibGUtY29sLXRpdGxlXCI+UXVlcnkgU3RyaW5nIFBhcmFtZXRlcnM8L2R0PlxcbiAgICAgIDwvZGw+XFxuICAgICAge3tmb3IgKHZhciBrZXkgaW4gZ2V0RGF0YSl9fVxcbiAgICAgIDxkaXYgY2xhc3M9XCJ2Yy10YWJsZS1yb3cgdmMtbGVmdC1ib3JkZXIgdmMtc21hbGxcIj5cXG4gICAgICAgIDxkaXYgY2xhc3M9XCJ2Yy10YWJsZS1jb2wgdmMtdGFibGUtY29sLTJcIj57e2tleX19PC9kaXY+XFxuICAgICAgICA8ZGl2IGNsYXNzPVwidmMtdGFibGUtY29sIHZjLXRhYmxlLWNvbC00IHZjLW1heC1oZWlnaHQtbGluZVwiPnt7Z2V0RGF0YVtrZXldfX08L2Rpdj5cXG4gICAgICA8L2Rpdj5cXG4gICAgICB7ey9mb3J9fVxcbiAgICA8L2Rpdj5cXG4gICAge3svaWZ9fVxcbiAgICB7e2lmIChwb3N0RGF0YSAhPT0gbnVsbCl9fVxcbiAgICA8ZGl2PlxcbiAgICAgIDxkbCBjbGFzcz1cInZjLXRhYmxlLXJvdyB2Yy1sZWZ0LWJvcmRlclwiPlxcbiAgICAgICAgPGR0IGNsYXNzPVwidmMtdGFibGUtY29sIHZjLXRhYmxlLWNvbC10aXRsZVwiPkZvcm0gRGF0YTwvZHQ+XFxuICAgICAgPC9kbD5cXG4gICAgICB7e2ZvciAodmFyIGtleSBpbiBwb3N0RGF0YSl9fVxcbiAgICAgIDxkaXYgY2xhc3M9XCJ2Yy10YWJsZS1yb3cgdmMtbGVmdC1ib3JkZXIgdmMtc21hbGxcIj5cXG4gICAgICAgIDxkaXYgY2xhc3M9XCJ2Yy10YWJsZS1jb2wgdmMtdGFibGUtY29sLTJcIj57e2tleX19PC9kaXY+XFxuICAgICAgICA8ZGl2IGNsYXNzPVwidmMtdGFibGUtY29sIHZjLXRhYmxlLWNvbC00IHZjLW1heC1oZWlnaHQtbGluZVwiPnt7cG9zdERhdGFba2V5XX19PC9kaXY+XFxuICAgICAgPC9kaXY+XFxuICAgICAge3svZm9yfX1cXG4gICAgPC9kaXY+XFxuICAgIHt7L2lmfX1cXG4gICAgPGRpdj5cXG4gICAgICA8ZGwgY2xhc3M9XCJ2Yy10YWJsZS1yb3cgdmMtbGVmdC1ib3JkZXJcIj5cXG4gICAgICAgIDxkdCBjbGFzcz1cInZjLXRhYmxlLWNvbCB2Yy10YWJsZS1jb2wtdGl0bGVcIj5SZXNwb25zZTwvZHQ+XFxuICAgICAgPC9kbD5cXG4gICAgICA8ZGl2IGNsYXNzPVwidmMtdGFibGUtcm93IHZjLWxlZnQtYm9yZGVyIHZjLXNtYWxsXCI+XFxuICAgICAgICA8cHJlIGNsYXNzPVwidmMtdGFibGUtY29sIHZjLW1heC1oZWlnaHQgdmMtbWluLWhlaWdodFwiPnt7cmVzcG9uc2UgfHwgXFwnXFwnfX08L3ByZT5cXG4gICAgICA8L2Rpdj5cXG4gICAgPC9kaXY+XFxuICA8L2Rpdj5cXG48L2Rpdj4nfSxmdW5jdGlvbihlLHQsbyl7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gbihlKXtpZihlJiZlLl9fZXNNb2R1bGUpcmV0dXJuIGU7dmFyIHQ9e307aWYobnVsbCE9ZSlmb3IodmFyIG8gaW4gZSlPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZSxvKSYmKHRbb109ZVtvXSk7cmV0dXJuIHRbXCJkZWZhdWx0XCJdPWUsdH1mdW5jdGlvbiBpKGUpe3JldHVybiBlJiZlLl9fZXNNb2R1bGU/ZTp7XCJkZWZhdWx0XCI6ZX19ZnVuY3Rpb24gYShlLHQpe2lmKCEoZSBpbnN0YW5jZW9mIHQpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7XHJcbn1mdW5jdGlvbiByKGUsdCl7aWYoIWUpdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpO3JldHVybiF0fHxcIm9iamVjdFwiIT10eXBlb2YgdCYmXCJmdW5jdGlvblwiIT10eXBlb2YgdD9lOnR9ZnVuY3Rpb24gbChlLHQpe2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIHQmJm51bGwhPT10KXRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiK3R5cGVvZiB0KTtlLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKHQmJnQucHJvdG90eXBlLHtjb25zdHJ1Y3Rvcjp7dmFsdWU6ZSxlbnVtZXJhYmxlOiExLHdyaXRhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH19KSx0JiYoT2JqZWN0LnNldFByb3RvdHlwZU9mP09iamVjdC5zZXRQcm90b3R5cGVPZihlLHQpOmUuX19wcm90b19fPXQpfU9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBjPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZShlLHQpe2Zvcih2YXIgbz0wO288dC5sZW5ndGg7bysrKXt2YXIgbj10W29dO24uZW51bWVyYWJsZT1uLmVudW1lcmFibGV8fCExLG4uY29uZmlndXJhYmxlPSEwLFwidmFsdWVcImluIG4mJihuLndyaXRhYmxlPSEwKSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxuLmtleSxuKX19cmV0dXJuIGZ1bmN0aW9uKHQsbyxuKXtyZXR1cm4gbyYmZSh0LnByb3RvdHlwZSxvKSxuJiZlKHQsbiksdH19KCk7bygzMSk7dmFyIHM9bygxOCksZD1pKHMpLHU9bygzMyksdj1pKHUpLGY9bygzNCkscD1pKGYpLGg9byg0KSxnPShuKGgpLG8oNSkpLGI9aShnKSxtPWZ1bmN0aW9uKGUpe2Z1bmN0aW9uIHQoKXt2YXIgZTthKHRoaXMsdCk7Zm9yKHZhciBvPWFyZ3VtZW50cy5sZW5ndGgsbj1BcnJheShvKSxpPTA7bz5pO2krKyluW2ldPWFyZ3VtZW50c1tpXTt2YXIgbD1yKHRoaXMsKGU9T2JqZWN0LmdldFByb3RvdHlwZU9mKHQpKS5jYWxsLmFwcGx5KGUsW3RoaXNdLmNvbmNhdChuKSkpLGM9bDtjLmlzSW5pdGVkPSExLGMubm9kZT17fSxjLiR0YWJib3g9YltcImRlZmF1bHRcIl0ucmVuZGVyKHZbXCJkZWZhdWx0XCJdLHt9KSxjLm5vZGVzPVtdLGMuYWN0aXZlZEVsZW09e307dmFyIHM9d2luZG93Lk11dGF0aW9uT2JzZXJ2ZXJ8fHdpbmRvdy5XZWJLaXRNdXRhdGlvbk9ic2VydmVyfHx3aW5kb3cuTW96TXV0YXRpb25PYnNlcnZlcjtyZXR1cm4gYy5vYnNlcnZlcj1uZXcgcyhmdW5jdGlvbihlKXtmb3IodmFyIHQ9MDt0PGUubGVuZ3RoO3QrKyl7dmFyIG89ZVt0XTtjLl9pc0luVkNvbnNvbGUoby50YXJnZXQpfHxjLm9uTXV0YXRpb24obyl9fSksbH1yZXR1cm4gbCh0LGUpLGModCxbe2tleTpcIm9uUmVuZGVyVGFiXCIsdmFsdWU6ZnVuY3Rpb24oZSl7ZSh0aGlzLiR0YWJib3gpfX0se2tleTpcIm9uQWRkVG9vbFwiLHZhbHVlOmZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMsbz1be25hbWU6XCJFeHBlbmRcIixnbG9iYWw6ITEsb25DbGljazpmdW5jdGlvbihlKXtpZih0LmFjdGl2ZWRFbGVtKWlmKGJbXCJkZWZhdWx0XCJdLmhhc0NsYXNzKHQuYWN0aXZlZEVsZW0sXCJ2Yy10b2dnbGVcIikpZm9yKHZhciBvPTA7bzx0LmFjdGl2ZWRFbGVtLmNoaWxkTm9kZXMubGVuZ3RoO28rKyl7dmFyIG49dC5hY3RpdmVkRWxlbS5jaGlsZE5vZGVzW29dO2lmKGJbXCJkZWZhdWx0XCJdLmhhc0NsYXNzKG4sXCJ2Y2VsbS1sXCIpJiYhYltcImRlZmF1bHRcIl0uaGFzQ2xhc3MobixcInZjZWxtLW5vY1wiKSYmIWJbXCJkZWZhdWx0XCJdLmhhc0NsYXNzKG4sXCJ2Yy10b2dnbGVcIikpe2JbXCJkZWZhdWx0XCJdLm9uZShcIi52Y2VsbS1ub2RlXCIsbikuY2xpY2soKTticmVha319ZWxzZSBiW1wiZGVmYXVsdFwiXS5vbmUoXCIudmNlbG0tbm9kZVwiLHQuYWN0aXZlZEVsZW0pLmNsaWNrKCl9fSx7bmFtZTpcIkNvbGxhcHNlXCIsZ2xvYmFsOiExLG9uQ2xpY2s6ZnVuY3Rpb24oZSl7dC5hY3RpdmVkRWxlbSYmKGJbXCJkZWZhdWx0XCJdLmhhc0NsYXNzKHQuYWN0aXZlZEVsZW0sXCJ2Yy10b2dnbGVcIik/YltcImRlZmF1bHRcIl0ub25lKFwiLnZjZWxtLW5vZGVcIix0LmFjdGl2ZWRFbGVtKS5jbGljaygpOnQuYWN0aXZlZEVsZW0ucGFyZW50Tm9kZSYmYltcImRlZmF1bHRcIl0uaGFzQ2xhc3ModC5hY3RpdmVkRWxlbS5wYXJlbnROb2RlLFwidmNlbG0tbFwiKSYmYltcImRlZmF1bHRcIl0ub25lKFwiLnZjZWxtLW5vZGVcIix0LmFjdGl2ZWRFbGVtLnBhcmVudE5vZGUpLmNsaWNrKCkpfX1dO2Uobyl9fSx7a2V5Olwib25TaG93XCIsdmFsdWU6ZnVuY3Rpb24oKXtpZighdGhpcy5pc0luaXRlZCl7dGhpcy5pc0luaXRlZD0hMCx0aGlzLm5vZGU9dGhpcy5nZXROb2RlKGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCk7dmFyIGU9dGhpcy5yZW5kZXJWaWV3KHRoaXMubm9kZSxiW1wiZGVmYXVsdFwiXS5vbmUoXCIudmMtbG9nXCIsdGhpcy4kdGFiYm94KSksdD1iW1wiZGVmYXVsdFwiXS5vbmUoXCIudmNlbG0tbm9kZVwiLGUpO3QmJnQuY2xpY2soKTt2YXIgbz17YXR0cmlidXRlczohMCxjaGlsZExpc3Q6ITAsY2hhcmFjdGVyRGF0YTohMCxzdWJ0cmVlOiEwfTt0aGlzLm9ic2VydmVyLm9ic2VydmUoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LG8pfX19LHtrZXk6XCJvblJlbW92ZVwiLHZhbHVlOmZ1bmN0aW9uKCl7dGhpcy5vYnNlcnZlci5kaXNjb25uZWN0KCl9fSx7a2V5Olwib25NdXRhdGlvblwiLHZhbHVlOmZ1bmN0aW9uKGUpe3N3aXRjaChlLnR5cGUpe2Nhc2VcImNoaWxkTGlzdFwiOmUucmVtb3ZlZE5vZGVzLmxlbmd0aD4wJiZ0aGlzLm9uQ2hpbGRSZW1vdmUoZSksZS5hZGRlZE5vZGVzLmxlbmd0aD4wJiZ0aGlzLm9uQ2hpbGRBZGQoZSk7YnJlYWs7Y2FzZVwiYXR0cmlidXRlc1wiOnRoaXMub25BdHRyaWJ1dGVzQ2hhbmdlKGUpO2JyZWFrO2Nhc2VcImNoYXJhY3RlckRhdGFcIjp0aGlzLm9uQ2hhcmFjdGVyRGF0YUNoYW5nZShlKX19fSx7a2V5Olwib25DaGlsZFJlbW92ZVwiLHZhbHVlOmZ1bmN0aW9uKGUpe3ZhciB0PWUudGFyZ2V0LG89dC5fX3Zjb25zb2xlX25vZGU7aWYobyl7Zm9yKHZhciBuPTA7bjxlLnJlbW92ZWROb2Rlcy5sZW5ndGg7bisrKXt2YXIgaT1lLnJlbW92ZWROb2Rlc1tuXSxhPWkuX192Y29uc29sZV9ub2RlO2EmJmEudmlldyYmYS52aWV3LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoYS52aWV3KX10aGlzLmdldE5vZGUodCl9fX0se2tleTpcIm9uQ2hpbGRBZGRcIix2YWx1ZTpmdW5jdGlvbihlKXt2YXIgdD1lLnRhcmdldCxvPXQuX192Y29uc29sZV9ub2RlO2lmKG8pe3RoaXMuZ2V0Tm9kZSh0KSxvLnZpZXcmJmJbXCJkZWZhdWx0XCJdLnJlbW92ZUNsYXNzKG8udmlldyxcInZjZWxtLW5vY1wiKTtmb3IodmFyIG49MDtuPGUuYWRkZWROb2Rlcy5sZW5ndGg7bisrKXt2YXIgaT1lLmFkZGVkTm9kZXNbbl0sYT1pLl9fdmNvbnNvbGVfbm9kZTtpZihhKWlmKG51bGwhPT1lLm5leHRTaWJsaW5nKXt2YXIgcj1lLm5leHRTaWJsaW5nLl9fdmNvbnNvbGVfbm9kZTtyLnZpZXcmJnRoaXMucmVuZGVyVmlldyhhLHIudmlldyxcImluc2VydEJlZm9yZVwiKX1lbHNlIG8udmlldyYmKG8udmlldy5sYXN0Q2hpbGQ/dGhpcy5yZW5kZXJWaWV3KGEsby52aWV3Lmxhc3RDaGlsZCxcImluc2VydEJlZm9yZVwiKTp0aGlzLnJlbmRlclZpZXcoYSxvLnZpZXcpKX19fX0se2tleTpcIm9uQXR0cmlidXRlc0NoYW5nZVwiLHZhbHVlOmZ1bmN0aW9uKGUpe3ZhciB0PWUudGFyZ2V0Ll9fdmNvbnNvbGVfbm9kZTt0JiYodD10aGlzLmdldE5vZGUoZS50YXJnZXQpLHQudmlldyYmdGhpcy5yZW5kZXJWaWV3KHQsdC52aWV3LCEwKSl9fSx7a2V5Olwib25DaGFyYWN0ZXJEYXRhQ2hhbmdlXCIsdmFsdWU6ZnVuY3Rpb24oZSl7dmFyIHQ9ZS50YXJnZXQuX192Y29uc29sZV9ub2RlO3QmJih0PXRoaXMuZ2V0Tm9kZShlLnRhcmdldCksdC52aWV3JiZ0aGlzLnJlbmRlclZpZXcodCx0LnZpZXcsITApKX19LHtrZXk6XCJyZW5kZXJWaWV3XCIsdmFsdWU6ZnVuY3Rpb24oZSx0LG8pe3ZhciBuPXRoaXMsaT1uZXcgcFtcImRlZmF1bHRcIl0oZSkuZ2V0KCk7c3dpdGNoKGUudmlldz1pLGJbXCJkZWZhdWx0XCJdLmRlbGVnYXRlKGksXCJjbGlja1wiLFwiLnZjZWxtLW5vZGVcIixmdW5jdGlvbih0KXt0LnN0b3BQcm9wYWdhdGlvbigpO3ZhciBvPXRoaXMucGFyZW50Tm9kZTtpZighYltcImRlZmF1bHRcIl0uaGFzQ2xhc3MobyxcInZjZWxtLW5vY1wiKSl7bi5hY3RpdmVkRWxlbT1vLGJbXCJkZWZhdWx0XCJdLmhhc0NsYXNzKG8sXCJ2Yy10b2dnbGVcIik/YltcImRlZmF1bHRcIl0ucmVtb3ZlQ2xhc3MobyxcInZjLXRvZ2dsZVwiKTpiW1wiZGVmYXVsdFwiXS5hZGRDbGFzcyhvLFwidmMtdG9nZ2xlXCIpO2Zvcih2YXIgaT0tMSxhPTA7YTxvLmNoaWxkcmVuLmxlbmd0aDthKyspe3ZhciByPW8uY2hpbGRyZW5bYV07YltcImRlZmF1bHRcIl0uaGFzQ2xhc3MocixcInZjZWxtLWxcIikmJihpKyssci5jaGlsZHJlbi5sZW5ndGg+MHx8KGUuY2hpbGROb2Rlc1tpXT9uLnJlbmRlclZpZXcoZS5jaGlsZE5vZGVzW2ldLHIsXCJyZXBsYWNlXCIpOnIuc3R5bGUuZGlzcGxheT1cIm5vbmVcIikpfX19KSxvKXtjYXNlXCJyZXBsYWNlXCI6dC5wYXJlbnROb2RlLnJlcGxhY2VDaGlsZChpLHQpO2JyZWFrO2Nhc2VcImluc2VydEJlZm9yZVwiOnQucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoaSx0KTticmVhaztkZWZhdWx0OnQuYXBwZW5kQ2hpbGQoaSl9cmV0dXJuIGl9fSx7a2V5OlwiZ2V0Tm9kZVwiLHZhbHVlOmZ1bmN0aW9uKGUpe2lmKCF0aGlzLl9pc0lnbm9yZWRFbGVtZW50KGUpKXt2YXIgdD1lLl9fdmNvbnNvbGVfbm9kZXx8e307aWYodC5ub2RlVHlwZT1lLm5vZGVUeXBlLHQubm9kZU5hbWU9ZS5ub2RlTmFtZSx0LnRhZ05hbWU9ZS50YWdOYW1lfHxcIlwiLHQudGV4dENvbnRlbnQ9XCJcIix0Lm5vZGVUeXBlIT1lLlRFWFRfTk9ERSYmdC5ub2RlVHlwZSE9ZS5ET0NVTUVOVF9UWVBFX05PREV8fCh0LnRleHRDb250ZW50PWUudGV4dENvbnRlbnQpLHQuaWQ9ZS5pZHx8XCJcIix0LmNsYXNzTmFtZT1lLmNsYXNzTmFtZXx8XCJcIix0LmF0dHJpYnV0ZXM9W10sZS5oYXNBdHRyaWJ1dGVzJiZlLmhhc0F0dHJpYnV0ZXMoKSlmb3IodmFyIG89MDtvPGUuYXR0cmlidXRlcy5sZW5ndGg7bysrKXQuYXR0cmlidXRlcy5wdXNoKHtuYW1lOmUuYXR0cmlidXRlc1tvXS5uYW1lLHZhbHVlOmUuYXR0cmlidXRlc1tvXS52YWx1ZXx8XCJcIn0pO2lmKHQuY2hpbGROb2Rlcz1bXSxlLmNoaWxkTm9kZXMubGVuZ3RoPjApZm9yKHZhciBuPTA7bjxlLmNoaWxkTm9kZXMubGVuZ3RoO24rKyl7dmFyIGk9dGhpcy5nZXROb2RlKGUuY2hpbGROb2Rlc1tuXSk7aSYmdC5jaGlsZE5vZGVzLnB1c2goaSl9cmV0dXJuIGUuX192Y29uc29sZV9ub2RlPXQsdH19fSx7a2V5OlwiX2lzSWdub3JlZEVsZW1lbnRcIix2YWx1ZTpmdW5jdGlvbihlKXtyZXR1cm4gZS5ub2RlVHlwZT09ZS5URVhUX05PREUmJlwiXCI9PWUudGV4dENvbnRlbnQucmVwbGFjZSgvXltcXHNcXHVGRUZGXFx4QTBdK3xbXFxzXFx1RkVGRlxceEEwXSskfFxcbisvZyxcIlwiKX19LHtrZXk6XCJfaXNJblZDb25zb2xlXCIsdmFsdWU6ZnVuY3Rpb24oZSl7Zm9yKHZhciB0PWU7dm9pZCAwIT10Oyl7aWYoXCJfX3Zjb25zb2xlXCI9PXQuaWQpcmV0dXJuITA7dD10LnBhcmVudE5vZGV8fHZvaWQgMH1yZXR1cm4hMX19XSksdH0oZFtcImRlZmF1bHRcIl0pO3RbXCJkZWZhdWx0XCJdPW0sZS5leHBvcnRzPXRbXCJkZWZhdWx0XCJdfSxmdW5jdGlvbihlLHQsbyl7dmFyIG49bygzMik7XCJzdHJpbmdcIj09dHlwZW9mIG4mJihuPVtbZS5pZCxuLFwiXCJdXSk7bygxMCkobix7fSk7bi5sb2NhbHMmJihlLmV4cG9ydHM9bi5sb2NhbHMpfSxmdW5jdGlvbihlLHQsbyl7dD1lLmV4cG9ydHM9byg5KSgpLHQucHVzaChbZS5pZCwnLnZjZWxtLW5vZGV7Y29sb3I6IzE4MzY5MX0udmNlbG0ta3tjb2xvcjojMDA4NmIzfS52Y2VsbS12e2NvbG9yOiM5MDV9LnZjZWxtLWx7cGFkZGluZy1sZWZ0OjhweDtwb3NpdGlvbjpyZWxhdGl2ZTt3b3JkLXdyYXA6YnJlYWstd29yZDtsaW5lLWhlaWdodDoxfS52Y2VsbS1sLnZjLXRvZ2dsZT4udmNlbG0tbm9kZXtkaXNwbGF5OmJsb2NrfS52Y2VsbS1sIC52Y2VsbS1ub2RlOmFjdGl2ZXtiYWNrZ3JvdW5kLWNvbG9yOnJnYmEoMCwwLDAsLjE1KX0udmNlbG0tbC52Y2VsbS1ub2MgLnZjZWxtLW5vZGU6YWN0aXZle2JhY2tncm91bmQtY29sb3I6dHJhbnNwYXJlbnR9LnZjZWxtLXR7d2hpdGUtc3BhY2U6cHJlLXdyYXA7d29yZC13cmFwOmJyZWFrLXdvcmR9LnZjZWxtLWwgLnZjZWxtLWx7ZGlzcGxheTpub25lfS52Y2VsbS1sLnZjLXRvZ2dsZT4udmNlbG0tbHttYXJnaW4tbGVmdDo0cHg7ZGlzcGxheTpibG9ja30udmNlbG0tbDpiZWZvcmV7Y29udGVudDpcIlwiO2Rpc3BsYXk6YmxvY2s7cG9zaXRpb246YWJzb2x1dGU7dG9wOjZweDtsZWZ0OjNweDt3aWR0aDowO2hlaWdodDowO2JvcmRlcjozcHggc29saWQgdHJhbnNwYXJlbnQ7Ym9yZGVyLWxlZnQtY29sb3I6IzAwMH0udmNlbG0tbC52Yy10b2dnbGU6YmVmb3Jle2Rpc3BsYXk6YmxvY2s7dG9wOjZweDtsZWZ0OjA7Ym9yZGVyLXRvcC1jb2xvcjojMDAwO2JvcmRlci1sZWZ0LWNvbG9yOnRyYW5zcGFyZW50fS52Y2VsbS1sLnZjZWxtLW5vYzpiZWZvcmV7ZGlzcGxheTpub25lfScsXCJcIl0pfSxmdW5jdGlvbihlLHQpe2UuZXhwb3J0cz0nPGRpdj5cXG4gIDxkaXYgY2xhc3M9XCJ2Yy1sb2dcIj48L2Rpdj5cXG48L2Rpdj4nfSxmdW5jdGlvbihlLHQsbyl7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gbihlKXtpZihlJiZlLl9fZXNNb2R1bGUpcmV0dXJuIGU7dmFyIHQ9e307aWYobnVsbCE9ZSlmb3IodmFyIG8gaW4gZSlPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZSxvKSYmKHRbb109ZVtvXSk7cmV0dXJuIHRbXCJkZWZhdWx0XCJdPWUsdH1mdW5jdGlvbiBpKGUpe3JldHVybiBlJiZlLl9fZXNNb2R1bGU/ZTp7XCJkZWZhdWx0XCI6ZX19ZnVuY3Rpb24gYShlLHQpe2lmKCEoZSBpbnN0YW5jZW9mIHQpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIil9ZnVuY3Rpb24gcihlKXt2YXIgdD1bXCJiclwiLFwiaHJcIixcImltZ1wiLFwiaW5wdXRcIixcImxpbmtcIixcIm1ldGFcIl07cmV0dXJuIGU9ZT9lLnRvTG93ZXJDYXNlKCk6XCJcIix0LmluZGV4T2YoZSk+LTF9ZnVuY3Rpb24gbChlKXtyZXR1cm4gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoZSl9ZnVuY3Rpb24gYyhlKXtyZXR1cm4gZS5yZXBsYWNlKC9eW1xcc1xcdUZFRkZcXHhBMF0rfFtcXHNcXHVGRUZGXFx4QTBdKyQvZyxcIlwiKX1PYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgcz1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoZSx0KXtmb3IodmFyIG89MDtvPHQubGVuZ3RoO28rKyl7dmFyIG49dFtvXTtuLmVudW1lcmFibGU9bi5lbnVtZXJhYmxlfHwhMSxuLmNvbmZpZ3VyYWJsZT0hMCxcInZhbHVlXCJpbiBuJiYobi53cml0YWJsZT0hMCksT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsbi5rZXksbil9fXJldHVybiBmdW5jdGlvbih0LG8sbil7cmV0dXJuIG8mJmUodC5wcm90b3R5cGUsbyksbiYmZSh0LG4pLHR9fSgpLGQ9bygzNSksdT1pKGQpLHY9bygzNiksZj1pKHYpLHA9byg0KSxoPShuKHApLG8oNSkpLGc9aShoKSxiPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZSh0KXthKHRoaXMsZSksdGhpcy5ub2RlPXQsdGhpcy52aWV3PXRoaXMuX2NyZWF0ZSh0aGlzLm5vZGUpfXJldHVybiBzKGUsW3trZXk6XCJnZXRcIix2YWx1ZTpmdW5jdGlvbigpe3JldHVybiB0aGlzLnZpZXd9fSx7a2V5OlwiX2NyZWF0ZVwiLHZhbHVlOmZ1bmN0aW9uKGUsdCl7dmFyIG89ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcIkRJVlwiKTtzd2l0Y2goZ1tcImRlZmF1bHRcIl0uYWRkQ2xhc3MobyxcInZjZWxtLWxcIiksZS5ub2RlVHlwZSl7Y2FzZSBvLkVMRU1FTlRfTk9ERTp0aGlzLl9jcmVhdGVFbGVtZW50Tm9kZShlLG8pO2JyZWFrO2Nhc2Ugby5URVhUX05PREU6dGhpcy5fY3JlYXRlVGV4dE5vZGUoZSxvKTticmVhaztjYXNlIG8uQ09NTUVOVF9OT0RFOmNhc2Ugby5ET0NVTUVOVF9OT0RFOmNhc2Ugby5ET0NVTUVOVF9UWVBFX05PREU6Y2FzZSBvLkRPQ1VNRU5UX0ZSQUdNRU5UX05PREU6fXJldHVybiBvfX0se2tleTpcIl9jcmVhdGVUZXh0Tm9kZVwiLHZhbHVlOmZ1bmN0aW9uKGUsdCl7Z1tcImRlZmF1bHRcIl0uYWRkQ2xhc3ModCxcInZjZWxtLXQgdmNlbG0tbm9jXCIpLGUudGV4dENvbnRlbnQmJnQuYXBwZW5kQ2hpbGQobChjKGUudGV4dENvbnRlbnQpKSl9fSx7a2V5OlwiX2NyZWF0ZUVsZW1lbnROb2RlXCIsdmFsdWU6ZnVuY3Rpb24oZSx0KXt2YXIgbz1yKGUudGFnTmFtZSksbj1vOzA9PWUuY2hpbGROb2Rlcy5sZW5ndGgmJihuPSEwKTt2YXIgaT1nW1wiZGVmYXVsdFwiXS5yZW5kZXIodVtcImRlZmF1bHRcIl0se25vZGU6ZX0pLGE9Z1tcImRlZmF1bHRcIl0ucmVuZGVyKGZbXCJkZWZhdWx0XCJdLHtub2RlOmV9KTtpZihuKWdbXCJkZWZhdWx0XCJdLmFkZENsYXNzKHQsXCJ2Y2VsbS1ub2NcIiksdC5hcHBlbmRDaGlsZChpKSxvfHx0LmFwcGVuZENoaWxkKGEpO2Vsc2V7dC5hcHBlbmRDaGlsZChpKTtmb3IodmFyIGw9MDtsPGUuY2hpbGROb2Rlcy5sZW5ndGg7bCsrKXt2YXIgYz1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiRElWXCIpO2dbXCJkZWZhdWx0XCJdLmFkZENsYXNzKGMsXCJ2Y2VsbS1sXCIpLHQuYXBwZW5kQ2hpbGQoYyl9b3x8dC5hcHBlbmRDaGlsZChhKX19fV0pLGV9KCk7dFtcImRlZmF1bHRcIl09YixlLmV4cG9ydHM9dFtcImRlZmF1bHRcIl19LGZ1bmN0aW9uKGUsdCl7ZS5leHBvcnRzPSc8c3BhbiBjbGFzcz1cInZjZWxtLW5vZGVcIj4mbHQ7e3tub2RlLnRhZ05hbWUudG9Mb3dlckNhc2UoKX19e3tpZiAobm9kZS5jbGFzc05hbWUgfHwgbm9kZS5hdHRyaWJ1dGVzLmxlbmd0aCl9fVxcbiAgPGkgY2xhc3M9XCJ2Y2VsbS1rXCI+XFxuICAgIHt7Zm9yICh2YXIgaSA9IDA7IGkgPCBub2RlLmF0dHJpYnV0ZXMubGVuZ3RoOyBpKyspfX1cXG4gICAgICB7e2lmIChub2RlLmF0dHJpYnV0ZXNbaV0udmFsdWUgIT09IFxcJ1xcJyl9fVxcbiAgICAgICAge3tub2RlLmF0dHJpYnV0ZXNbaV0ubmFtZX19PVwiPGkgY2xhc3M9XCJ2Y2VsbS12XCI+e3tub2RlLmF0dHJpYnV0ZXNbaV0udmFsdWV9fTwvaT5cInt7ZWxzZX19XFxuICAgICAgICB7e25vZGUuYXR0cmlidXRlc1tpXS5uYW1lfX17ey9pZn19e3svZm9yfX08L2k+e3svaWZ9fSZndDs8L3NwYW4+J30sZnVuY3Rpb24oZSx0KXtlLmV4cG9ydHM9JzxzcGFuIGNsYXNzPVwidmNlbG0tbm9kZVwiPiZsdDsve3tub2RlLnRhZ05hbWUudG9Mb3dlckNhc2UoKX19Jmd0Ozwvc3Bhbj4nfSxmdW5jdGlvbihlLHQsbyl7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gbihlKXtpZihlJiZlLl9fZXNNb2R1bGUpcmV0dXJuIGU7dmFyIHQ9e307aWYobnVsbCE9ZSlmb3IodmFyIG8gaW4gZSlPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZSxvKSYmKHRbb109ZVtvXSk7cmV0dXJuIHRbXCJkZWZhdWx0XCJdPWUsdH1mdW5jdGlvbiBpKGUpe3JldHVybiBlJiZlLl9fZXNNb2R1bGU/ZTp7XCJkZWZhdWx0XCI6ZX19ZnVuY3Rpb24gYShlLHQpe2lmKCEoZSBpbnN0YW5jZW9mIHQpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIil9ZnVuY3Rpb24gcihlLHQpe2lmKCFlKXRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTtyZXR1cm4hdHx8XCJvYmplY3RcIiE9dHlwZW9mIHQmJlwiZnVuY3Rpb25cIiE9dHlwZW9mIHQ/ZTp0fWZ1bmN0aW9uIGwoZSx0KXtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiB0JiZudWxsIT09dCl0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIit0eXBlb2YgdCk7ZS5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZSh0JiZ0LnByb3RvdHlwZSx7Y29uc3RydWN0b3I6e3ZhbHVlOmUsZW51bWVyYWJsZTohMSx3cml0YWJsZTohMCxjb25maWd1cmFibGU6ITB9fSksdCYmKE9iamVjdC5zZXRQcm90b3R5cGVPZj9PYmplY3Quc2V0UHJvdG90eXBlT2YoZSx0KTplLl9fcHJvdG9fXz10KX1PYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgYz1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoZSx0KXtmb3IodmFyIG89MDtvPHQubGVuZ3RoO28rKyl7dmFyIG49dFtvXTtuLmVudW1lcmFibGU9bi5lbnVtZXJhYmxlfHwhMSxuLmNvbmZpZ3VyYWJsZT0hMCxcInZhbHVlXCJpbiBuJiYobi53cml0YWJsZT0hMCksT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsbi5rZXksbil9fXJldHVybiBmdW5jdGlvbih0LG8sbil7cmV0dXJuIG8mJmUodC5wcm90b3R5cGUsbyksbiYmZSh0LG4pLHR9fSgpLHM9bygxOCksZD1pKHMpLHU9bygzOCksdj1pKHUpLGY9bygzOSkscD1pKGYpLGg9byg0KSxnPW4oaCksYj1vKDUpLG09aShiKSx5PWZ1bmN0aW9uKGUpe2Z1bmN0aW9uIHQoKXt2YXIgZTthKHRoaXMsdCk7Zm9yKHZhciBvPWFyZ3VtZW50cy5sZW5ndGgsbj1BcnJheShvKSxpPTA7bz5pO2krKyluW2ldPWFyZ3VtZW50c1tpXTt2YXIgbD1yKHRoaXMsKGU9T2JqZWN0LmdldFByb3RvdHlwZU9mKHQpKS5jYWxsLmFwcGx5KGUsW3RoaXNdLmNvbmNhdChuKSkpO3JldHVybiBsLiR0YWJib3g9bVtcImRlZmF1bHRcIl0ucmVuZGVyKHZbXCJkZWZhdWx0XCJdLHt9KSxsLmN1cnJlbnRUeXBlPVwiXCIsbC50eXBlTmFtZU1hcD17Y29va2llczpcIkNvb2tpZXNcIixsb2NhbHN0b3JhZ2U6XCJMb2NhbFN0b3JhZ2VcIn0sbH1yZXR1cm4gbCh0LGUpLGModCxbe2tleTpcIm9uUmVuZGVyVGFiXCIsdmFsdWU6ZnVuY3Rpb24oZSl7ZSh0aGlzLiR0YWJib3gpfX0se2tleTpcIm9uQWRkVG9wQmFyXCIsdmFsdWU6ZnVuY3Rpb24oZSl7Zm9yKHZhciB0PXRoaXMsbz1bXCJDb29raWVzXCIsXCJMb2NhbFN0b3JhZ2VcIl0sbj1bXSxpPTA7aTxvLmxlbmd0aDtpKyspbi5wdXNoKHtuYW1lOm9baV0sZGF0YTp7dHlwZTpvW2ldLnRvTG93ZXJDYXNlKCl9LGNsYXNzTmFtZTpcIlwiLG9uQ2xpY2s6ZnVuY3Rpb24oKXtyZXR1cm4gbVtcImRlZmF1bHRcIl0uaGFzQ2xhc3ModGhpcyxcInZjLWFjdGl2ZWRcIik/ITE6KHQuY3VycmVudFR5cGU9dGhpcy5kYXRhc2V0LnR5cGUsdm9pZCB0LnJlbmRlclN0b3JhZ2UoKSl9fSk7blswXS5jbGFzc05hbWU9XCJ2Yy1hY3RpdmVkXCIsZShuKX19LHtrZXk6XCJvbkFkZFRvb2xcIix2YWx1ZTpmdW5jdGlvbihlKXt2YXIgdD10aGlzLG89W3tuYW1lOlwiUmVmcmVzaFwiLGdsb2JhbDohMSxvbkNsaWNrOmZ1bmN0aW9uKGUpe3QucmVuZGVyU3RvcmFnZSgpfX0se25hbWU6XCJDbGVhclwiLGdsb2JhbDohMSxvbkNsaWNrOmZ1bmN0aW9uKGUpe3QuY2xlYXJMb2coKX19XTtlKG8pfX0se2tleTpcIm9uUmVhZHlcIix2YWx1ZTpmdW5jdGlvbigpe319LHtrZXk6XCJvblNob3dcIix2YWx1ZTpmdW5jdGlvbigpe1wiXCI9PXRoaXMuY3VycmVudFR5cGUmJih0aGlzLmN1cnJlbnRUeXBlPVwiY29va2llc1wiLHRoaXMucmVuZGVyU3RvcmFnZSgpKX19LHtrZXk6XCJjbGVhckxvZ1wiLHZhbHVlOmZ1bmN0aW9uKCl7aWYodGhpcy5jdXJyZW50VHlwZSYmd2luZG93LmNvbmZpcm0pe3ZhciBlPXdpbmRvdy5jb25maXJtKFwiUmVtb3ZlIGFsbCBcIit0aGlzLnR5cGVOYW1lTWFwW3RoaXMuY3VycmVudFR5cGVdK1wiP1wiKTtpZighZSlyZXR1cm4hMX1zd2l0Y2godGhpcy5jdXJyZW50VHlwZSl7Y2FzZVwiY29va2llc1wiOnRoaXMuY2xlYXJDb29raWVMaXN0KCk7YnJlYWs7Y2FzZVwibG9jYWxzdG9yYWdlXCI6dGhpcy5jbGVhckxvY2FsU3RvcmFnZUxpc3QoKTticmVhaztkZWZhdWx0OnJldHVybiExfXRoaXMucmVuZGVyU3RvcmFnZSgpfX0se2tleTpcInJlbmRlclN0b3JhZ2VcIix2YWx1ZTpmdW5jdGlvbigpe3ZhciBlPVtdO3N3aXRjaCh0aGlzLmN1cnJlbnRUeXBlKXtjYXNlXCJjb29raWVzXCI6ZT10aGlzLmdldENvb2tpZUxpc3QoKTticmVhaztjYXNlXCJsb2NhbHN0b3JhZ2VcIjplPXRoaXMuZ2V0TG9jYWxTdG9yYWdlTGlzdCgpO2JyZWFrO2RlZmF1bHQ6cmV0dXJuITF9dmFyIHQ9bVtcImRlZmF1bHRcIl0ub25lKFwiLnZjLWxvZ1wiLHRoaXMuJHRhYmJveCk7aWYoMD09ZS5sZW5ndGgpdC5pbm5lckhUTUw9XCJcIjtlbHNle2Zvcih2YXIgbz0wO288ZS5sZW5ndGg7bysrKWVbb10ubmFtZT1nLmh0bWxFbmNvZGUoZVtvXS5uYW1lKSxlW29dLnZhbHVlPWcuaHRtbEVuY29kZShlW29dLnZhbHVlKTt0LmlubmVySFRNTD1tW1wiZGVmYXVsdFwiXS5yZW5kZXIocFtcImRlZmF1bHRcIl0se2xpc3Q6ZX0sITApfX19LHtrZXk6XCJnZXRDb29raWVMaXN0XCIsdmFsdWU6ZnVuY3Rpb24oKXtpZighZG9jdW1lbnQuY29va2llfHwhbmF2aWdhdG9yLmNvb2tpZUVuYWJsZWQpcmV0dXJuW107Zm9yKHZhciBlPVtdLHQ9ZG9jdW1lbnQuY29va2llLnNwbGl0KFwiO1wiKSxvPTA7bzx0Lmxlbmd0aDtvKyspe3ZhciBuPXRbb10uc3BsaXQoXCI9XCIpLGk9bi5zaGlmdCgpLnJlcGxhY2UoL14gLyxcIlwiKSxhPW4uam9pbihcIj1cIik7ZS5wdXNoKHtuYW1lOmRlY29kZVVSSUNvbXBvbmVudChpKSx2YWx1ZTpkZWNvZGVVUklDb21wb25lbnQoYSl9KX1yZXR1cm4gZX19LHtrZXk6XCJnZXRMb2NhbFN0b3JhZ2VMaXN0XCIsdmFsdWU6ZnVuY3Rpb24oKXtpZighd2luZG93LmxvY2FsU3RvcmFnZSlyZXR1cm5bXTt0cnl7Zm9yKHZhciBlPVtdLHQ9MDt0PGxvY2FsU3RvcmFnZS5sZW5ndGg7dCsrKXt2YXIgbz1sb2NhbFN0b3JhZ2Uua2V5KHQpLG49bG9jYWxTdG9yYWdlLmdldEl0ZW0obyk7ZS5wdXNoKHtuYW1lOm8sdmFsdWU6bn0pfXJldHVybiBlfWNhdGNoKGkpe3JldHVybltdfX19LHtrZXk6XCJjbGVhckNvb2tpZUxpc3RcIix2YWx1ZTpmdW5jdGlvbigpe2lmKGRvY3VtZW50LmNvb2tpZSYmbmF2aWdhdG9yLmNvb2tpZUVuYWJsZWQpe2Zvcih2YXIgZT10aGlzLmdldENvb2tpZUxpc3QoKSx0PTA7dDxlLmxlbmd0aDt0KyspZG9jdW1lbnQuY29va2llPWVbdF0ubmFtZStcIj07ZXhwaXJlcz1UaHUsIDAxIEphbiAxOTcwIDAwOjAwOjAwIEdNVFwiO3RoaXMucmVuZGVyU3RvcmFnZSgpfX19LHtrZXk6XCJjbGVhckxvY2FsU3RvcmFnZUxpc3RcIix2YWx1ZTpmdW5jdGlvbigpe2lmKHdpbmRvdy5sb2NhbFN0b3JhZ2UpdHJ5e2xvY2FsU3RvcmFnZS5jbGVhcigpLHRoaXMucmVuZGVyU3RvcmFnZSgpfWNhdGNoKGUpe2FsZXJ0KFwibG9jYWxTdG9yYWdlLmNsZWFyKCkgZmFpbC5cIil9fX1dKSx0fShkW1wiZGVmYXVsdFwiXSk7dFtcImRlZmF1bHRcIl09eSxlLmV4cG9ydHM9dFtcImRlZmF1bHRcIl19LGZ1bmN0aW9uKGUsdCl7ZS5leHBvcnRzPSc8ZGl2IGNsYXNzPVwidmMtdGFibGVcIj5cXG4gIDxkaXYgY2xhc3M9XCJ2Yy1sb2dcIj48L2Rpdj5cXG48L2Rpdj4nfSxmdW5jdGlvbihlLHQpe2UuZXhwb3J0cz0nPGRpdj5cXG4gIDxkbCBjbGFzcz1cInZjLXRhYmxlLXJvd1wiPlxcbiAgICA8ZGQgY2xhc3M9XCJ2Yy10YWJsZS1jb2xcIj5OYW1lPC9kZD5cXG4gICAgPGRkIGNsYXNzPVwidmMtdGFibGUtY29sIHZjLXRhYmxlLWNvbC0yXCI+VmFsdWU8L2RkPlxcbiAgPC9kbD5cXG4gIHt7Zm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKX19XFxuICA8ZGwgY2xhc3M9XCJ2Yy10YWJsZS1yb3dcIj5cXG4gICAgPGRkIGNsYXNzPVwidmMtdGFibGUtY29sXCI+e3tsaXN0W2ldLm5hbWV9fTwvZGQ+XFxuICAgIDxkZCBjbGFzcz1cInZjLXRhYmxlLWNvbCB2Yy10YWJsZS1jb2wtMlwiPnt7bGlzdFtpXS52YWx1ZX19PC9kZD5cXG4gIDwvZGw+XFxuICB7ey9mb3J9fVxcbjwvZGl2Pid9XSl9KTsiLCIvKipcclxuICogV2ViQVLnroDljZXnsbtcclxuICogQHBhcmFtIGludGVydmFsIOivhuWIq+mXtOmalOaXtumXtCjmr6vnp5IpXHJcbiAqIEBwYXJhbSByZWNvZ25pemVVcmwg6K+G5Yir5pyN5Yqh5Zyw5Z2AXHJcbiAqIEBjb25zdHJ1Y3RvclxyXG4gKi9cclxuXHJcbmNvbnN0IFdlYkFSID0gZnVuY3Rpb24oaW50ZXJ2YWwsIHJlY29nbml6ZVVybCkge1xyXG4gICAgdmFyIGludGVydmFsID0gaW50ZXJ2YWwgfHwgMTAwMDtcclxuICAgIHZhciByZWNvZ25pemVVcmwgPSByZWNvZ25pemVVcmwgfHwgJyc7XHJcblxyXG4gICAgdmFyIHZpZGVvU2V0dGluZyA9IHt3aWR0aDogMzIwLCBoZWlnaHQ6IDI0MH07XHJcbiAgICB2YXIgdmlkZW9FbGVtZW50ID0gbnVsbDtcclxuICAgIHZhciB2aWRlb0RldmljZUVsZW1lbnQgPSBudWxsO1xyXG5cclxuICAgIHZhciBjYW52YXNFbGVtZW50ID0gbnVsbDtcclxuICAgIHZhciBjYW52YXNDb250ZXh0ID0gbnVsbDtcclxuXHJcbiAgICB2YXIgdGltZXIgPSBudWxsO1xyXG4gICAgdmFyIGlzUmVjb2duaXppbmcgPSBmYWxzZTtcclxuXHJcbiAgICB0aGlzLnVuU3VwcG9ydCA9IHVuZGVmaW5lZDtcclxuXHJcbiAgICB0aGlzLmRldmljZXMgPSBbXTtcclxuXHJcbiAgICB2YXIgZGVidWcgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgIGRlYnVnLnNldEF0dHJpYnV0ZSgnaWQnLCAnZGVidWcnKTtcclxuICAgIGRlYnVnLnNldEF0dHJpYnV0ZSgnd2lkdGgnLCAod2luZG93LmlubmVyV2lkdGggLyAyKS50b1N0cmluZygpKTtcclxuICAgIGRlYnVnLnNldEF0dHJpYnV0ZSgnaGVpZ2h0Jywgd2luZG93LmlubmVySGVpZ2h0LnRvU3RyaW5nKCkpO1xyXG4gICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChkZWJ1Zyk7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDliJflh7rmiYDmnInmkYTlg4/lpLRcclxuICAgICAqIEBwYXJhbSB2aWRlb0RldmljZVxyXG4gICAgICogQHJldHVybnMge1Byb21pc2V9XHJcbiAgICAgKi9cclxuICAgIHRoaXMubGlzdENhbWVyYSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIFxyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgICAgICAgbmF2aWdhdG9yLm1lZGlhRGV2aWNlcy5lbnVtZXJhdGVEZXZpY2VzKClcclxuICAgICAgICAgICAgICAgIC50aGVuKChkZXZpY2VzKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coZGV2aWNlcyk7XHJcbiAgICAgICAgICAgICAgICAgICAgZGV2aWNlcy5maW5kKChkZXZpY2UpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRldmljZS5raW5kID09PSAndmlkZW9pbnB1dCcpIHsgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhkZXZpY2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGRldmljZUluZm8gPSB7fTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXZpY2VJbmZvWyduYW1lJ10gPSBkZXZpY2UubGFiZWwgfHwgJ2NhbWVyYSc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXZpY2VJbmZvWydkZXZpY2VJZCddID0gIGRldmljZS5kZXZpY2VJZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIOWwhuaRhOWDj+WktGlk5a2Y5YKo5Zyoc2VsZWN05YWD57Sg5Lit77yM5pa55L6/5YiH5o2i5YmN44CB5ZCO572u5pGE5YOP5aS0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5kZXZpY2VzLnB1c2goZGV2aWNlSW5mbyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKF90aGlzLmRldmljZXMubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdCgn5rKh5pyJ5pGE5YOP5aS0Jyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8g5Yib5bu6Y2FudmFz77yM5oiq5Y+W5pGE5YOP5aS05Zu+54mH5pe25L2/55SoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbnZhc0VsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FudmFzQ29udGV4dCA9IGNhbnZhc0VsZW1lbnQuZ2V0Q29udGV4dCgnMmQnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShfdGhpcy5kZXZpY2VzKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgLmNhdGNoKChlcnIpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICByZWplY3QoZXJyKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIOaJk+W8gOaRhOWDj+WktFxyXG4gICAgICogQHBhcmFtIHZpZGVvXHJcbiAgICAgKiBAcGFyYW0gZGV2aWNlSWRcclxuICAgICAqIEBwYXJhbSBzZXR0aW5nXHJcbiAgICAgKiBAcmV0dXJucyB7UHJvbWlzZX1cclxuICAgICAqL1xyXG4gICAgdGhpcy5vcGVuQ2FtZXJhID0gZnVuY3Rpb24odmlkZW8sIGRldmljZUlkLCBzZXR0aW5nKSB7XHJcbiAgICAgICAgdmlkZW9FbGVtZW50ID0gdmlkZW87XHJcbiAgICAgICAgaWYgKHNldHRpbmcpIHtcclxuICAgICAgICAgICAgdmlkZW9TZXR0aW5nID0gc2V0dGluZztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIOaRhOWDj+WktOWPguaVsFxyXG4gICAgICAgIC8vIOabtOWkmuWPguaVsOivt+afpeeciyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvTWVkaWFTdHJlYW1Db25zdHJhaW50c1xyXG4gICAgICAgIGNvbnN0IGNvbnN0cmFpbnRzID0ge1xyXG4gICAgICAgICAgICBhdWRpbzogZmFsc2UsXHJcbiAgICAgICAgICAgIHZpZGVvOiB7ZGV2aWNlSWQ6IHtleGFjdDogZGV2aWNlSWR9fVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIGNhbnZhc0VsZW1lbnQuc2V0QXR0cmlidXRlKCd3aWR0aCcsIHZpZGVvU2V0dGluZy53aWR0aCArICdweCcpO1xyXG4gICAgICAgIGNhbnZhc0VsZW1lbnQuc2V0QXR0cmlidXRlKCdoZWlnaHQnLCB2aWRlb1NldHRpbmcuaGVpZ2h0ICsgJ3B4Jyk7XHJcblxyXG4gICAgICAgIC8vIOWmguaenOaYr+WIh+aNouaRhOWDj+WktO+8jOWImemcgOimgeWFiOWFs+mXreOAglxyXG4gICAgICAgIGlmICh2aWRlb0VsZW1lbnQuc3JjT2JqZWN0KSB7XHJcbiAgICAgICAgICAgIHZpZGVvRWxlbWVudC5zcmNPYmplY3QuZ2V0VHJhY2tzKCkuZm9yRWFjaCgodHJhY2spID0+IHtcclxuICAgICAgICAgICAgICAgIHRyYWNrLnN0b3AoKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICAgICAgICBuYXZpZ2F0b3IubWVkaWFEZXZpY2VzLmdldFVzZXJNZWRpYShjb25zdHJhaW50cylcclxuICAgICAgICAgICAgICAgIC50aGVuKChzdHJlYW0pID0+IHtcclxuICAgICAgICAgICAgICAgICAgICB2aWRlb0VsZW1lbnQuc3JjT2JqZWN0ID0gc3RyZWFtO1xyXG4gICAgICAgICAgICAgICAgICAgIHZpZGVvRWxlbWVudC5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcclxuICAgICAgICAgICAgICAgICAgICB2aWRlb0VsZW1lbnQucGxheSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUodHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgLmNhdGNoKChlcnIpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICByZWplY3QoZXJyKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIOaIquWPluaRhOWDj+WktOWbvueJh++8jOi/lOWbniBiYXNlNjTnvJbnoIHlkI7nmoTlm77niYfmlbDmja5cclxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9XHJcbiAgICAgKi9cclxuICAgIHRoaXMuY2FwdHVyZVZpZGVvID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgY2FudmFzQ29udGV4dC5kcmF3SW1hZ2UodmlkZW9FbGVtZW50LCAwLCAwLCB2aWRlb1NldHRpbmcud2lkdGgsIHZpZGVvU2V0dGluZy5oZWlnaHQpO1xyXG4gICAgICAgIHJldHVybiBjYW52YXNFbGVtZW50LnRvRGF0YVVSTCgnaW1hZ2UvanBlZycsIDAuNSkuc3BsaXQoJ2Jhc2U2NCwnKVsxXTtcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDor4bliKtcclxuICAgICAqL1xyXG4gICAgdGhpcy5zdGFydFJlY29nbml6ZSA9IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XHJcbiAgICAgICAgdGltZXIgPSB3aW5kb3cuc2V0SW50ZXJ2YWwoKCkgPT4ge1xyXG4gICAgICAgICAgICBpZiAoaXNSZWNvZ25pemluZykgcmV0dXJuO1xyXG5cclxuICAgICAgICAgICAgaXNSZWNvZ25pemluZyA9IHRydWU7XHJcblxyXG4gICAgICAgICAgICAvLyDku47mkYTlg4/lpLTkuK3mipPlj5bkuIDlvKDlm77niYdcclxuICAgICAgICAgICAgY29uc3QgaW1hZ2UgPSB7aW1hZ2U6IHRoaXMuY2FwdHVyZVZpZGVvKCl9O1xyXG5cclxuICAgICAgICAgICAgLy8g5Y+R6YCB5Yiw5pyN5Yqh5Zmo6K+G5YirXHJcbiAgICAgICAgICAgIHRoaXMuaHR0cFBvc3QocmVjb2duaXplVXJsLCBpbWFnZSlcclxuICAgICAgICAgICAgICAgIC50aGVuKChtc2cpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnN0b3BSZWNvZ25pemUoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2sobXNnKTtcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAuY2F0Y2goKGVycikgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGlzUmVjb2duaXppbmcgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnRyYWNlKGVycik7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICB9LCBpbnRlcnZhbCk7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICog5YGc5q2i6K+G5YirXHJcbiAgICAgKi9cclxuICAgIHRoaXMuc3RvcFJlY29nbml6ZSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIGlmICh0aW1lcikge1xyXG4gICAgICAgICAgICB3aW5kb3cuY2xlYXJJbnRlcnZhbCh0aW1lcik7XHJcbiAgICAgICAgICAgIGlzUmVjb2duaXppbmcgPSBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogSFRUUOivt+axgu+8jOWPr+S7peS9v+eUqGpRdWVyeeetieS7o+abv1xyXG4gICAgICogQHBhcmFtIHVybFxyXG4gICAgICogQHBhcmFtIGltYWdlXHJcbiAgICAgKiBAcmV0dXJucyB7UHJvbWlzZX1cclxuICAgICAqL1xyXG4gICAgdGhpcy5odHRwUG9zdCA9IGZ1bmN0aW9uKHVybCwgaW1hZ2UpIHtcclxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBodHRwID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XHJcbiAgICAgICAgICAgIGh0dHAub25sb2FkID0gKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBtc2cgPSBKU09OLnBhcnNlKGh0dHAucmVzcG9uc2VUZXh0KTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaHR0cC5zdGF0dXMgPT09IDIwMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobXNnLnN0YXR1c0NvZGUgPT09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUobXNnLnJlc3VsdCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWplY3QobXNnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChtc2cpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGVycikge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlamVjdChlcnIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBodHRwLm9uZXJyb3IgPSAoZXJyKSA9PiB7XHJcbiAgICAgICAgICAgICAgICByZWplY3QoZXJyKTtcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIGh0dHAub3BlbignUE9TVCcsIHVybCk7XHJcbiAgICAgICAgICAgIGh0dHAuc2V0UmVxdWVzdEhlYWRlcignQ29udGVudC1UeXBlJywgJ2FwcGxpY2F0aW9uL2pzb247Q2hhcnNldD1VVEYtOCcpO1xyXG4gICAgICAgICAgICBodHRwLnNlbmQoSlNPTi5zdHJpbmdpZnkoaW1hZ2UpKVxyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIOiwg+eUqOi+k+WHulxyXG4gICAgICogQHBhcmFtIGFyZ1xyXG4gICAgICovXHJcbiAgICB0aGlzLnRyYWNlID0gZnVuY3Rpb24oYXJnKSB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBhcmcgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgIGRlYnVnLmlubmVySFRNTCArPSBhcmc7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgZGVidWcuaW5uZXJIVE1MICs9IEpTT04uc3RyaW5naWZ5KGFyZyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGRlYnVnLmlubmVySFRNTCArPSAnPGJyIC8+JztcclxuICAgIH07XHJcblxyXG59O1xyXG5leHBvcnQgZGVmYXVsdCBXZWJBUjtcclxuIl19
